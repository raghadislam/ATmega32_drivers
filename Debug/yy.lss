
yy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000202  00800060  000045ec  00004680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800262  00800262  00004882  2**0
                  ALLOC
  3 .stab         00004188  00000000  00000000  00004884  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ccd  00000000  00000000  00008a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  0000a6d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000024d  00000000  00000000  0000a8d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000280c  00000000  00000000  0000ab26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015f1  00000000  00000000  0000d332  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001357  00000000  00000000  0000e923  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0000fc7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000313  00000000  00000000  0000fe9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b76  00000000  00000000  000101af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010d25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__vector_1>
       8:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__vector_2>
       c:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <main>
      8a:	0c 94 f4 22 	jmp	0x45e8	; 0x45e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__ashldi3>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	60 97       	sbiw	r28, 0x10	; 16
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	a8 2f       	mov	r26, r24
     1ac:	00 23       	and	r16, r16
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <__ashldi3+0x22>
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__ashldi3+0xe4>
     1b2:	7e 01       	movw	r14, r28
     1b4:	08 94       	sec
     1b6:	e1 1c       	adc	r14, r1
     1b8:	f1 1c       	adc	r15, r1
     1ba:	88 e0       	ldi	r24, 0x08	; 8
     1bc:	f7 01       	movw	r30, r14
     1be:	11 92       	st	Z+, r1
     1c0:	8a 95       	dec	r24
     1c2:	e9 f7       	brne	.-6      	; 0x1be <__ashldi3+0x2e>
     1c4:	29 83       	std	Y+1, r18	; 0x01
     1c6:	3a 83       	std	Y+2, r19	; 0x02
     1c8:	4b 83       	std	Y+3, r20	; 0x03
     1ca:	5c 83       	std	Y+4, r21	; 0x04
     1cc:	6d 83       	std	Y+5, r22	; 0x05
     1ce:	7e 83       	std	Y+6, r23	; 0x06
     1d0:	af 83       	std	Y+7, r26	; 0x07
     1d2:	98 87       	std	Y+8, r25	; 0x08
     1d4:	80 e2       	ldi	r24, 0x20	; 32
     1d6:	80 1b       	sub	r24, r16
     1d8:	e8 2f       	mov	r30, r24
     1da:	ff 27       	eor	r31, r31
     1dc:	e7 fd       	sbrc	r30, 7
     1de:	f0 95       	com	r31
     1e0:	49 81       	ldd	r20, Y+1	; 0x01
     1e2:	5a 81       	ldd	r21, Y+2	; 0x02
     1e4:	6b 81       	ldd	r22, Y+3	; 0x03
     1e6:	7c 81       	ldd	r23, Y+4	; 0x04
     1e8:	18 16       	cp	r1, r24
     1ea:	84 f0       	brlt	.+32     	; 0x20c <__ashldi3+0x7c>
     1ec:	19 86       	std	Y+9, r1	; 0x09
     1ee:	1a 86       	std	Y+10, r1	; 0x0a
     1f0:	1b 86       	std	Y+11, r1	; 0x0b
     1f2:	1c 86       	std	Y+12, r1	; 0x0c
     1f4:	88 27       	eor	r24, r24
     1f6:	99 27       	eor	r25, r25
     1f8:	8e 1b       	sub	r24, r30
     1fa:	9f 0b       	sbc	r25, r31
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <__ashldi3+0x76>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	66 1f       	adc	r22, r22
     204:	77 1f       	adc	r23, r23
     206:	8a 95       	dec	r24
     208:	d2 f7       	brpl	.-12     	; 0x1fe <__ashldi3+0x6e>
     20a:	28 c0       	rjmp	.+80     	; 0x25c <__ashldi3+0xcc>
     20c:	20 2f       	mov	r18, r16
     20e:	33 27       	eor	r19, r19
     210:	27 fd       	sbrc	r18, 7
     212:	30 95       	com	r19
     214:	db 01       	movw	r26, r22
     216:	ca 01       	movw	r24, r20
     218:	02 2e       	mov	r0, r18
     21a:	04 c0       	rjmp	.+8      	; 0x224 <__ashldi3+0x94>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	aa 1f       	adc	r26, r26
     222:	bb 1f       	adc	r27, r27
     224:	0a 94       	dec	r0
     226:	d2 f7       	brpl	.-12     	; 0x21c <__ashldi3+0x8c>
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	9a 87       	std	Y+10, r25	; 0x0a
     22c:	ab 87       	std	Y+11, r26	; 0x0b
     22e:	bc 87       	std	Y+12, r27	; 0x0c
     230:	04 c0       	rjmp	.+8      	; 0x23a <__ashldi3+0xaa>
     232:	76 95       	lsr	r23
     234:	67 95       	ror	r22
     236:	57 95       	ror	r21
     238:	47 95       	ror	r20
     23a:	ea 95       	dec	r30
     23c:	d2 f7       	brpl	.-12     	; 0x232 <__ashldi3+0xa2>
     23e:	8d 81       	ldd	r24, Y+5	; 0x05
     240:	9e 81       	ldd	r25, Y+6	; 0x06
     242:	af 81       	ldd	r26, Y+7	; 0x07
     244:	b8 85       	ldd	r27, Y+8	; 0x08
     246:	04 c0       	rjmp	.+8      	; 0x250 <__ashldi3+0xc0>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	aa 1f       	adc	r26, r26
     24e:	bb 1f       	adc	r27, r27
     250:	2a 95       	dec	r18
     252:	d2 f7       	brpl	.-12     	; 0x248 <__ashldi3+0xb8>
     254:	48 2b       	or	r20, r24
     256:	59 2b       	or	r21, r25
     258:	6a 2b       	or	r22, r26
     25a:	7b 2b       	or	r23, r27
     25c:	4d 87       	std	Y+13, r20	; 0x0d
     25e:	5e 87       	std	Y+14, r21	; 0x0e
     260:	6f 87       	std	Y+15, r22	; 0x0f
     262:	78 8b       	std	Y+16, r23	; 0x10
     264:	29 85       	ldd	r18, Y+9	; 0x09
     266:	3a 85       	ldd	r19, Y+10	; 0x0a
     268:	4b 85       	ldd	r20, Y+11	; 0x0b
     26a:	5c 85       	ldd	r21, Y+12	; 0x0c
     26c:	6d 85       	ldd	r22, Y+13	; 0x0d
     26e:	7e 85       	ldd	r23, Y+14	; 0x0e
     270:	af 85       	ldd	r26, Y+15	; 0x0f
     272:	98 89       	ldd	r25, Y+16	; 0x10
     274:	8a 2f       	mov	r24, r26
     276:	60 96       	adiw	r28, 0x10	; 16
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	cf 91       	pop	r28
     284:	df 91       	pop	r29
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	08 95       	ret

0000028e <__fixunssfsi>:
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	7b 01       	movw	r14, r22
     298:	8c 01       	movw	r16, r24
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	5f e4       	ldi	r21, 0x4F	; 79
     2a2:	0e 94 a7 04 	call	0x94e	; 0x94e <__gesf2>
     2a6:	88 23       	and	r24, r24
     2a8:	8c f0       	brlt	.+34     	; 0x2cc <__fixunssfsi+0x3e>
     2aa:	c8 01       	movw	r24, r16
     2ac:	b7 01       	movw	r22, r14
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	5f e4       	ldi	r21, 0x4F	; 79
     2b6:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
     2ba:	0e 94 65 05 	call	0xaca	; 0xaca <__fixsfsi>
     2be:	9b 01       	movw	r18, r22
     2c0:	ac 01       	movw	r20, r24
     2c2:	20 50       	subi	r18, 0x00	; 0
     2c4:	30 40       	sbci	r19, 0x00	; 0
     2c6:	40 40       	sbci	r20, 0x00	; 0
     2c8:	50 48       	sbci	r21, 0x80	; 128
     2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <__fixunssfsi+0x4a>
     2cc:	c8 01       	movw	r24, r16
     2ce:	b7 01       	movw	r22, r14
     2d0:	0e 94 65 05 	call	0xaca	; 0xaca <__fixsfsi>
     2d4:	9b 01       	movw	r18, r22
     2d6:	ac 01       	movw	r20, r24
     2d8:	b9 01       	movw	r22, r18
     2da:	ca 01       	movw	r24, r20
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	08 95       	ret

000002e6 <_fpadd_parts>:
     2e6:	a0 e0       	ldi	r26, 0x00	; 0
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e9 e7       	ldi	r30, 0x79	; 121
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__prologue_saves__>
     2f2:	dc 01       	movw	r26, r24
     2f4:	2b 01       	movw	r4, r22
     2f6:	fa 01       	movw	r30, r20
     2f8:	9c 91       	ld	r25, X
     2fa:	92 30       	cpi	r25, 0x02	; 2
     2fc:	08 f4       	brcc	.+2      	; 0x300 <_fpadd_parts+0x1a>
     2fe:	39 c1       	rjmp	.+626    	; 0x572 <_fpadd_parts+0x28c>
     300:	eb 01       	movw	r28, r22
     302:	88 81       	ld	r24, Y
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	08 f4       	brcc	.+2      	; 0x30a <_fpadd_parts+0x24>
     308:	33 c1       	rjmp	.+614    	; 0x570 <_fpadd_parts+0x28a>
     30a:	94 30       	cpi	r25, 0x04	; 4
     30c:	69 f4       	brne	.+26     	; 0x328 <_fpadd_parts+0x42>
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	09 f0       	breq	.+2      	; 0x314 <_fpadd_parts+0x2e>
     312:	2f c1       	rjmp	.+606    	; 0x572 <_fpadd_parts+0x28c>
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	9c 91       	ld	r25, X
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	98 17       	cp	r25, r24
     31e:	09 f4       	brne	.+2      	; 0x322 <_fpadd_parts+0x3c>
     320:	28 c1       	rjmp	.+592    	; 0x572 <_fpadd_parts+0x28c>
     322:	a2 ef       	ldi	r26, 0xF2	; 242
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	25 c1       	rjmp	.+586    	; 0x572 <_fpadd_parts+0x28c>
     328:	84 30       	cpi	r24, 0x04	; 4
     32a:	09 f4       	brne	.+2      	; 0x32e <_fpadd_parts+0x48>
     32c:	21 c1       	rjmp	.+578    	; 0x570 <_fpadd_parts+0x28a>
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	a9 f4       	brne	.+42     	; 0x35c <_fpadd_parts+0x76>
     332:	92 30       	cpi	r25, 0x02	; 2
     334:	09 f0       	breq	.+2      	; 0x338 <_fpadd_parts+0x52>
     336:	1d c1       	rjmp	.+570    	; 0x572 <_fpadd_parts+0x28c>
     338:	9a 01       	movw	r18, r20
     33a:	ad 01       	movw	r20, r26
     33c:	88 e0       	ldi	r24, 0x08	; 8
     33e:	ea 01       	movw	r28, r20
     340:	09 90       	ld	r0, Y+
     342:	ae 01       	movw	r20, r28
     344:	e9 01       	movw	r28, r18
     346:	09 92       	st	Y+, r0
     348:	9e 01       	movw	r18, r28
     34a:	81 50       	subi	r24, 0x01	; 1
     34c:	c1 f7       	brne	.-16     	; 0x33e <_fpadd_parts+0x58>
     34e:	e2 01       	movw	r28, r4
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	11 96       	adiw	r26, 0x01	; 1
     354:	9c 91       	ld	r25, X
     356:	89 23       	and	r24, r25
     358:	81 83       	std	Z+1, r24	; 0x01
     35a:	08 c1       	rjmp	.+528    	; 0x56c <_fpadd_parts+0x286>
     35c:	92 30       	cpi	r25, 0x02	; 2
     35e:	09 f4       	brne	.+2      	; 0x362 <_fpadd_parts+0x7c>
     360:	07 c1       	rjmp	.+526    	; 0x570 <_fpadd_parts+0x28a>
     362:	12 96       	adiw	r26, 0x02	; 2
     364:	2d 90       	ld	r2, X+
     366:	3c 90       	ld	r3, X
     368:	13 97       	sbiw	r26, 0x03	; 3
     36a:	eb 01       	movw	r28, r22
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	9b 81       	ldd	r25, Y+3	; 0x03
     370:	14 96       	adiw	r26, 0x04	; 4
     372:	ad 90       	ld	r10, X+
     374:	bd 90       	ld	r11, X+
     376:	cd 90       	ld	r12, X+
     378:	dc 90       	ld	r13, X
     37a:	17 97       	sbiw	r26, 0x07	; 7
     37c:	ec 80       	ldd	r14, Y+4	; 0x04
     37e:	fd 80       	ldd	r15, Y+5	; 0x05
     380:	0e 81       	ldd	r16, Y+6	; 0x06
     382:	1f 81       	ldd	r17, Y+7	; 0x07
     384:	91 01       	movw	r18, r2
     386:	28 1b       	sub	r18, r24
     388:	39 0b       	sbc	r19, r25
     38a:	b9 01       	movw	r22, r18
     38c:	37 ff       	sbrs	r19, 7
     38e:	04 c0       	rjmp	.+8      	; 0x398 <_fpadd_parts+0xb2>
     390:	66 27       	eor	r22, r22
     392:	77 27       	eor	r23, r23
     394:	62 1b       	sub	r22, r18
     396:	73 0b       	sbc	r23, r19
     398:	60 32       	cpi	r22, 0x20	; 32
     39a:	71 05       	cpc	r23, r1
     39c:	0c f0       	brlt	.+2      	; 0x3a0 <_fpadd_parts+0xba>
     39e:	61 c0       	rjmp	.+194    	; 0x462 <_fpadd_parts+0x17c>
     3a0:	12 16       	cp	r1, r18
     3a2:	13 06       	cpc	r1, r19
     3a4:	6c f5       	brge	.+90     	; 0x400 <_fpadd_parts+0x11a>
     3a6:	37 01       	movw	r6, r14
     3a8:	48 01       	movw	r8, r16
     3aa:	06 2e       	mov	r0, r22
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <_fpadd_parts+0xd0>
     3ae:	96 94       	lsr	r9
     3b0:	87 94       	ror	r8
     3b2:	77 94       	ror	r7
     3b4:	67 94       	ror	r6
     3b6:	0a 94       	dec	r0
     3b8:	d2 f7       	brpl	.-12     	; 0x3ae <_fpadd_parts+0xc8>
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	04 c0       	rjmp	.+8      	; 0x3cc <_fpadd_parts+0xe6>
     3c4:	22 0f       	add	r18, r18
     3c6:	33 1f       	adc	r19, r19
     3c8:	44 1f       	adc	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	6a 95       	dec	r22
     3ce:	d2 f7       	brpl	.-12     	; 0x3c4 <_fpadd_parts+0xde>
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	30 40       	sbci	r19, 0x00	; 0
     3d4:	40 40       	sbci	r20, 0x00	; 0
     3d6:	50 40       	sbci	r21, 0x00	; 0
     3d8:	2e 21       	and	r18, r14
     3da:	3f 21       	and	r19, r15
     3dc:	40 23       	and	r20, r16
     3de:	51 23       	and	r21, r17
     3e0:	21 15       	cp	r18, r1
     3e2:	31 05       	cpc	r19, r1
     3e4:	41 05       	cpc	r20, r1
     3e6:	51 05       	cpc	r21, r1
     3e8:	21 f0       	breq	.+8      	; 0x3f2 <_fpadd_parts+0x10c>
     3ea:	21 e0       	ldi	r18, 0x01	; 1
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	79 01       	movw	r14, r18
     3f4:	8a 01       	movw	r16, r20
     3f6:	e6 28       	or	r14, r6
     3f8:	f7 28       	or	r15, r7
     3fa:	08 29       	or	r16, r8
     3fc:	19 29       	or	r17, r9
     3fe:	3c c0       	rjmp	.+120    	; 0x478 <_fpadd_parts+0x192>
     400:	23 2b       	or	r18, r19
     402:	d1 f1       	breq	.+116    	; 0x478 <_fpadd_parts+0x192>
     404:	26 0e       	add	r2, r22
     406:	37 1e       	adc	r3, r23
     408:	35 01       	movw	r6, r10
     40a:	46 01       	movw	r8, r12
     40c:	06 2e       	mov	r0, r22
     40e:	04 c0       	rjmp	.+8      	; 0x418 <_fpadd_parts+0x132>
     410:	96 94       	lsr	r9
     412:	87 94       	ror	r8
     414:	77 94       	ror	r7
     416:	67 94       	ror	r6
     418:	0a 94       	dec	r0
     41a:	d2 f7       	brpl	.-12     	; 0x410 <_fpadd_parts+0x12a>
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	04 c0       	rjmp	.+8      	; 0x42e <_fpadd_parts+0x148>
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	44 1f       	adc	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	6a 95       	dec	r22
     430:	d2 f7       	brpl	.-12     	; 0x426 <_fpadd_parts+0x140>
     432:	21 50       	subi	r18, 0x01	; 1
     434:	30 40       	sbci	r19, 0x00	; 0
     436:	40 40       	sbci	r20, 0x00	; 0
     438:	50 40       	sbci	r21, 0x00	; 0
     43a:	2a 21       	and	r18, r10
     43c:	3b 21       	and	r19, r11
     43e:	4c 21       	and	r20, r12
     440:	5d 21       	and	r21, r13
     442:	21 15       	cp	r18, r1
     444:	31 05       	cpc	r19, r1
     446:	41 05       	cpc	r20, r1
     448:	51 05       	cpc	r21, r1
     44a:	21 f0       	breq	.+8      	; 0x454 <_fpadd_parts+0x16e>
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	59 01       	movw	r10, r18
     456:	6a 01       	movw	r12, r20
     458:	a6 28       	or	r10, r6
     45a:	b7 28       	or	r11, r7
     45c:	c8 28       	or	r12, r8
     45e:	d9 28       	or	r13, r9
     460:	0b c0       	rjmp	.+22     	; 0x478 <_fpadd_parts+0x192>
     462:	82 15       	cp	r24, r2
     464:	93 05       	cpc	r25, r3
     466:	2c f0       	brlt	.+10     	; 0x472 <_fpadd_parts+0x18c>
     468:	1c 01       	movw	r2, r24
     46a:	aa 24       	eor	r10, r10
     46c:	bb 24       	eor	r11, r11
     46e:	65 01       	movw	r12, r10
     470:	03 c0       	rjmp	.+6      	; 0x478 <_fpadd_parts+0x192>
     472:	ee 24       	eor	r14, r14
     474:	ff 24       	eor	r15, r15
     476:	87 01       	movw	r16, r14
     478:	11 96       	adiw	r26, 0x01	; 1
     47a:	9c 91       	ld	r25, X
     47c:	d2 01       	movw	r26, r4
     47e:	11 96       	adiw	r26, 0x01	; 1
     480:	8c 91       	ld	r24, X
     482:	98 17       	cp	r25, r24
     484:	09 f4       	brne	.+2      	; 0x488 <_fpadd_parts+0x1a2>
     486:	45 c0       	rjmp	.+138    	; 0x512 <_fpadd_parts+0x22c>
     488:	99 23       	and	r25, r25
     48a:	39 f0       	breq	.+14     	; 0x49a <_fpadd_parts+0x1b4>
     48c:	a8 01       	movw	r20, r16
     48e:	97 01       	movw	r18, r14
     490:	2a 19       	sub	r18, r10
     492:	3b 09       	sbc	r19, r11
     494:	4c 09       	sbc	r20, r12
     496:	5d 09       	sbc	r21, r13
     498:	06 c0       	rjmp	.+12     	; 0x4a6 <_fpadd_parts+0x1c0>
     49a:	a6 01       	movw	r20, r12
     49c:	95 01       	movw	r18, r10
     49e:	2e 19       	sub	r18, r14
     4a0:	3f 09       	sbc	r19, r15
     4a2:	40 0b       	sbc	r20, r16
     4a4:	51 0b       	sbc	r21, r17
     4a6:	57 fd       	sbrc	r21, 7
     4a8:	08 c0       	rjmp	.+16     	; 0x4ba <_fpadd_parts+0x1d4>
     4aa:	11 82       	std	Z+1, r1	; 0x01
     4ac:	33 82       	std	Z+3, r3	; 0x03
     4ae:	22 82       	std	Z+2, r2	; 0x02
     4b0:	24 83       	std	Z+4, r18	; 0x04
     4b2:	35 83       	std	Z+5, r19	; 0x05
     4b4:	46 83       	std	Z+6, r20	; 0x06
     4b6:	57 83       	std	Z+7, r21	; 0x07
     4b8:	1d c0       	rjmp	.+58     	; 0x4f4 <_fpadd_parts+0x20e>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	81 83       	std	Z+1, r24	; 0x01
     4be:	33 82       	std	Z+3, r3	; 0x03
     4c0:	22 82       	std	Z+2, r2	; 0x02
     4c2:	88 27       	eor	r24, r24
     4c4:	99 27       	eor	r25, r25
     4c6:	dc 01       	movw	r26, r24
     4c8:	82 1b       	sub	r24, r18
     4ca:	93 0b       	sbc	r25, r19
     4cc:	a4 0b       	sbc	r26, r20
     4ce:	b5 0b       	sbc	r27, r21
     4d0:	84 83       	std	Z+4, r24	; 0x04
     4d2:	95 83       	std	Z+5, r25	; 0x05
     4d4:	a6 83       	std	Z+6, r26	; 0x06
     4d6:	b7 83       	std	Z+7, r27	; 0x07
     4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <_fpadd_parts+0x20e>
     4da:	22 0f       	add	r18, r18
     4dc:	33 1f       	adc	r19, r19
     4de:	44 1f       	adc	r20, r20
     4e0:	55 1f       	adc	r21, r21
     4e2:	24 83       	std	Z+4, r18	; 0x04
     4e4:	35 83       	std	Z+5, r19	; 0x05
     4e6:	46 83       	std	Z+6, r20	; 0x06
     4e8:	57 83       	std	Z+7, r21	; 0x07
     4ea:	82 81       	ldd	r24, Z+2	; 0x02
     4ec:	93 81       	ldd	r25, Z+3	; 0x03
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	93 83       	std	Z+3, r25	; 0x03
     4f2:	82 83       	std	Z+2, r24	; 0x02
     4f4:	24 81       	ldd	r18, Z+4	; 0x04
     4f6:	35 81       	ldd	r19, Z+5	; 0x05
     4f8:	46 81       	ldd	r20, Z+6	; 0x06
     4fa:	57 81       	ldd	r21, Z+7	; 0x07
     4fc:	da 01       	movw	r26, r20
     4fe:	c9 01       	movw	r24, r18
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	a1 09       	sbc	r26, r1
     504:	b1 09       	sbc	r27, r1
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	9f 4f       	sbci	r25, 0xFF	; 255
     50a:	af 4f       	sbci	r26, 0xFF	; 255
     50c:	bf 43       	sbci	r27, 0x3F	; 63
     50e:	28 f3       	brcs	.-54     	; 0x4da <_fpadd_parts+0x1f4>
     510:	0b c0       	rjmp	.+22     	; 0x528 <_fpadd_parts+0x242>
     512:	91 83       	std	Z+1, r25	; 0x01
     514:	33 82       	std	Z+3, r3	; 0x03
     516:	22 82       	std	Z+2, r2	; 0x02
     518:	ea 0c       	add	r14, r10
     51a:	fb 1c       	adc	r15, r11
     51c:	0c 1d       	adc	r16, r12
     51e:	1d 1d       	adc	r17, r13
     520:	e4 82       	std	Z+4, r14	; 0x04
     522:	f5 82       	std	Z+5, r15	; 0x05
     524:	06 83       	std	Z+6, r16	; 0x06
     526:	17 83       	std	Z+7, r17	; 0x07
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	80 83       	st	Z, r24
     52c:	24 81       	ldd	r18, Z+4	; 0x04
     52e:	35 81       	ldd	r19, Z+5	; 0x05
     530:	46 81       	ldd	r20, Z+6	; 0x06
     532:	57 81       	ldd	r21, Z+7	; 0x07
     534:	57 ff       	sbrs	r21, 7
     536:	1a c0       	rjmp	.+52     	; 0x56c <_fpadd_parts+0x286>
     538:	c9 01       	movw	r24, r18
     53a:	aa 27       	eor	r26, r26
     53c:	97 fd       	sbrc	r25, 7
     53e:	a0 95       	com	r26
     540:	ba 2f       	mov	r27, r26
     542:	81 70       	andi	r24, 0x01	; 1
     544:	90 70       	andi	r25, 0x00	; 0
     546:	a0 70       	andi	r26, 0x00	; 0
     548:	b0 70       	andi	r27, 0x00	; 0
     54a:	56 95       	lsr	r21
     54c:	47 95       	ror	r20
     54e:	37 95       	ror	r19
     550:	27 95       	ror	r18
     552:	82 2b       	or	r24, r18
     554:	93 2b       	or	r25, r19
     556:	a4 2b       	or	r26, r20
     558:	b5 2b       	or	r27, r21
     55a:	84 83       	std	Z+4, r24	; 0x04
     55c:	95 83       	std	Z+5, r25	; 0x05
     55e:	a6 83       	std	Z+6, r26	; 0x06
     560:	b7 83       	std	Z+7, r27	; 0x07
     562:	82 81       	ldd	r24, Z+2	; 0x02
     564:	93 81       	ldd	r25, Z+3	; 0x03
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	93 83       	std	Z+3, r25	; 0x03
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	df 01       	movw	r26, r30
     56e:	01 c0       	rjmp	.+2      	; 0x572 <_fpadd_parts+0x28c>
     570:	d2 01       	movw	r26, r4
     572:	cd 01       	movw	r24, r26
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	e2 e1       	ldi	r30, 0x12	; 18
     57a:	0c 94 d9 22 	jmp	0x45b2	; 0x45b2 <__epilogue_restores__>

0000057e <__subsf3>:
     57e:	a0 e2       	ldi	r26, 0x20	; 32
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	e5 ec       	ldi	r30, 0xC5	; 197
     584:	f2 e0       	ldi	r31, 0x02	; 2
     586:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__prologue_saves__+0x18>
     58a:	69 83       	std	Y+1, r22	; 0x01
     58c:	7a 83       	std	Y+2, r23	; 0x02
     58e:	8b 83       	std	Y+3, r24	; 0x03
     590:	9c 83       	std	Y+4, r25	; 0x04
     592:	2d 83       	std	Y+5, r18	; 0x05
     594:	3e 83       	std	Y+6, r19	; 0x06
     596:	4f 83       	std	Y+7, r20	; 0x07
     598:	58 87       	std	Y+8, r21	; 0x08
     59a:	e9 e0       	ldi	r30, 0x09	; 9
     59c:	ee 2e       	mov	r14, r30
     59e:	f1 2c       	mov	r15, r1
     5a0:	ec 0e       	add	r14, r28
     5a2:	fd 1e       	adc	r15, r29
     5a4:	ce 01       	movw	r24, r28
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	b7 01       	movw	r22, r14
     5aa:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     5ae:	8e 01       	movw	r16, r28
     5b0:	0f 5e       	subi	r16, 0xEF	; 239
     5b2:	1f 4f       	sbci	r17, 0xFF	; 255
     5b4:	ce 01       	movw	r24, r28
     5b6:	05 96       	adiw	r24, 0x05	; 5
     5b8:	b8 01       	movw	r22, r16
     5ba:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     5be:	8a 89       	ldd	r24, Y+18	; 0x12
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	89 27       	eor	r24, r25
     5c4:	8a 8b       	std	Y+18, r24	; 0x12
     5c6:	c7 01       	movw	r24, r14
     5c8:	b8 01       	movw	r22, r16
     5ca:	ae 01       	movw	r20, r28
     5cc:	47 5e       	subi	r20, 0xE7	; 231
     5ce:	5f 4f       	sbci	r21, 0xFF	; 255
     5d0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_fpadd_parts>
     5d4:	0e 94 08 06 	call	0xc10	; 0xc10 <__pack_f>
     5d8:	a0 96       	adiw	r28, 0x20	; 32
     5da:	e6 e0       	ldi	r30, 0x06	; 6
     5dc:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__epilogue_restores__+0x18>

000005e0 <__addsf3>:
     5e0:	a0 e2       	ldi	r26, 0x20	; 32
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	e6 ef       	ldi	r30, 0xF6	; 246
     5e6:	f2 e0       	ldi	r31, 0x02	; 2
     5e8:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__prologue_saves__+0x18>
     5ec:	69 83       	std	Y+1, r22	; 0x01
     5ee:	7a 83       	std	Y+2, r23	; 0x02
     5f0:	8b 83       	std	Y+3, r24	; 0x03
     5f2:	9c 83       	std	Y+4, r25	; 0x04
     5f4:	2d 83       	std	Y+5, r18	; 0x05
     5f6:	3e 83       	std	Y+6, r19	; 0x06
     5f8:	4f 83       	std	Y+7, r20	; 0x07
     5fa:	58 87       	std	Y+8, r21	; 0x08
     5fc:	f9 e0       	ldi	r31, 0x09	; 9
     5fe:	ef 2e       	mov	r14, r31
     600:	f1 2c       	mov	r15, r1
     602:	ec 0e       	add	r14, r28
     604:	fd 1e       	adc	r15, r29
     606:	ce 01       	movw	r24, r28
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	b7 01       	movw	r22, r14
     60c:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     610:	8e 01       	movw	r16, r28
     612:	0f 5e       	subi	r16, 0xEF	; 239
     614:	1f 4f       	sbci	r17, 0xFF	; 255
     616:	ce 01       	movw	r24, r28
     618:	05 96       	adiw	r24, 0x05	; 5
     61a:	b8 01       	movw	r22, r16
     61c:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     620:	c7 01       	movw	r24, r14
     622:	b8 01       	movw	r22, r16
     624:	ae 01       	movw	r20, r28
     626:	47 5e       	subi	r20, 0xE7	; 231
     628:	5f 4f       	sbci	r21, 0xFF	; 255
     62a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_fpadd_parts>
     62e:	0e 94 08 06 	call	0xc10	; 0xc10 <__pack_f>
     632:	a0 96       	adiw	r28, 0x20	; 32
     634:	e6 e0       	ldi	r30, 0x06	; 6
     636:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__epilogue_restores__+0x18>

0000063a <__mulsf3>:
     63a:	a0 e2       	ldi	r26, 0x20	; 32
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	e3 e2       	ldi	r30, 0x23	; 35
     640:	f3 e0       	ldi	r31, 0x03	; 3
     642:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__prologue_saves__>
     646:	69 83       	std	Y+1, r22	; 0x01
     648:	7a 83       	std	Y+2, r23	; 0x02
     64a:	8b 83       	std	Y+3, r24	; 0x03
     64c:	9c 83       	std	Y+4, r25	; 0x04
     64e:	2d 83       	std	Y+5, r18	; 0x05
     650:	3e 83       	std	Y+6, r19	; 0x06
     652:	4f 83       	std	Y+7, r20	; 0x07
     654:	58 87       	std	Y+8, r21	; 0x08
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	be 01       	movw	r22, r28
     65c:	67 5f       	subi	r22, 0xF7	; 247
     65e:	7f 4f       	sbci	r23, 0xFF	; 255
     660:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     664:	ce 01       	movw	r24, r28
     666:	05 96       	adiw	r24, 0x05	; 5
     668:	be 01       	movw	r22, r28
     66a:	6f 5e       	subi	r22, 0xEF	; 239
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     672:	99 85       	ldd	r25, Y+9	; 0x09
     674:	92 30       	cpi	r25, 0x02	; 2
     676:	88 f0       	brcs	.+34     	; 0x69a <__mulsf3+0x60>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	c8 f0       	brcs	.+50     	; 0x6b0 <__mulsf3+0x76>
     67e:	94 30       	cpi	r25, 0x04	; 4
     680:	19 f4       	brne	.+6      	; 0x688 <__mulsf3+0x4e>
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	51 f4       	brne	.+20     	; 0x69a <__mulsf3+0x60>
     686:	04 c0       	rjmp	.+8      	; 0x690 <__mulsf3+0x56>
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	29 f4       	brne	.+10     	; 0x696 <__mulsf3+0x5c>
     68c:	92 30       	cpi	r25, 0x02	; 2
     68e:	81 f4       	brne	.+32     	; 0x6b0 <__mulsf3+0x76>
     690:	82 ef       	ldi	r24, 0xF2	; 242
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	c6 c0       	rjmp	.+396    	; 0x822 <__mulsf3+0x1e8>
     696:	92 30       	cpi	r25, 0x02	; 2
     698:	49 f4       	brne	.+18     	; 0x6ac <__mulsf3+0x72>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	9a 85       	ldd	r25, Y+10	; 0x0a
     69e:	8a 89       	ldd	r24, Y+18	; 0x12
     6a0:	98 13       	cpse	r25, r24
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	2a 87       	std	Y+10, r18	; 0x0a
     6a6:	ce 01       	movw	r24, r28
     6a8:	09 96       	adiw	r24, 0x09	; 9
     6aa:	bb c0       	rjmp	.+374    	; 0x822 <__mulsf3+0x1e8>
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	49 f4       	brne	.+18     	; 0x6c2 <__mulsf3+0x88>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b4:	8a 89       	ldd	r24, Y+18	; 0x12
     6b6:	98 13       	cpse	r25, r24
     6b8:	21 e0       	ldi	r18, 0x01	; 1
     6ba:	2a 8b       	std	Y+18, r18	; 0x12
     6bc:	ce 01       	movw	r24, r28
     6be:	41 96       	adiw	r24, 0x11	; 17
     6c0:	b0 c0       	rjmp	.+352    	; 0x822 <__mulsf3+0x1e8>
     6c2:	2d 84       	ldd	r2, Y+13	; 0x0d
     6c4:	3e 84       	ldd	r3, Y+14	; 0x0e
     6c6:	4f 84       	ldd	r4, Y+15	; 0x0f
     6c8:	58 88       	ldd	r5, Y+16	; 0x10
     6ca:	6d 88       	ldd	r6, Y+21	; 0x15
     6cc:	7e 88       	ldd	r7, Y+22	; 0x16
     6ce:	8f 88       	ldd	r8, Y+23	; 0x17
     6d0:	98 8c       	ldd	r9, Y+24	; 0x18
     6d2:	ee 24       	eor	r14, r14
     6d4:	ff 24       	eor	r15, r15
     6d6:	87 01       	movw	r16, r14
     6d8:	aa 24       	eor	r10, r10
     6da:	bb 24       	eor	r11, r11
     6dc:	65 01       	movw	r12, r10
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	e0 e0       	ldi	r30, 0x00	; 0
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	c1 01       	movw	r24, r2
     6ec:	81 70       	andi	r24, 0x01	; 1
     6ee:	90 70       	andi	r25, 0x00	; 0
     6f0:	89 2b       	or	r24, r25
     6f2:	e9 f0       	breq	.+58     	; 0x72e <__mulsf3+0xf4>
     6f4:	e6 0c       	add	r14, r6
     6f6:	f7 1c       	adc	r15, r7
     6f8:	08 1d       	adc	r16, r8
     6fa:	19 1d       	adc	r17, r9
     6fc:	9a 01       	movw	r18, r20
     6fe:	ab 01       	movw	r20, r22
     700:	2a 0d       	add	r18, r10
     702:	3b 1d       	adc	r19, r11
     704:	4c 1d       	adc	r20, r12
     706:	5d 1d       	adc	r21, r13
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	e6 14       	cp	r14, r6
     712:	f7 04       	cpc	r15, r7
     714:	08 05       	cpc	r16, r8
     716:	19 05       	cpc	r17, r9
     718:	20 f4       	brcc	.+8      	; 0x722 <__mulsf3+0xe8>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	ba 01       	movw	r22, r20
     724:	a9 01       	movw	r20, r18
     726:	48 0f       	add	r20, r24
     728:	59 1f       	adc	r21, r25
     72a:	6a 1f       	adc	r22, r26
     72c:	7b 1f       	adc	r23, r27
     72e:	aa 0c       	add	r10, r10
     730:	bb 1c       	adc	r11, r11
     732:	cc 1c       	adc	r12, r12
     734:	dd 1c       	adc	r13, r13
     736:	97 fe       	sbrs	r9, 7
     738:	08 c0       	rjmp	.+16     	; 0x74a <__mulsf3+0x110>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	a0 e0       	ldi	r26, 0x00	; 0
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	a8 2a       	or	r10, r24
     744:	b9 2a       	or	r11, r25
     746:	ca 2a       	or	r12, r26
     748:	db 2a       	or	r13, r27
     74a:	31 96       	adiw	r30, 0x01	; 1
     74c:	e0 32       	cpi	r30, 0x20	; 32
     74e:	f1 05       	cpc	r31, r1
     750:	49 f0       	breq	.+18     	; 0x764 <__mulsf3+0x12a>
     752:	66 0c       	add	r6, r6
     754:	77 1c       	adc	r7, r7
     756:	88 1c       	adc	r8, r8
     758:	99 1c       	adc	r9, r9
     75a:	56 94       	lsr	r5
     75c:	47 94       	ror	r4
     75e:	37 94       	ror	r3
     760:	27 94       	ror	r2
     762:	c3 cf       	rjmp	.-122    	; 0x6ea <__mulsf3+0xb0>
     764:	fa 85       	ldd	r31, Y+10	; 0x0a
     766:	ea 89       	ldd	r30, Y+18	; 0x12
     768:	2b 89       	ldd	r18, Y+19	; 0x13
     76a:	3c 89       	ldd	r19, Y+20	; 0x14
     76c:	8b 85       	ldd	r24, Y+11	; 0x0b
     76e:	9c 85       	ldd	r25, Y+12	; 0x0c
     770:	28 0f       	add	r18, r24
     772:	39 1f       	adc	r19, r25
     774:	2e 5f       	subi	r18, 0xFE	; 254
     776:	3f 4f       	sbci	r19, 0xFF	; 255
     778:	17 c0       	rjmp	.+46     	; 0x7a8 <__mulsf3+0x16e>
     77a:	ca 01       	movw	r24, r20
     77c:	81 70       	andi	r24, 0x01	; 1
     77e:	90 70       	andi	r25, 0x00	; 0
     780:	89 2b       	or	r24, r25
     782:	61 f0       	breq	.+24     	; 0x79c <__mulsf3+0x162>
     784:	16 95       	lsr	r17
     786:	07 95       	ror	r16
     788:	f7 94       	ror	r15
     78a:	e7 94       	ror	r14
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	a0 e0       	ldi	r26, 0x00	; 0
     792:	b0 e8       	ldi	r27, 0x80	; 128
     794:	e8 2a       	or	r14, r24
     796:	f9 2a       	or	r15, r25
     798:	0a 2b       	or	r16, r26
     79a:	1b 2b       	or	r17, r27
     79c:	76 95       	lsr	r23
     79e:	67 95       	ror	r22
     7a0:	57 95       	ror	r21
     7a2:	47 95       	ror	r20
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	77 fd       	sbrc	r23, 7
     7aa:	e7 cf       	rjmp	.-50     	; 0x77a <__mulsf3+0x140>
     7ac:	0c c0       	rjmp	.+24     	; 0x7c6 <__mulsf3+0x18c>
     7ae:	44 0f       	add	r20, r20
     7b0:	55 1f       	adc	r21, r21
     7b2:	66 1f       	adc	r22, r22
     7b4:	77 1f       	adc	r23, r23
     7b6:	17 fd       	sbrc	r17, 7
     7b8:	41 60       	ori	r20, 0x01	; 1
     7ba:	ee 0c       	add	r14, r14
     7bc:	ff 1c       	adc	r15, r15
     7be:	00 1f       	adc	r16, r16
     7c0:	11 1f       	adc	r17, r17
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	30 40       	sbci	r19, 0x00	; 0
     7c6:	40 30       	cpi	r20, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	59 07       	cpc	r21, r25
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	69 07       	cpc	r22, r25
     7d0:	90 e4       	ldi	r25, 0x40	; 64
     7d2:	79 07       	cpc	r23, r25
     7d4:	60 f3       	brcs	.-40     	; 0x7ae <__mulsf3+0x174>
     7d6:	2b 8f       	std	Y+27, r18	; 0x1b
     7d8:	3c 8f       	std	Y+28, r19	; 0x1c
     7da:	db 01       	movw	r26, r22
     7dc:	ca 01       	movw	r24, r20
     7de:	8f 77       	andi	r24, 0x7F	; 127
     7e0:	90 70       	andi	r25, 0x00	; 0
     7e2:	a0 70       	andi	r26, 0x00	; 0
     7e4:	b0 70       	andi	r27, 0x00	; 0
     7e6:	80 34       	cpi	r24, 0x40	; 64
     7e8:	91 05       	cpc	r25, r1
     7ea:	a1 05       	cpc	r26, r1
     7ec:	b1 05       	cpc	r27, r1
     7ee:	61 f4       	brne	.+24     	; 0x808 <__mulsf3+0x1ce>
     7f0:	47 fd       	sbrc	r20, 7
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <__mulsf3+0x1ce>
     7f4:	e1 14       	cp	r14, r1
     7f6:	f1 04       	cpc	r15, r1
     7f8:	01 05       	cpc	r16, r1
     7fa:	11 05       	cpc	r17, r1
     7fc:	29 f0       	breq	.+10     	; 0x808 <__mulsf3+0x1ce>
     7fe:	40 5c       	subi	r20, 0xC0	; 192
     800:	5f 4f       	sbci	r21, 0xFF	; 255
     802:	6f 4f       	sbci	r22, 0xFF	; 255
     804:	7f 4f       	sbci	r23, 0xFF	; 255
     806:	40 78       	andi	r20, 0x80	; 128
     808:	1a 8e       	std	Y+26, r1	; 0x1a
     80a:	fe 17       	cp	r31, r30
     80c:	11 f0       	breq	.+4      	; 0x812 <__mulsf3+0x1d8>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	8a 8f       	std	Y+26, r24	; 0x1a
     812:	4d 8f       	std	Y+29, r20	; 0x1d
     814:	5e 8f       	std	Y+30, r21	; 0x1e
     816:	6f 8f       	std	Y+31, r22	; 0x1f
     818:	78 a3       	std	Y+32, r23	; 0x20
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 8f       	std	Y+25, r24	; 0x19
     81e:	ce 01       	movw	r24, r28
     820:	49 96       	adiw	r24, 0x19	; 25
     822:	0e 94 08 06 	call	0xc10	; 0xc10 <__pack_f>
     826:	a0 96       	adiw	r28, 0x20	; 32
     828:	e2 e1       	ldi	r30, 0x12	; 18
     82a:	0c 94 d9 22 	jmp	0x45b2	; 0x45b2 <__epilogue_restores__>

0000082e <__eqsf2>:
     82e:	a8 e1       	ldi	r26, 0x18	; 24
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	ed e1       	ldi	r30, 0x1D	; 29
     834:	f4 e0       	ldi	r31, 0x04	; 4
     836:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__prologue_saves__+0x18>
     83a:	69 83       	std	Y+1, r22	; 0x01
     83c:	7a 83       	std	Y+2, r23	; 0x02
     83e:	8b 83       	std	Y+3, r24	; 0x03
     840:	9c 83       	std	Y+4, r25	; 0x04
     842:	2d 83       	std	Y+5, r18	; 0x05
     844:	3e 83       	std	Y+6, r19	; 0x06
     846:	4f 83       	std	Y+7, r20	; 0x07
     848:	58 87       	std	Y+8, r21	; 0x08
     84a:	89 e0       	ldi	r24, 0x09	; 9
     84c:	e8 2e       	mov	r14, r24
     84e:	f1 2c       	mov	r15, r1
     850:	ec 0e       	add	r14, r28
     852:	fd 1e       	adc	r15, r29
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	b7 01       	movw	r22, r14
     85a:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     85e:	8e 01       	movw	r16, r28
     860:	0f 5e       	subi	r16, 0xEF	; 239
     862:	1f 4f       	sbci	r17, 0xFF	; 255
     864:	ce 01       	movw	r24, r28
     866:	05 96       	adiw	r24, 0x05	; 5
     868:	b8 01       	movw	r22, r16
     86a:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     86e:	89 85       	ldd	r24, Y+9	; 0x09
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	40 f0       	brcs	.+16     	; 0x884 <__stack+0x25>
     874:	89 89       	ldd	r24, Y+17	; 0x11
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	28 f0       	brcs	.+10     	; 0x884 <__stack+0x25>
     87a:	c7 01       	movw	r24, r14
     87c:	b8 01       	movw	r22, r16
     87e:	0e 94 55 07 	call	0xeaa	; 0xeaa <__fpcmp_parts_f>
     882:	01 c0       	rjmp	.+2      	; 0x886 <__stack+0x27>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	68 96       	adiw	r28, 0x18	; 24
     888:	e6 e0       	ldi	r30, 0x06	; 6
     88a:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__epilogue_restores__+0x18>

0000088e <__nesf2>:
     88e:	a8 e1       	ldi	r26, 0x18	; 24
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	ed e4       	ldi	r30, 0x4D	; 77
     894:	f4 e0       	ldi	r31, 0x04	; 4
     896:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__prologue_saves__+0x18>
     89a:	69 83       	std	Y+1, r22	; 0x01
     89c:	7a 83       	std	Y+2, r23	; 0x02
     89e:	8b 83       	std	Y+3, r24	; 0x03
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	2d 83       	std	Y+5, r18	; 0x05
     8a4:	3e 83       	std	Y+6, r19	; 0x06
     8a6:	4f 83       	std	Y+7, r20	; 0x07
     8a8:	58 87       	std	Y+8, r21	; 0x08
     8aa:	89 e0       	ldi	r24, 0x09	; 9
     8ac:	e8 2e       	mov	r14, r24
     8ae:	f1 2c       	mov	r15, r1
     8b0:	ec 0e       	add	r14, r28
     8b2:	fd 1e       	adc	r15, r29
     8b4:	ce 01       	movw	r24, r28
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	b7 01       	movw	r22, r14
     8ba:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     8be:	8e 01       	movw	r16, r28
     8c0:	0f 5e       	subi	r16, 0xEF	; 239
     8c2:	1f 4f       	sbci	r17, 0xFF	; 255
     8c4:	ce 01       	movw	r24, r28
     8c6:	05 96       	adiw	r24, 0x05	; 5
     8c8:	b8 01       	movw	r22, r16
     8ca:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     8ce:	89 85       	ldd	r24, Y+9	; 0x09
     8d0:	82 30       	cpi	r24, 0x02	; 2
     8d2:	40 f0       	brcs	.+16     	; 0x8e4 <__nesf2+0x56>
     8d4:	89 89       	ldd	r24, Y+17	; 0x11
     8d6:	82 30       	cpi	r24, 0x02	; 2
     8d8:	28 f0       	brcs	.+10     	; 0x8e4 <__nesf2+0x56>
     8da:	c7 01       	movw	r24, r14
     8dc:	b8 01       	movw	r22, r16
     8de:	0e 94 55 07 	call	0xeaa	; 0xeaa <__fpcmp_parts_f>
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <__nesf2+0x58>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	68 96       	adiw	r28, 0x18	; 24
     8e8:	e6 e0       	ldi	r30, 0x06	; 6
     8ea:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__epilogue_restores__+0x18>

000008ee <__gtsf2>:
     8ee:	a8 e1       	ldi	r26, 0x18	; 24
     8f0:	b0 e0       	ldi	r27, 0x00	; 0
     8f2:	ed e7       	ldi	r30, 0x7D	; 125
     8f4:	f4 e0       	ldi	r31, 0x04	; 4
     8f6:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__prologue_saves__+0x18>
     8fa:	69 83       	std	Y+1, r22	; 0x01
     8fc:	7a 83       	std	Y+2, r23	; 0x02
     8fe:	8b 83       	std	Y+3, r24	; 0x03
     900:	9c 83       	std	Y+4, r25	; 0x04
     902:	2d 83       	std	Y+5, r18	; 0x05
     904:	3e 83       	std	Y+6, r19	; 0x06
     906:	4f 83       	std	Y+7, r20	; 0x07
     908:	58 87       	std	Y+8, r21	; 0x08
     90a:	89 e0       	ldi	r24, 0x09	; 9
     90c:	e8 2e       	mov	r14, r24
     90e:	f1 2c       	mov	r15, r1
     910:	ec 0e       	add	r14, r28
     912:	fd 1e       	adc	r15, r29
     914:	ce 01       	movw	r24, r28
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	b7 01       	movw	r22, r14
     91a:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     91e:	8e 01       	movw	r16, r28
     920:	0f 5e       	subi	r16, 0xEF	; 239
     922:	1f 4f       	sbci	r17, 0xFF	; 255
     924:	ce 01       	movw	r24, r28
     926:	05 96       	adiw	r24, 0x05	; 5
     928:	b8 01       	movw	r22, r16
     92a:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     92e:	89 85       	ldd	r24, Y+9	; 0x09
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	40 f0       	brcs	.+16     	; 0x944 <__gtsf2+0x56>
     934:	89 89       	ldd	r24, Y+17	; 0x11
     936:	82 30       	cpi	r24, 0x02	; 2
     938:	28 f0       	brcs	.+10     	; 0x944 <__gtsf2+0x56>
     93a:	c7 01       	movw	r24, r14
     93c:	b8 01       	movw	r22, r16
     93e:	0e 94 55 07 	call	0xeaa	; 0xeaa <__fpcmp_parts_f>
     942:	01 c0       	rjmp	.+2      	; 0x946 <__gtsf2+0x58>
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	68 96       	adiw	r28, 0x18	; 24
     948:	e6 e0       	ldi	r30, 0x06	; 6
     94a:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__epilogue_restores__+0x18>

0000094e <__gesf2>:
     94e:	a8 e1       	ldi	r26, 0x18	; 24
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	ed ea       	ldi	r30, 0xAD	; 173
     954:	f4 e0       	ldi	r31, 0x04	; 4
     956:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__prologue_saves__+0x18>
     95a:	69 83       	std	Y+1, r22	; 0x01
     95c:	7a 83       	std	Y+2, r23	; 0x02
     95e:	8b 83       	std	Y+3, r24	; 0x03
     960:	9c 83       	std	Y+4, r25	; 0x04
     962:	2d 83       	std	Y+5, r18	; 0x05
     964:	3e 83       	std	Y+6, r19	; 0x06
     966:	4f 83       	std	Y+7, r20	; 0x07
     968:	58 87       	std	Y+8, r21	; 0x08
     96a:	89 e0       	ldi	r24, 0x09	; 9
     96c:	e8 2e       	mov	r14, r24
     96e:	f1 2c       	mov	r15, r1
     970:	ec 0e       	add	r14, r28
     972:	fd 1e       	adc	r15, r29
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	b7 01       	movw	r22, r14
     97a:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     97e:	8e 01       	movw	r16, r28
     980:	0f 5e       	subi	r16, 0xEF	; 239
     982:	1f 4f       	sbci	r17, 0xFF	; 255
     984:	ce 01       	movw	r24, r28
     986:	05 96       	adiw	r24, 0x05	; 5
     988:	b8 01       	movw	r22, r16
     98a:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     98e:	89 85       	ldd	r24, Y+9	; 0x09
     990:	82 30       	cpi	r24, 0x02	; 2
     992:	40 f0       	brcs	.+16     	; 0x9a4 <__gesf2+0x56>
     994:	89 89       	ldd	r24, Y+17	; 0x11
     996:	82 30       	cpi	r24, 0x02	; 2
     998:	28 f0       	brcs	.+10     	; 0x9a4 <__gesf2+0x56>
     99a:	c7 01       	movw	r24, r14
     99c:	b8 01       	movw	r22, r16
     99e:	0e 94 55 07 	call	0xeaa	; 0xeaa <__fpcmp_parts_f>
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <__gesf2+0x58>
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	68 96       	adiw	r28, 0x18	; 24
     9a8:	e6 e0       	ldi	r30, 0x06	; 6
     9aa:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__epilogue_restores__+0x18>

000009ae <__ltsf2>:
     9ae:	a8 e1       	ldi	r26, 0x18	; 24
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	ed ed       	ldi	r30, 0xDD	; 221
     9b4:	f4 e0       	ldi	r31, 0x04	; 4
     9b6:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__prologue_saves__+0x18>
     9ba:	69 83       	std	Y+1, r22	; 0x01
     9bc:	7a 83       	std	Y+2, r23	; 0x02
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	9c 83       	std	Y+4, r25	; 0x04
     9c2:	2d 83       	std	Y+5, r18	; 0x05
     9c4:	3e 83       	std	Y+6, r19	; 0x06
     9c6:	4f 83       	std	Y+7, r20	; 0x07
     9c8:	58 87       	std	Y+8, r21	; 0x08
     9ca:	89 e0       	ldi	r24, 0x09	; 9
     9cc:	e8 2e       	mov	r14, r24
     9ce:	f1 2c       	mov	r15, r1
     9d0:	ec 0e       	add	r14, r28
     9d2:	fd 1e       	adc	r15, r29
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	b7 01       	movw	r22, r14
     9da:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     9de:	8e 01       	movw	r16, r28
     9e0:	0f 5e       	subi	r16, 0xEF	; 239
     9e2:	1f 4f       	sbci	r17, 0xFF	; 255
     9e4:	ce 01       	movw	r24, r28
     9e6:	05 96       	adiw	r24, 0x05	; 5
     9e8:	b8 01       	movw	r22, r16
     9ea:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     9ee:	89 85       	ldd	r24, Y+9	; 0x09
     9f0:	82 30       	cpi	r24, 0x02	; 2
     9f2:	40 f0       	brcs	.+16     	; 0xa04 <__ltsf2+0x56>
     9f4:	89 89       	ldd	r24, Y+17	; 0x11
     9f6:	82 30       	cpi	r24, 0x02	; 2
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__ltsf2+0x56>
     9fa:	c7 01       	movw	r24, r14
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 55 07 	call	0xeaa	; 0xeaa <__fpcmp_parts_f>
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <__ltsf2+0x58>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	68 96       	adiw	r28, 0x18	; 24
     a08:	e6 e0       	ldi	r30, 0x06	; 6
     a0a:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__epilogue_restores__+0x18>

00000a0e <__floatsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 c6 22 	jmp	0x458c	; 0x458c <__prologue_saves__+0x12>
     a1a:	9b 01       	movw	r18, r22
     a1c:	ac 01       	movw	r20, r24
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	da 01       	movw	r26, r20
     a24:	c9 01       	movw	r24, r18
     a26:	88 27       	eor	r24, r24
     a28:	b7 fd       	sbrc	r27, 7
     a2a:	83 95       	inc	r24
     a2c:	99 27       	eor	r25, r25
     a2e:	aa 27       	eor	r26, r26
     a30:	bb 27       	eor	r27, r27
     a32:	b8 2e       	mov	r11, r24
     a34:	21 15       	cp	r18, r1
     a36:	31 05       	cpc	r19, r1
     a38:	41 05       	cpc	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	19 f4       	brne	.+6      	; 0xa44 <__floatsisf+0x36>
     a3e:	82 e0       	ldi	r24, 0x02	; 2
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	3a c0       	rjmp	.+116    	; 0xab8 <__floatsisf+0xaa>
     a44:	88 23       	and	r24, r24
     a46:	a9 f0       	breq	.+42     	; 0xa72 <__floatsisf+0x64>
     a48:	20 30       	cpi	r18, 0x00	; 0
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	38 07       	cpc	r19, r24
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	48 07       	cpc	r20, r24
     a52:	80 e8       	ldi	r24, 0x80	; 128
     a54:	58 07       	cpc	r21, r24
     a56:	29 f4       	brne	.+10     	; 0xa62 <__floatsisf+0x54>
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	9f ec       	ldi	r25, 0xCF	; 207
     a60:	30 c0       	rjmp	.+96     	; 0xac2 <__floatsisf+0xb4>
     a62:	ee 24       	eor	r14, r14
     a64:	ff 24       	eor	r15, r15
     a66:	87 01       	movw	r16, r14
     a68:	e2 1a       	sub	r14, r18
     a6a:	f3 0a       	sbc	r15, r19
     a6c:	04 0b       	sbc	r16, r20
     a6e:	15 0b       	sbc	r17, r21
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <__floatsisf+0x68>
     a72:	79 01       	movw	r14, r18
     a74:	8a 01       	movw	r16, r20
     a76:	8e e1       	ldi	r24, 0x1E	; 30
     a78:	c8 2e       	mov	r12, r24
     a7a:	d1 2c       	mov	r13, r1
     a7c:	dc 82       	std	Y+4, r13	; 0x04
     a7e:	cb 82       	std	Y+3, r12	; 0x03
     a80:	ed 82       	std	Y+5, r14	; 0x05
     a82:	fe 82       	std	Y+6, r15	; 0x06
     a84:	0f 83       	std	Y+7, r16	; 0x07
     a86:	18 87       	std	Y+8, r17	; 0x08
     a88:	c8 01       	movw	r24, r16
     a8a:	b7 01       	movw	r22, r14
     a8c:	0e 94 b9 05 	call	0xb72	; 0xb72 <__clzsi2>
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	18 16       	cp	r1, r24
     a94:	19 06       	cpc	r1, r25
     a96:	84 f4       	brge	.+32     	; 0xab8 <__floatsisf+0xaa>
     a98:	08 2e       	mov	r0, r24
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__floatsisf+0x96>
     a9c:	ee 0c       	add	r14, r14
     a9e:	ff 1c       	adc	r15, r15
     aa0:	00 1f       	adc	r16, r16
     aa2:	11 1f       	adc	r17, r17
     aa4:	0a 94       	dec	r0
     aa6:	d2 f7       	brpl	.-12     	; 0xa9c <__floatsisf+0x8e>
     aa8:	ed 82       	std	Y+5, r14	; 0x05
     aaa:	fe 82       	std	Y+6, r15	; 0x06
     aac:	0f 83       	std	Y+7, r16	; 0x07
     aae:	18 87       	std	Y+8, r17	; 0x08
     ab0:	c8 1a       	sub	r12, r24
     ab2:	d9 0a       	sbc	r13, r25
     ab4:	dc 82       	std	Y+4, r13	; 0x04
     ab6:	cb 82       	std	Y+3, r12	; 0x03
     ab8:	ba 82       	std	Y+2, r11	; 0x02
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	0e 94 08 06 	call	0xc10	; 0xc10 <__pack_f>
     ac2:	28 96       	adiw	r28, 0x08	; 8
     ac4:	e9 e0       	ldi	r30, 0x09	; 9
     ac6:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <__epilogue_restores__+0x12>

00000aca <__fixsfsi>:
     aca:	ac e0       	ldi	r26, 0x0C	; 12
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	eb e6       	ldi	r30, 0x6B	; 107
     ad0:	f5 e0       	ldi	r31, 0x05	; 5
     ad2:	0c 94 cd 22 	jmp	0x459a	; 0x459a <__prologue_saves__+0x20>
     ad6:	69 83       	std	Y+1, r22	; 0x01
     ad8:	7a 83       	std	Y+2, r23	; 0x02
     ada:	8b 83       	std	Y+3, r24	; 0x03
     adc:	9c 83       	std	Y+4, r25	; 0x04
     ade:	ce 01       	movw	r24, r28
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	be 01       	movw	r22, r28
     ae4:	6b 5f       	subi	r22, 0xFB	; 251
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	0e 94 dd 06 	call	0xdba	; 0xdba <__unpack_f>
     aec:	8d 81       	ldd	r24, Y+5	; 0x05
     aee:	82 30       	cpi	r24, 0x02	; 2
     af0:	61 f1       	breq	.+88     	; 0xb4a <__fixsfsi+0x80>
     af2:	82 30       	cpi	r24, 0x02	; 2
     af4:	50 f1       	brcs	.+84     	; 0xb4a <__fixsfsi+0x80>
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	21 f4       	brne	.+8      	; 0xb02 <__fixsfsi+0x38>
     afa:	8e 81       	ldd	r24, Y+6	; 0x06
     afc:	88 23       	and	r24, r24
     afe:	51 f1       	breq	.+84     	; 0xb54 <__fixsfsi+0x8a>
     b00:	2e c0       	rjmp	.+92     	; 0xb5e <__fixsfsi+0x94>
     b02:	2f 81       	ldd	r18, Y+7	; 0x07
     b04:	38 85       	ldd	r19, Y+8	; 0x08
     b06:	37 fd       	sbrc	r19, 7
     b08:	20 c0       	rjmp	.+64     	; 0xb4a <__fixsfsi+0x80>
     b0a:	6e 81       	ldd	r22, Y+6	; 0x06
     b0c:	2f 31       	cpi	r18, 0x1F	; 31
     b0e:	31 05       	cpc	r19, r1
     b10:	1c f0       	brlt	.+6      	; 0xb18 <__fixsfsi+0x4e>
     b12:	66 23       	and	r22, r22
     b14:	f9 f0       	breq	.+62     	; 0xb54 <__fixsfsi+0x8a>
     b16:	23 c0       	rjmp	.+70     	; 0xb5e <__fixsfsi+0x94>
     b18:	8e e1       	ldi	r24, 0x1E	; 30
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	82 1b       	sub	r24, r18
     b1e:	93 0b       	sbc	r25, r19
     b20:	29 85       	ldd	r18, Y+9	; 0x09
     b22:	3a 85       	ldd	r19, Y+10	; 0x0a
     b24:	4b 85       	ldd	r20, Y+11	; 0x0b
     b26:	5c 85       	ldd	r21, Y+12	; 0x0c
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__fixsfsi+0x68>
     b2a:	56 95       	lsr	r21
     b2c:	47 95       	ror	r20
     b2e:	37 95       	ror	r19
     b30:	27 95       	ror	r18
     b32:	8a 95       	dec	r24
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__fixsfsi+0x60>
     b36:	66 23       	and	r22, r22
     b38:	b1 f0       	breq	.+44     	; 0xb66 <__fixsfsi+0x9c>
     b3a:	50 95       	com	r21
     b3c:	40 95       	com	r20
     b3e:	30 95       	com	r19
     b40:	21 95       	neg	r18
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	4f 4f       	sbci	r20, 0xFF	; 255
     b46:	5f 4f       	sbci	r21, 0xFF	; 255
     b48:	0e c0       	rjmp	.+28     	; 0xb66 <__fixsfsi+0x9c>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	09 c0       	rjmp	.+18     	; 0xb66 <__fixsfsi+0x9c>
     b54:	2f ef       	ldi	r18, 0xFF	; 255
     b56:	3f ef       	ldi	r19, 0xFF	; 255
     b58:	4f ef       	ldi	r20, 0xFF	; 255
     b5a:	5f e7       	ldi	r21, 0x7F	; 127
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__fixsfsi+0x9c>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	50 e8       	ldi	r21, 0x80	; 128
     b66:	b9 01       	movw	r22, r18
     b68:	ca 01       	movw	r24, r20
     b6a:	2c 96       	adiw	r28, 0x0c	; 12
     b6c:	e2 e0       	ldi	r30, 0x02	; 2
     b6e:	0c 94 e9 22 	jmp	0x45d2	; 0x45d2 <__epilogue_restores__+0x20>

00000b72 <__clzsi2>:
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	7b 01       	movw	r14, r22
     b7c:	8c 01       	movw	r16, r24
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	e8 16       	cp	r14, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	f8 06       	cpc	r15, r24
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	08 07       	cpc	r16, r24
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	18 07       	cpc	r17, r24
     b8e:	88 f4       	brcc	.+34     	; 0xbb2 <__clzsi2+0x40>
     b90:	8f ef       	ldi	r24, 0xFF	; 255
     b92:	e8 16       	cp	r14, r24
     b94:	f1 04       	cpc	r15, r1
     b96:	01 05       	cpc	r16, r1
     b98:	11 05       	cpc	r17, r1
     b9a:	31 f0       	breq	.+12     	; 0xba8 <__clzsi2+0x36>
     b9c:	28 f0       	brcs	.+10     	; 0xba8 <__clzsi2+0x36>
     b9e:	88 e0       	ldi	r24, 0x08	; 8
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	17 c0       	rjmp	.+46     	; 0xbd6 <__clzsi2+0x64>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	12 c0       	rjmp	.+36     	; 0xbd6 <__clzsi2+0x64>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	e8 16       	cp	r14, r24
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	f8 06       	cpc	r15, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	08 07       	cpc	r16, r24
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	18 07       	cpc	r17, r24
     bc2:	28 f0       	brcs	.+10     	; 0xbce <__clzsi2+0x5c>
     bc4:	88 e1       	ldi	r24, 0x18	; 24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	04 c0       	rjmp	.+8      	; 0xbd6 <__clzsi2+0x64>
     bce:	80 e1       	ldi	r24, 0x10	; 16
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	20 e2       	ldi	r18, 0x20	; 32
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	28 1b       	sub	r18, r24
     be0:	39 0b       	sbc	r19, r25
     be2:	4a 0b       	sbc	r20, r26
     be4:	5b 0b       	sbc	r21, r27
     be6:	04 c0       	rjmp	.+8      	; 0xbf0 <__clzsi2+0x7e>
     be8:	16 95       	lsr	r17
     bea:	07 95       	ror	r16
     bec:	f7 94       	ror	r15
     bee:	e7 94       	ror	r14
     bf0:	8a 95       	dec	r24
     bf2:	d2 f7       	brpl	.-12     	; 0xbe8 <__clzsi2+0x76>
     bf4:	f7 01       	movw	r30, r14
     bf6:	e6 50       	subi	r30, 0x06	; 6
     bf8:	ff 4f       	sbci	r31, 0xFF	; 255
     bfa:	80 81       	ld	r24, Z
     bfc:	28 1b       	sub	r18, r24
     bfe:	31 09       	sbc	r19, r1
     c00:	41 09       	sbc	r20, r1
     c02:	51 09       	sbc	r21, r1
     c04:	c9 01       	movw	r24, r18
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	08 95       	ret

00000c10 <__pack_f>:
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	fc 01       	movw	r30, r24
     c1c:	e4 80       	ldd	r14, Z+4	; 0x04
     c1e:	f5 80       	ldd	r15, Z+5	; 0x05
     c20:	06 81       	ldd	r16, Z+6	; 0x06
     c22:	17 81       	ldd	r17, Z+7	; 0x07
     c24:	d1 80       	ldd	r13, Z+1	; 0x01
     c26:	80 81       	ld	r24, Z
     c28:	82 30       	cpi	r24, 0x02	; 2
     c2a:	48 f4       	brcc	.+18     	; 0xc3e <__pack_f+0x2e>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e1       	ldi	r26, 0x10	; 16
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e8 2a       	or	r14, r24
     c36:	f9 2a       	or	r15, r25
     c38:	0a 2b       	or	r16, r26
     c3a:	1b 2b       	or	r17, r27
     c3c:	a5 c0       	rjmp	.+330    	; 0xd88 <__pack_f+0x178>
     c3e:	84 30       	cpi	r24, 0x04	; 4
     c40:	09 f4       	brne	.+2      	; 0xc44 <__pack_f+0x34>
     c42:	9f c0       	rjmp	.+318    	; 0xd82 <__pack_f+0x172>
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	21 f4       	brne	.+8      	; 0xc50 <__pack_f+0x40>
     c48:	ee 24       	eor	r14, r14
     c4a:	ff 24       	eor	r15, r15
     c4c:	87 01       	movw	r16, r14
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <__pack_f+0x4a>
     c50:	e1 14       	cp	r14, r1
     c52:	f1 04       	cpc	r15, r1
     c54:	01 05       	cpc	r16, r1
     c56:	11 05       	cpc	r17, r1
     c58:	19 f4       	brne	.+6      	; 0xc60 <__pack_f+0x50>
     c5a:	e0 e0       	ldi	r30, 0x00	; 0
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	96 c0       	rjmp	.+300    	; 0xd8c <__pack_f+0x17c>
     c60:	62 81       	ldd	r22, Z+2	; 0x02
     c62:	73 81       	ldd	r23, Z+3	; 0x03
     c64:	9f ef       	ldi	r25, 0xFF	; 255
     c66:	62 38       	cpi	r22, 0x82	; 130
     c68:	79 07       	cpc	r23, r25
     c6a:	0c f0       	brlt	.+2      	; 0xc6e <__pack_f+0x5e>
     c6c:	5b c0       	rjmp	.+182    	; 0xd24 <__pack_f+0x114>
     c6e:	22 e8       	ldi	r18, 0x82	; 130
     c70:	3f ef       	ldi	r19, 0xFF	; 255
     c72:	26 1b       	sub	r18, r22
     c74:	37 0b       	sbc	r19, r23
     c76:	2a 31       	cpi	r18, 0x1A	; 26
     c78:	31 05       	cpc	r19, r1
     c7a:	2c f0       	brlt	.+10     	; 0xc86 <__pack_f+0x76>
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	2a c0       	rjmp	.+84     	; 0xcda <__pack_f+0xca>
     c86:	b8 01       	movw	r22, r16
     c88:	a7 01       	movw	r20, r14
     c8a:	02 2e       	mov	r0, r18
     c8c:	04 c0       	rjmp	.+8      	; 0xc96 <__pack_f+0x86>
     c8e:	76 95       	lsr	r23
     c90:	67 95       	ror	r22
     c92:	57 95       	ror	r21
     c94:	47 95       	ror	r20
     c96:	0a 94       	dec	r0
     c98:	d2 f7       	brpl	.-12     	; 0xc8e <__pack_f+0x7e>
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	04 c0       	rjmp	.+8      	; 0xcac <__pack_f+0x9c>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	aa 1f       	adc	r26, r26
     caa:	bb 1f       	adc	r27, r27
     cac:	2a 95       	dec	r18
     cae:	d2 f7       	brpl	.-12     	; 0xca4 <__pack_f+0x94>
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	a1 09       	sbc	r26, r1
     cb4:	b1 09       	sbc	r27, r1
     cb6:	8e 21       	and	r24, r14
     cb8:	9f 21       	and	r25, r15
     cba:	a0 23       	and	r26, r16
     cbc:	b1 23       	and	r27, r17
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	a1 05       	cpc	r26, r1
     cc2:	b1 05       	cpc	r27, r1
     cc4:	21 f0       	breq	.+8      	; 0xcce <__pack_f+0xbe>
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	a0 e0       	ldi	r26, 0x00	; 0
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	9a 01       	movw	r18, r20
     cd0:	ab 01       	movw	r20, r22
     cd2:	28 2b       	or	r18, r24
     cd4:	39 2b       	or	r19, r25
     cd6:	4a 2b       	or	r20, r26
     cd8:	5b 2b       	or	r21, r27
     cda:	da 01       	movw	r26, r20
     cdc:	c9 01       	movw	r24, r18
     cde:	8f 77       	andi	r24, 0x7F	; 127
     ce0:	90 70       	andi	r25, 0x00	; 0
     ce2:	a0 70       	andi	r26, 0x00	; 0
     ce4:	b0 70       	andi	r27, 0x00	; 0
     ce6:	80 34       	cpi	r24, 0x40	; 64
     ce8:	91 05       	cpc	r25, r1
     cea:	a1 05       	cpc	r26, r1
     cec:	b1 05       	cpc	r27, r1
     cee:	39 f4       	brne	.+14     	; 0xcfe <__pack_f+0xee>
     cf0:	27 ff       	sbrs	r18, 7
     cf2:	09 c0       	rjmp	.+18     	; 0xd06 <__pack_f+0xf6>
     cf4:	20 5c       	subi	r18, 0xC0	; 192
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	4f 4f       	sbci	r20, 0xFF	; 255
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <__pack_f+0xf6>
     cfe:	21 5c       	subi	r18, 0xC1	; 193
     d00:	3f 4f       	sbci	r19, 0xFF	; 255
     d02:	4f 4f       	sbci	r20, 0xFF	; 255
     d04:	5f 4f       	sbci	r21, 0xFF	; 255
     d06:	e0 e0       	ldi	r30, 0x00	; 0
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	20 30       	cpi	r18, 0x00	; 0
     d0c:	a0 e0       	ldi	r26, 0x00	; 0
     d0e:	3a 07       	cpc	r19, r26
     d10:	a0 e0       	ldi	r26, 0x00	; 0
     d12:	4a 07       	cpc	r20, r26
     d14:	a0 e4       	ldi	r26, 0x40	; 64
     d16:	5a 07       	cpc	r21, r26
     d18:	10 f0       	brcs	.+4      	; 0xd1e <__pack_f+0x10e>
     d1a:	e1 e0       	ldi	r30, 0x01	; 1
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	79 01       	movw	r14, r18
     d20:	8a 01       	movw	r16, r20
     d22:	27 c0       	rjmp	.+78     	; 0xd72 <__pack_f+0x162>
     d24:	60 38       	cpi	r22, 0x80	; 128
     d26:	71 05       	cpc	r23, r1
     d28:	64 f5       	brge	.+88     	; 0xd82 <__pack_f+0x172>
     d2a:	fb 01       	movw	r30, r22
     d2c:	e1 58       	subi	r30, 0x81	; 129
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	d8 01       	movw	r26, r16
     d32:	c7 01       	movw	r24, r14
     d34:	8f 77       	andi	r24, 0x7F	; 127
     d36:	90 70       	andi	r25, 0x00	; 0
     d38:	a0 70       	andi	r26, 0x00	; 0
     d3a:	b0 70       	andi	r27, 0x00	; 0
     d3c:	80 34       	cpi	r24, 0x40	; 64
     d3e:	91 05       	cpc	r25, r1
     d40:	a1 05       	cpc	r26, r1
     d42:	b1 05       	cpc	r27, r1
     d44:	39 f4       	brne	.+14     	; 0xd54 <__pack_f+0x144>
     d46:	e7 fe       	sbrs	r14, 7
     d48:	0d c0       	rjmp	.+26     	; 0xd64 <__pack_f+0x154>
     d4a:	80 e4       	ldi	r24, 0x40	; 64
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <__pack_f+0x14c>
     d54:	8f e3       	ldi	r24, 0x3F	; 63
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a0 e0       	ldi	r26, 0x00	; 0
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e8 0e       	add	r14, r24
     d5e:	f9 1e       	adc	r15, r25
     d60:	0a 1f       	adc	r16, r26
     d62:	1b 1f       	adc	r17, r27
     d64:	17 ff       	sbrs	r17, 7
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <__pack_f+0x162>
     d68:	16 95       	lsr	r17
     d6a:	07 95       	ror	r16
     d6c:	f7 94       	ror	r15
     d6e:	e7 94       	ror	r14
     d70:	31 96       	adiw	r30, 0x01	; 1
     d72:	87 e0       	ldi	r24, 0x07	; 7
     d74:	16 95       	lsr	r17
     d76:	07 95       	ror	r16
     d78:	f7 94       	ror	r15
     d7a:	e7 94       	ror	r14
     d7c:	8a 95       	dec	r24
     d7e:	d1 f7       	brne	.-12     	; 0xd74 <__pack_f+0x164>
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__pack_f+0x17c>
     d82:	ee 24       	eor	r14, r14
     d84:	ff 24       	eor	r15, r15
     d86:	87 01       	movw	r16, r14
     d88:	ef ef       	ldi	r30, 0xFF	; 255
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	6e 2f       	mov	r22, r30
     d8e:	67 95       	ror	r22
     d90:	66 27       	eor	r22, r22
     d92:	67 95       	ror	r22
     d94:	90 2f       	mov	r25, r16
     d96:	9f 77       	andi	r25, 0x7F	; 127
     d98:	d7 94       	ror	r13
     d9a:	dd 24       	eor	r13, r13
     d9c:	d7 94       	ror	r13
     d9e:	8e 2f       	mov	r24, r30
     da0:	86 95       	lsr	r24
     da2:	49 2f       	mov	r20, r25
     da4:	46 2b       	or	r20, r22
     da6:	58 2f       	mov	r21, r24
     da8:	5d 29       	or	r21, r13
     daa:	b7 01       	movw	r22, r14
     dac:	ca 01       	movw	r24, r20
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	08 95       	ret

00000dba <__unpack_f>:
     dba:	fc 01       	movw	r30, r24
     dbc:	db 01       	movw	r26, r22
     dbe:	40 81       	ld	r20, Z
     dc0:	51 81       	ldd	r21, Z+1	; 0x01
     dc2:	22 81       	ldd	r18, Z+2	; 0x02
     dc4:	62 2f       	mov	r22, r18
     dc6:	6f 77       	andi	r22, 0x7F	; 127
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	22 1f       	adc	r18, r18
     dcc:	22 27       	eor	r18, r18
     dce:	22 1f       	adc	r18, r18
     dd0:	93 81       	ldd	r25, Z+3	; 0x03
     dd2:	89 2f       	mov	r24, r25
     dd4:	88 0f       	add	r24, r24
     dd6:	82 2b       	or	r24, r18
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	99 1f       	adc	r25, r25
     dde:	99 27       	eor	r25, r25
     de0:	99 1f       	adc	r25, r25
     de2:	11 96       	adiw	r26, 0x01	; 1
     de4:	9c 93       	st	X, r25
     de6:	11 97       	sbiw	r26, 0x01	; 1
     de8:	21 15       	cp	r18, r1
     dea:	31 05       	cpc	r19, r1
     dec:	a9 f5       	brne	.+106    	; 0xe58 <__unpack_f+0x9e>
     dee:	41 15       	cp	r20, r1
     df0:	51 05       	cpc	r21, r1
     df2:	61 05       	cpc	r22, r1
     df4:	71 05       	cpc	r23, r1
     df6:	11 f4       	brne	.+4      	; 0xdfc <__unpack_f+0x42>
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	37 c0       	rjmp	.+110    	; 0xe6a <__unpack_f+0xb0>
     dfc:	82 e8       	ldi	r24, 0x82	; 130
     dfe:	9f ef       	ldi	r25, 0xFF	; 255
     e00:	13 96       	adiw	r26, 0x03	; 3
     e02:	9c 93       	st	X, r25
     e04:	8e 93       	st	-X, r24
     e06:	12 97       	sbiw	r26, 0x02	; 2
     e08:	9a 01       	movw	r18, r20
     e0a:	ab 01       	movw	r20, r22
     e0c:	67 e0       	ldi	r22, 0x07	; 7
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	6a 95       	dec	r22
     e18:	d1 f7       	brne	.-12     	; 0xe0e <__unpack_f+0x54>
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	8c 93       	st	X, r24
     e1e:	0d c0       	rjmp	.+26     	; 0xe3a <__unpack_f+0x80>
     e20:	22 0f       	add	r18, r18
     e22:	33 1f       	adc	r19, r19
     e24:	44 1f       	adc	r20, r20
     e26:	55 1f       	adc	r21, r21
     e28:	12 96       	adiw	r26, 0x02	; 2
     e2a:	8d 91       	ld	r24, X+
     e2c:	9c 91       	ld	r25, X
     e2e:	13 97       	sbiw	r26, 0x03	; 3
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	13 96       	adiw	r26, 0x03	; 3
     e34:	9c 93       	st	X, r25
     e36:	8e 93       	st	-X, r24
     e38:	12 97       	sbiw	r26, 0x02	; 2
     e3a:	20 30       	cpi	r18, 0x00	; 0
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	38 07       	cpc	r19, r24
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	48 07       	cpc	r20, r24
     e44:	80 e4       	ldi	r24, 0x40	; 64
     e46:	58 07       	cpc	r21, r24
     e48:	58 f3       	brcs	.-42     	; 0xe20 <__unpack_f+0x66>
     e4a:	14 96       	adiw	r26, 0x04	; 4
     e4c:	2d 93       	st	X+, r18
     e4e:	3d 93       	st	X+, r19
     e50:	4d 93       	st	X+, r20
     e52:	5c 93       	st	X, r21
     e54:	17 97       	sbiw	r26, 0x07	; 7
     e56:	08 95       	ret
     e58:	2f 3f       	cpi	r18, 0xFF	; 255
     e5a:	31 05       	cpc	r19, r1
     e5c:	79 f4       	brne	.+30     	; 0xe7c <__unpack_f+0xc2>
     e5e:	41 15       	cp	r20, r1
     e60:	51 05       	cpc	r21, r1
     e62:	61 05       	cpc	r22, r1
     e64:	71 05       	cpc	r23, r1
     e66:	19 f4       	brne	.+6      	; 0xe6e <__unpack_f+0xb4>
     e68:	84 e0       	ldi	r24, 0x04	; 4
     e6a:	8c 93       	st	X, r24
     e6c:	08 95       	ret
     e6e:	64 ff       	sbrs	r22, 4
     e70:	03 c0       	rjmp	.+6      	; 0xe78 <__unpack_f+0xbe>
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	8c 93       	st	X, r24
     e76:	12 c0       	rjmp	.+36     	; 0xe9c <__unpack_f+0xe2>
     e78:	1c 92       	st	X, r1
     e7a:	10 c0       	rjmp	.+32     	; 0xe9c <__unpack_f+0xe2>
     e7c:	2f 57       	subi	r18, 0x7F	; 127
     e7e:	30 40       	sbci	r19, 0x00	; 0
     e80:	13 96       	adiw	r26, 0x03	; 3
     e82:	3c 93       	st	X, r19
     e84:	2e 93       	st	-X, r18
     e86:	12 97       	sbiw	r26, 0x02	; 2
     e88:	83 e0       	ldi	r24, 0x03	; 3
     e8a:	8c 93       	st	X, r24
     e8c:	87 e0       	ldi	r24, 0x07	; 7
     e8e:	44 0f       	add	r20, r20
     e90:	55 1f       	adc	r21, r21
     e92:	66 1f       	adc	r22, r22
     e94:	77 1f       	adc	r23, r23
     e96:	8a 95       	dec	r24
     e98:	d1 f7       	brne	.-12     	; 0xe8e <__unpack_f+0xd4>
     e9a:	70 64       	ori	r23, 0x40	; 64
     e9c:	14 96       	adiw	r26, 0x04	; 4
     e9e:	4d 93       	st	X+, r20
     ea0:	5d 93       	st	X+, r21
     ea2:	6d 93       	st	X+, r22
     ea4:	7c 93       	st	X, r23
     ea6:	17 97       	sbiw	r26, 0x07	; 7
     ea8:	08 95       	ret

00000eaa <__fpcmp_parts_f>:
     eaa:	1f 93       	push	r17
     eac:	dc 01       	movw	r26, r24
     eae:	fb 01       	movw	r30, r22
     eb0:	9c 91       	ld	r25, X
     eb2:	92 30       	cpi	r25, 0x02	; 2
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <__fpcmp_parts_f+0xe>
     eb6:	47 c0       	rjmp	.+142    	; 0xf46 <__fpcmp_parts_f+0x9c>
     eb8:	80 81       	ld	r24, Z
     eba:	82 30       	cpi	r24, 0x02	; 2
     ebc:	08 f4       	brcc	.+2      	; 0xec0 <__fpcmp_parts_f+0x16>
     ebe:	43 c0       	rjmp	.+134    	; 0xf46 <__fpcmp_parts_f+0x9c>
     ec0:	94 30       	cpi	r25, 0x04	; 4
     ec2:	51 f4       	brne	.+20     	; 0xed8 <__fpcmp_parts_f+0x2e>
     ec4:	11 96       	adiw	r26, 0x01	; 1
     ec6:	1c 91       	ld	r17, X
     ec8:	84 30       	cpi	r24, 0x04	; 4
     eca:	99 f5       	brne	.+102    	; 0xf32 <__fpcmp_parts_f+0x88>
     ecc:	81 81       	ldd	r24, Z+1	; 0x01
     ece:	68 2f       	mov	r22, r24
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	61 1b       	sub	r22, r17
     ed4:	71 09       	sbc	r23, r1
     ed6:	3f c0       	rjmp	.+126    	; 0xf56 <__fpcmp_parts_f+0xac>
     ed8:	84 30       	cpi	r24, 0x04	; 4
     eda:	21 f0       	breq	.+8      	; 0xee4 <__fpcmp_parts_f+0x3a>
     edc:	92 30       	cpi	r25, 0x02	; 2
     ede:	31 f4       	brne	.+12     	; 0xeec <__fpcmp_parts_f+0x42>
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	b9 f1       	breq	.+110    	; 0xf52 <__fpcmp_parts_f+0xa8>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	88 23       	and	r24, r24
     ee8:	89 f1       	breq	.+98     	; 0xf4c <__fpcmp_parts_f+0xa2>
     eea:	2d c0       	rjmp	.+90     	; 0xf46 <__fpcmp_parts_f+0x9c>
     eec:	11 96       	adiw	r26, 0x01	; 1
     eee:	1c 91       	ld	r17, X
     ef0:	11 97       	sbiw	r26, 0x01	; 1
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	f1 f0       	breq	.+60     	; 0xf32 <__fpcmp_parts_f+0x88>
     ef6:	81 81       	ldd	r24, Z+1	; 0x01
     ef8:	18 17       	cp	r17, r24
     efa:	d9 f4       	brne	.+54     	; 0xf32 <__fpcmp_parts_f+0x88>
     efc:	12 96       	adiw	r26, 0x02	; 2
     efe:	2d 91       	ld	r18, X+
     f00:	3c 91       	ld	r19, X
     f02:	13 97       	sbiw	r26, 0x03	; 3
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	93 81       	ldd	r25, Z+3	; 0x03
     f08:	82 17       	cp	r24, r18
     f0a:	93 07       	cpc	r25, r19
     f0c:	94 f0       	brlt	.+36     	; 0xf32 <__fpcmp_parts_f+0x88>
     f0e:	28 17       	cp	r18, r24
     f10:	39 07       	cpc	r19, r25
     f12:	bc f0       	brlt	.+46     	; 0xf42 <__fpcmp_parts_f+0x98>
     f14:	14 96       	adiw	r26, 0x04	; 4
     f16:	8d 91       	ld	r24, X+
     f18:	9d 91       	ld	r25, X+
     f1a:	0d 90       	ld	r0, X+
     f1c:	bc 91       	ld	r27, X
     f1e:	a0 2d       	mov	r26, r0
     f20:	24 81       	ldd	r18, Z+4	; 0x04
     f22:	35 81       	ldd	r19, Z+5	; 0x05
     f24:	46 81       	ldd	r20, Z+6	; 0x06
     f26:	57 81       	ldd	r21, Z+7	; 0x07
     f28:	28 17       	cp	r18, r24
     f2a:	39 07       	cpc	r19, r25
     f2c:	4a 07       	cpc	r20, r26
     f2e:	5b 07       	cpc	r21, r27
     f30:	18 f4       	brcc	.+6      	; 0xf38 <__fpcmp_parts_f+0x8e>
     f32:	11 23       	and	r17, r17
     f34:	41 f0       	breq	.+16     	; 0xf46 <__fpcmp_parts_f+0x9c>
     f36:	0a c0       	rjmp	.+20     	; 0xf4c <__fpcmp_parts_f+0xa2>
     f38:	82 17       	cp	r24, r18
     f3a:	93 07       	cpc	r25, r19
     f3c:	a4 07       	cpc	r26, r20
     f3e:	b5 07       	cpc	r27, r21
     f40:	40 f4       	brcc	.+16     	; 0xf52 <__fpcmp_parts_f+0xa8>
     f42:	11 23       	and	r17, r17
     f44:	19 f0       	breq	.+6      	; 0xf4c <__fpcmp_parts_f+0xa2>
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <__fpcmp_parts_f+0xac>
     f4c:	6f ef       	ldi	r22, 0xFF	; 255
     f4e:	7f ef       	ldi	r23, 0xFF	; 255
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <__fpcmp_parts_f+0xac>
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	cb 01       	movw	r24, r22
     f58:	1f 91       	pop	r17
     f5a:	08 95       	ret

00000f5c <GIE_viodEnable>:
#include "../../SERVICE/STDTypes.h"
#include "../../SERVICE/BIT_MATH.h"

#include "GIE_register.h"

void GIE_viodEnable(void){
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62

	Set_bit(SREG,SREG_I);
     f64:	af e5       	ldi	r26, 0x5F	; 95
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	ef e5       	ldi	r30, 0x5F	; 95
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 68       	ori	r24, 0x80	; 128
     f70:	8c 93       	st	X, r24
}
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <GIE_viodDisable>:

void GIE_viodDisable(void){
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62

	Clr_bit(SREG,SREG_I);
     f80:	af e5       	ldi	r26, 0x5F	; 95
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ef e5       	ldi	r30, 0x5F	; 95
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	8f 77       	andi	r24, 0x7F	; 127
     f8c:	8c 93       	st	X, r24

}
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <EXTI_enuInit>:




ES_t EXTI_enuInit(EXTI_t * Copy_pstrEXTIConfig)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	2a 97       	sbiw	r28, 0x0a	; 10
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	9b 83       	std	Y+3, r25	; 0x03
     faa:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_u8ErrorState = ES_OK;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pstrEXTIConfig == NULL) return ES_NULL_POINTER;
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	9b 81       	ldd	r25, Y+3	; 0x03
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	19 f4       	brne	.+6      	; 0xfbe <EXTI_enuInit+0x2a>
     fb8:	22 e0       	ldi	r18, 0x02	; 2
     fba:	2a 87       	std	Y+10, r18	; 0x0a
     fbc:	13 c1       	rjmp	.+550    	; 0x11e4 <EXTI_enuInit+0x250>

	if(Copy_pstrEXTIConfig[0].EXTI_u8State == ENABLED)
     fbe:	ea 81       	ldd	r30, Y+2	; 0x02
     fc0:	fb 81       	ldd	r31, Y+3	; 0x03
     fc2:	80 81       	ld	r24, Z
     fc4:	89 30       	cpi	r24, 0x09	; 9
     fc6:	09 f0       	breq	.+2      	; 0xfca <EXTI_enuInit+0x36>
     fc8:	67 c0       	rjmp	.+206    	; 0x1098 <EXTI_enuInit+0x104>
	{
		/*set sense control for INT0*/

		switch (Copy_pstrEXTIConfig[0].EXTI_u8Sense)
     fca:	ea 81       	ldd	r30, Y+2	; 0x02
     fcc:	fb 81       	ldd	r31, Y+3	; 0x03
     fce:	81 81       	ldd	r24, Z+1	; 0x01
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	39 87       	std	Y+9, r19	; 0x09
     fd6:	28 87       	std	Y+8, r18	; 0x08
     fd8:	88 85       	ldd	r24, Y+8	; 0x08
     fda:	99 85       	ldd	r25, Y+9	; 0x09
     fdc:	82 34       	cpi	r24, 0x42	; 66
     fde:	91 05       	cpc	r25, r1
     fe0:	b1 f0       	breq	.+44     	; 0x100e <EXTI_enuInit+0x7a>
     fe2:	28 85       	ldd	r18, Y+8	; 0x08
     fe4:	39 85       	ldd	r19, Y+9	; 0x09
     fe6:	23 34       	cpi	r18, 0x43	; 67
     fe8:	31 05       	cpc	r19, r1
     fea:	5c f4       	brge	.+22     	; 0x1002 <EXTI_enuInit+0x6e>
     fec:	88 85       	ldd	r24, Y+8	; 0x08
     fee:	99 85       	ldd	r25, Y+9	; 0x09
     ff0:	84 32       	cpi	r24, 0x24	; 36
     ff2:	91 05       	cpc	r25, r1
     ff4:	d9 f0       	breq	.+54     	; 0x102c <EXTI_enuInit+0x98>
     ff6:	28 85       	ldd	r18, Y+8	; 0x08
     ff8:	39 85       	ldd	r19, Y+9	; 0x09
     ffa:	28 33       	cpi	r18, 0x38	; 56
     ffc:	31 05       	cpc	r19, r1
     ffe:	29 f1       	breq	.+74     	; 0x104a <EXTI_enuInit+0xb6>
    1000:	42 c0       	rjmp	.+132    	; 0x1086 <EXTI_enuInit+0xf2>
    1002:	88 85       	ldd	r24, Y+8	; 0x08
    1004:	99 85       	ldd	r25, Y+9	; 0x09
    1006:	86 35       	cpi	r24, 0x56	; 86
    1008:	91 05       	cpc	r25, r1
    100a:	71 f1       	breq	.+92     	; 0x1068 <EXTI_enuInit+0xd4>
    100c:	3c c0       	rjmp	.+120    	; 0x1086 <EXTI_enuInit+0xf2>
		{
		case FALLING_EDGE:  Set_bit(MCUCR,MCUCR_ISC01); Clr_bit(MCUCR,MCUCR_ISC00); break;
    100e:	a5 e5       	ldi	r26, 0x55	; 85
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e5 e5       	ldi	r30, 0x55	; 85
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	82 60       	ori	r24, 0x02	; 2
    101a:	8c 93       	st	X, r24
    101c:	a5 e5       	ldi	r26, 0x55	; 85
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e5 e5       	ldi	r30, 0x55	; 85
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8e 7f       	andi	r24, 0xFE	; 254
    1028:	8c 93       	st	X, r24
    102a:	2f c0       	rjmp	.+94     	; 0x108a <EXTI_enuInit+0xf6>
		case RISING_EDGE :  Set_bit(MCUCR,MCUCR_ISC01); Set_bit(MCUCR,MCUCR_ISC00); break;
    102c:	a5 e5       	ldi	r26, 0x55	; 85
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e5 e5       	ldi	r30, 0x55	; 85
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	82 60       	ori	r24, 0x02	; 2
    1038:	8c 93       	st	X, r24
    103a:	a5 e5       	ldi	r26, 0x55	; 85
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e5 e5       	ldi	r30, 0x55	; 85
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	81 60       	ori	r24, 0x01	; 1
    1046:	8c 93       	st	X, r24
    1048:	20 c0       	rjmp	.+64     	; 0x108a <EXTI_enuInit+0xf6>
		case ON_CHANGE   :  Clr_bit(MCUCR,MCUCR_ISC01); Set_bit(MCUCR,MCUCR_ISC00); break;
    104a:	a5 e5       	ldi	r26, 0x55	; 85
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e5       	ldi	r30, 0x55	; 85
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8d 7f       	andi	r24, 0xFD	; 253
    1056:	8c 93       	st	X, r24
    1058:	a5 e5       	ldi	r26, 0x55	; 85
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e5 e5       	ldi	r30, 0x55	; 85
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	81 60       	ori	r24, 0x01	; 1
    1064:	8c 93       	st	X, r24
    1066:	11 c0       	rjmp	.+34     	; 0x108a <EXTI_enuInit+0xf6>
		case LOW_LEVEL   :  Clr_bit(MCUCR,MCUCR_ISC01); Clr_bit(MCUCR,MCUCR_ISC00); break;
    1068:	a5 e5       	ldi	r26, 0x55	; 85
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e5 e5       	ldi	r30, 0x55	; 85
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8d 7f       	andi	r24, 0xFD	; 253
    1074:	8c 93       	st	X, r24
    1076:	a5 e5       	ldi	r26, 0x55	; 85
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e5 e5       	ldi	r30, 0x55	; 85
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	8e 7f       	andi	r24, 0xFE	; 254
    1082:	8c 93       	st	X, r24
    1084:	02 c0       	rjmp	.+4      	; 0x108a <EXTI_enuInit+0xf6>
		default : Local_u8ErrorState = ES_UNSUPPORTED_MODE;
    1086:	87 e0       	ldi	r24, 0x07	; 7
    1088:	89 83       	std	Y+1, r24	; 0x01
		}

		/*enable  peripheral interrupt for INT0*/

		Set_bit(GICR,GICR_INT0);
    108a:	ab e5       	ldi	r26, 0x5B	; 91
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	eb e5       	ldi	r30, 0x5B	; 91
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	80 64       	ori	r24, 0x40	; 64
    1096:	8c 93       	st	X, r24
	}

	if(Copy_pstrEXTIConfig[1].EXTI_u8State == ENABLED)
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	9b 81       	ldd	r25, Y+3	; 0x03
    109c:	fc 01       	movw	r30, r24
    109e:	32 96       	adiw	r30, 0x02	; 2
    10a0:	80 81       	ld	r24, Z
    10a2:	89 30       	cpi	r24, 0x09	; 9
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <EXTI_enuInit+0x114>
    10a6:	69 c0       	rjmp	.+210    	; 0x117a <EXTI_enuInit+0x1e6>
	{
		/*set sense control for INT1*/

		switch (Copy_pstrEXTIConfig[1].EXTI_u8Sense)
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	9b 81       	ldd	r25, Y+3	; 0x03
    10ac:	fc 01       	movw	r30, r24
    10ae:	32 96       	adiw	r30, 0x02	; 2
    10b0:	81 81       	ldd	r24, Z+1	; 0x01
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	3f 83       	std	Y+7, r19	; 0x07
    10b8:	2e 83       	std	Y+6, r18	; 0x06
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	9f 81       	ldd	r25, Y+7	; 0x07
    10be:	82 34       	cpi	r24, 0x42	; 66
    10c0:	91 05       	cpc	r25, r1
    10c2:	b1 f0       	breq	.+44     	; 0x10f0 <EXTI_enuInit+0x15c>
    10c4:	2e 81       	ldd	r18, Y+6	; 0x06
    10c6:	3f 81       	ldd	r19, Y+7	; 0x07
    10c8:	23 34       	cpi	r18, 0x43	; 67
    10ca:	31 05       	cpc	r19, r1
    10cc:	5c f4       	brge	.+22     	; 0x10e4 <EXTI_enuInit+0x150>
    10ce:	8e 81       	ldd	r24, Y+6	; 0x06
    10d0:	9f 81       	ldd	r25, Y+7	; 0x07
    10d2:	84 32       	cpi	r24, 0x24	; 36
    10d4:	91 05       	cpc	r25, r1
    10d6:	d9 f0       	breq	.+54     	; 0x110e <EXTI_enuInit+0x17a>
    10d8:	2e 81       	ldd	r18, Y+6	; 0x06
    10da:	3f 81       	ldd	r19, Y+7	; 0x07
    10dc:	28 33       	cpi	r18, 0x38	; 56
    10de:	31 05       	cpc	r19, r1
    10e0:	29 f1       	breq	.+74     	; 0x112c <EXTI_enuInit+0x198>
    10e2:	42 c0       	rjmp	.+132    	; 0x1168 <EXTI_enuInit+0x1d4>
    10e4:	8e 81       	ldd	r24, Y+6	; 0x06
    10e6:	9f 81       	ldd	r25, Y+7	; 0x07
    10e8:	86 35       	cpi	r24, 0x56	; 86
    10ea:	91 05       	cpc	r25, r1
    10ec:	71 f1       	breq	.+92     	; 0x114a <EXTI_enuInit+0x1b6>
    10ee:	3c c0       	rjmp	.+120    	; 0x1168 <EXTI_enuInit+0x1d4>
		{
		case FALLING_EDGE:  Set_bit(MCUCR,MCUCR_ISC11); Clr_bit(MCUCR,MCUCR_ISC10); break;
    10f0:	a5 e5       	ldi	r26, 0x55	; 85
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e5 e5       	ldi	r30, 0x55	; 85
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	88 60       	ori	r24, 0x08	; 8
    10fc:	8c 93       	st	X, r24
    10fe:	a5 e5       	ldi	r26, 0x55	; 85
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e5 e5       	ldi	r30, 0x55	; 85
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8b 7f       	andi	r24, 0xFB	; 251
    110a:	8c 93       	st	X, r24
    110c:	2f c0       	rjmp	.+94     	; 0x116c <EXTI_enuInit+0x1d8>
		case RISING_EDGE :  Set_bit(MCUCR,MCUCR_ISC11); Set_bit(MCUCR,MCUCR_ISC10); break;
    110e:	a5 e5       	ldi	r26, 0x55	; 85
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e5 e5       	ldi	r30, 0x55	; 85
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	88 60       	ori	r24, 0x08	; 8
    111a:	8c 93       	st	X, r24
    111c:	a5 e5       	ldi	r26, 0x55	; 85
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e5       	ldi	r30, 0x55	; 85
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	84 60       	ori	r24, 0x04	; 4
    1128:	8c 93       	st	X, r24
    112a:	20 c0       	rjmp	.+64     	; 0x116c <EXTI_enuInit+0x1d8>
		case ON_CHANGE   :  Clr_bit(MCUCR,MCUCR_ISC11); Set_bit(MCUCR,MCUCR_ISC10); break;
    112c:	a5 e5       	ldi	r26, 0x55	; 85
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e5       	ldi	r30, 0x55	; 85
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	87 7f       	andi	r24, 0xF7	; 247
    1138:	8c 93       	st	X, r24
    113a:	a5 e5       	ldi	r26, 0x55	; 85
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e5 e5       	ldi	r30, 0x55	; 85
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	84 60       	ori	r24, 0x04	; 4
    1146:	8c 93       	st	X, r24
    1148:	11 c0       	rjmp	.+34     	; 0x116c <EXTI_enuInit+0x1d8>
		case LOW_LEVEL   :  Clr_bit(MCUCR,MCUCR_ISC11); Clr_bit(MCUCR,MCUCR_ISC10); break;
    114a:	a5 e5       	ldi	r26, 0x55	; 85
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e5 e5       	ldi	r30, 0x55	; 85
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	87 7f       	andi	r24, 0xF7	; 247
    1156:	8c 93       	st	X, r24
    1158:	a5 e5       	ldi	r26, 0x55	; 85
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e5       	ldi	r30, 0x55	; 85
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	8b 7f       	andi	r24, 0xFB	; 251
    1164:	8c 93       	st	X, r24
    1166:	02 c0       	rjmp	.+4      	; 0x116c <EXTI_enuInit+0x1d8>
		default : Local_u8ErrorState = ES_UNSUPPORTED_MODE;
    1168:	87 e0       	ldi	r24, 0x07	; 7
    116a:	89 83       	std	Y+1, r24	; 0x01
		}

		/*enable  peripheral interrupt for INT1*/

		Set_bit(GICR,GICR_INT1);
    116c:	ab e5       	ldi	r26, 0x5B	; 91
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	eb e5       	ldi	r30, 0x5B	; 91
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	80 68       	ori	r24, 0x80	; 128
    1178:	8c 93       	st	X, r24
	}

	if(Copy_pstrEXTIConfig[2].EXTI_u8State == ENABLED)
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	9b 81       	ldd	r25, Y+3	; 0x03
    117e:	fc 01       	movw	r30, r24
    1180:	34 96       	adiw	r30, 0x04	; 4
    1182:	80 81       	ld	r24, Z
    1184:	89 30       	cpi	r24, 0x09	; 9
    1186:	61 f5       	brne	.+88     	; 0x11e0 <EXTI_enuInit+0x24c>
	{
		/*set sense control for INT2*/

		switch (Copy_pstrEXTIConfig[2].EXTI_u8Sense)
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	9b 81       	ldd	r25, Y+3	; 0x03
    118c:	fc 01       	movw	r30, r24
    118e:	34 96       	adiw	r30, 0x04	; 4
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	3d 83       	std	Y+5, r19	; 0x05
    1198:	2c 83       	std	Y+4, r18	; 0x04
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	9d 81       	ldd	r25, Y+5	; 0x05
    119e:	84 32       	cpi	r24, 0x24	; 36
    11a0:	91 05       	cpc	r25, r1
    11a2:	69 f0       	breq	.+26     	; 0x11be <EXTI_enuInit+0x22a>
    11a4:	2c 81       	ldd	r18, Y+4	; 0x04
    11a6:	3d 81       	ldd	r19, Y+5	; 0x05
    11a8:	22 34       	cpi	r18, 0x42	; 66
    11aa:	31 05       	cpc	r19, r1
    11ac:	81 f4       	brne	.+32     	; 0x11ce <EXTI_enuInit+0x23a>
		{
		case FALLING_EDGE:  Clr_bit(MCUCSR,MCUCSR_ISC2); break;
    11ae:	a4 e5       	ldi	r26, 0x54	; 84
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e4 e5       	ldi	r30, 0x54	; 84
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	8f 7b       	andi	r24, 0xBF	; 191
    11ba:	8c 93       	st	X, r24
    11bc:	0a c0       	rjmp	.+20     	; 0x11d2 <EXTI_enuInit+0x23e>
		case RISING_EDGE :  Set_bit(MCUCSR,MCUCSR_ISC2); break;
    11be:	a4 e5       	ldi	r26, 0x54	; 84
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e4 e5       	ldi	r30, 0x54	; 84
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	80 64       	ori	r24, 0x40	; 64
    11ca:	8c 93       	st	X, r24
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <EXTI_enuInit+0x23e>
		default : Local_u8ErrorState = ES_UNSUPPORTED_MODE;
    11ce:	87 e0       	ldi	r24, 0x07	; 7
    11d0:	89 83       	std	Y+1, r24	; 0x01
		}

		/*enable  peripheral interrupt for INT2*/

		Set_bit(GICR,GICR_INT2);
    11d2:	ab e5       	ldi	r26, 0x5B	; 91
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	eb e5       	ldi	r30, 0x5B	; 91
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	80 62       	ori	r24, 0x20	; 32
    11de:	8c 93       	st	X, r24
	}

	return Local_u8ErrorState;
    11e0:	39 81       	ldd	r19, Y+1	; 0x01
    11e2:	3a 87       	std	Y+10, r19	; 0x0a
    11e4:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    11e6:	2a 96       	adiw	r28, 0x0a	; 10
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <EXTI_enuSetSenseCtrl>:

ES_t EXTI_enuSetSenseCtrl(u8 Copy_u8INTPin, u8 Copy_u8Sense){
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	2b 97       	sbiw	r28, 0x0b	; 11
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	8a 83       	std	Y+2, r24	; 0x02
    120e:	6b 83       	std	Y+3, r22	; 0x03

		ES_t Local_u8ErrorState = ES_OK;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8Sense == LOW_LEVEL)
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	86 35       	cpi	r24, 0x56	; 86
    1218:	c1 f5       	brne	.+112    	; 0x128a <EXTI_enuSetSenseCtrl+0x92>
		{
			switch(Copy_u8INTPin)
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3b 87       	std	Y+11, r19	; 0x0b
    1222:	2a 87       	std	Y+10, r18	; 0x0a
    1224:	8a 85       	ldd	r24, Y+10	; 0x0a
    1226:	9b 85       	ldd	r25, Y+11	; 0x0b
    1228:	82 32       	cpi	r24, 0x22	; 34
    122a:	91 05       	cpc	r25, r1
    122c:	c9 f0       	breq	.+50     	; 0x1260 <EXTI_enuSetSenseCtrl+0x68>
    122e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1230:	3b 85       	ldd	r19, Y+11	; 0x0b
    1232:	23 32       	cpi	r18, 0x23	; 35
    1234:	31 05       	cpc	r19, r1
    1236:	19 f1       	breq	.+70     	; 0x127e <EXTI_enuSetSenseCtrl+0x86>
    1238:	8a 85       	ldd	r24, Y+10	; 0x0a
    123a:	9b 85       	ldd	r25, Y+11	; 0x0b
    123c:	81 32       	cpi	r24, 0x21	; 33
    123e:	91 05       	cpc	r25, r1
    1240:	09 f5       	brne	.+66     	; 0x1284 <EXTI_enuSetSenseCtrl+0x8c>
			{
			case EXTI_INT0 :

				Clr_bit(MCUCR,MCUCR_ISC00);
    1242:	a5 e5       	ldi	r26, 0x55	; 85
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e5 e5       	ldi	r30, 0x55	; 85
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8e 7f       	andi	r24, 0xFE	; 254
    124e:	8c 93       	st	X, r24
				Clr_bit(MCUCR,MCUCR_ISC01);
    1250:	a5 e5       	ldi	r26, 0x55	; 85
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e5 e5       	ldi	r30, 0x55	; 85
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8d 7f       	andi	r24, 0xFD	; 253
    125c:	8c 93       	st	X, r24
    125e:	d2 c0       	rjmp	.+420    	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>
				break;

			case EXTI_INT1 :

				Clr_bit(MCUCR,MCUCR_ISC11);
    1260:	a5 e5       	ldi	r26, 0x55	; 85
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e5 e5       	ldi	r30, 0x55	; 85
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	87 7f       	andi	r24, 0xF7	; 247
    126c:	8c 93       	st	X, r24
				Clr_bit(MCUCR,MCUCR_ISC10);
    126e:	a5 e5       	ldi	r26, 0x55	; 85
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e5 e5       	ldi	r30, 0x55	; 85
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8b 7f       	andi	r24, 0xFB	; 251
    127a:	8c 93       	st	X, r24
    127c:	c3 c0       	rjmp	.+390    	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>
				break;

			case EXTI_INT2 : Local_u8ErrorState = ES_UNSUPPORTED_MODE;
    127e:	87 e0       	ldi	r24, 0x07	; 7
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	c0 c0       	rjmp	.+384    	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>
				break;

			default : Local_u8ErrorState = ES_WEONG_PIN;
    1284:	86 e0       	ldi	r24, 0x06	; 6
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	bd c0       	rjmp	.+378    	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>

			}
		}
		else if(Copy_u8Sense == RISING_EDGE)
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	84 32       	cpi	r24, 0x24	; 36
    128e:	e9 f5       	brne	.+122    	; 0x130a <EXTI_enuSetSenseCtrl+0x112>
		{
			switch(Copy_u8INTPin)
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	39 87       	std	Y+9, r19	; 0x09
    1298:	28 87       	std	Y+8, r18	; 0x08
    129a:	88 85       	ldd	r24, Y+8	; 0x08
    129c:	99 85       	ldd	r25, Y+9	; 0x09
    129e:	82 32       	cpi	r24, 0x22	; 34
    12a0:	91 05       	cpc	r25, r1
    12a2:	c9 f0       	breq	.+50     	; 0x12d6 <EXTI_enuSetSenseCtrl+0xde>
    12a4:	28 85       	ldd	r18, Y+8	; 0x08
    12a6:	39 85       	ldd	r19, Y+9	; 0x09
    12a8:	23 32       	cpi	r18, 0x23	; 35
    12aa:	31 05       	cpc	r19, r1
    12ac:	19 f1       	breq	.+70     	; 0x12f4 <EXTI_enuSetSenseCtrl+0xfc>
    12ae:	88 85       	ldd	r24, Y+8	; 0x08
    12b0:	99 85       	ldd	r25, Y+9	; 0x09
    12b2:	81 32       	cpi	r24, 0x21	; 33
    12b4:	91 05       	cpc	r25, r1
    12b6:	31 f5       	brne	.+76     	; 0x1304 <EXTI_enuSetSenseCtrl+0x10c>
			{
			case EXTI_INT0 :

				Set_bit(MCUCR,MCUCR_ISC01);
    12b8:	a5 e5       	ldi	r26, 0x55	; 85
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e5 e5       	ldi	r30, 0x55	; 85
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	82 60       	ori	r24, 0x02	; 2
    12c4:	8c 93       	st	X, r24
				Set_bit(MCUCR,MCUCR_ISC00);
    12c6:	a5 e5       	ldi	r26, 0x55	; 85
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e5 e5       	ldi	r30, 0x55	; 85
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	81 60       	ori	r24, 0x01	; 1
    12d2:	8c 93       	st	X, r24
    12d4:	97 c0       	rjmp	.+302    	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>
				break;

			case EXTI_INT1 :

				Set_bit(MCUCR,MCUCR_ISC11);
    12d6:	a5 e5       	ldi	r26, 0x55	; 85
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e5 e5       	ldi	r30, 0x55	; 85
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	88 60       	ori	r24, 0x08	; 8
    12e2:	8c 93       	st	X, r24
				Set_bit(MCUCR,MCUCR_ISC10);
    12e4:	a5 e5       	ldi	r26, 0x55	; 85
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e5 e5       	ldi	r30, 0x55	; 85
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	84 60       	ori	r24, 0x04	; 4
    12f0:	8c 93       	st	X, r24
    12f2:	88 c0       	rjmp	.+272    	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>
				break;

			case EXTI_INT2 :

				Set_bit(MCUCSR,MCUCSR_ISC2);
    12f4:	a4 e5       	ldi	r26, 0x54	; 84
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e4 e5       	ldi	r30, 0x54	; 84
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 64       	ori	r24, 0x40	; 64
    1300:	8c 93       	st	X, r24
    1302:	80 c0       	rjmp	.+256    	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>
				break;

			default : Local_u8ErrorState = ES_WEONG_PIN;
    1304:	86 e0       	ldi	r24, 0x06	; 6
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	7d c0       	rjmp	.+250    	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>

			}
		}
		else if(Copy_u8Sense == FALLING_EDGE)
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	82 34       	cpi	r24, 0x42	; 66
    130e:	e9 f5       	brne	.+122    	; 0x138a <EXTI_enuSetSenseCtrl+0x192>
		{
			switch(Copy_u8INTPin)
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	3f 83       	std	Y+7, r19	; 0x07
    1318:	2e 83       	std	Y+6, r18	; 0x06
    131a:	8e 81       	ldd	r24, Y+6	; 0x06
    131c:	9f 81       	ldd	r25, Y+7	; 0x07
    131e:	82 32       	cpi	r24, 0x22	; 34
    1320:	91 05       	cpc	r25, r1
    1322:	c9 f0       	breq	.+50     	; 0x1356 <EXTI_enuSetSenseCtrl+0x15e>
    1324:	2e 81       	ldd	r18, Y+6	; 0x06
    1326:	3f 81       	ldd	r19, Y+7	; 0x07
    1328:	23 32       	cpi	r18, 0x23	; 35
    132a:	31 05       	cpc	r19, r1
    132c:	19 f1       	breq	.+70     	; 0x1374 <EXTI_enuSetSenseCtrl+0x17c>
    132e:	8e 81       	ldd	r24, Y+6	; 0x06
    1330:	9f 81       	ldd	r25, Y+7	; 0x07
    1332:	81 32       	cpi	r24, 0x21	; 33
    1334:	91 05       	cpc	r25, r1
    1336:	31 f5       	brne	.+76     	; 0x1384 <EXTI_enuSetSenseCtrl+0x18c>
			{
			case EXTI_INT0 :

				Set_bit(MCUCR,MCUCR_ISC01);
    1338:	a5 e5       	ldi	r26, 0x55	; 85
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e5 e5       	ldi	r30, 0x55	; 85
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	82 60       	ori	r24, 0x02	; 2
    1344:	8c 93       	st	X, r24
				Clr_bit(MCUCR,MCUCR_ISC00);
    1346:	a5 e5       	ldi	r26, 0x55	; 85
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e5 e5       	ldi	r30, 0x55	; 85
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8e 7f       	andi	r24, 0xFE	; 254
    1352:	8c 93       	st	X, r24
    1354:	57 c0       	rjmp	.+174    	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>
				break;
			case EXTI_INT1 :

				Set_bit(MCUCR,MCUCR_ISC11);
    1356:	a5 e5       	ldi	r26, 0x55	; 85
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e5 e5       	ldi	r30, 0x55	; 85
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	88 60       	ori	r24, 0x08	; 8
    1362:	8c 93       	st	X, r24
				Clr_bit(MCUCR,MCUCR_ISC10);
    1364:	a5 e5       	ldi	r26, 0x55	; 85
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e5 e5       	ldi	r30, 0x55	; 85
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	8b 7f       	andi	r24, 0xFB	; 251
    1370:	8c 93       	st	X, r24
    1372:	48 c0       	rjmp	.+144    	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>
				break;

			case EXTI_INT2 :

				Clr_bit(MCUCSR,MCUCSR_ISC2);
    1374:	a4 e5       	ldi	r26, 0x54	; 84
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e4 e5       	ldi	r30, 0x54	; 84
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	8f 7b       	andi	r24, 0xBF	; 191
    1380:	8c 93       	st	X, r24
    1382:	40 c0       	rjmp	.+128    	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>
				break;

			default : Local_u8ErrorState = ES_WEONG_PIN;
    1384:	86 e0       	ldi	r24, 0x06	; 6
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	3d c0       	rjmp	.+122    	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>

			}
		}
		else if(Copy_u8Sense == ON_CHANGE)
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	88 33       	cpi	r24, 0x38	; 56
    138e:	c1 f5       	brne	.+112    	; 0x1400 <EXTI_enuSetSenseCtrl+0x208>
		{
			switch(Copy_u8INTPin)
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	3d 83       	std	Y+5, r19	; 0x05
    1398:	2c 83       	std	Y+4, r18	; 0x04
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	82 32       	cpi	r24, 0x22	; 34
    13a0:	91 05       	cpc	r25, r1
    13a2:	c9 f0       	breq	.+50     	; 0x13d6 <EXTI_enuSetSenseCtrl+0x1de>
    13a4:	2c 81       	ldd	r18, Y+4	; 0x04
    13a6:	3d 81       	ldd	r19, Y+5	; 0x05
    13a8:	23 32       	cpi	r18, 0x23	; 35
    13aa:	31 05       	cpc	r19, r1
    13ac:	19 f1       	breq	.+70     	; 0x13f4 <EXTI_enuSetSenseCtrl+0x1fc>
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	81 32       	cpi	r24, 0x21	; 33
    13b4:	91 05       	cpc	r25, r1
    13b6:	09 f5       	brne	.+66     	; 0x13fa <EXTI_enuSetSenseCtrl+0x202>
			{
			case EXTI_INT0 :

				Clr_bit(MCUCR,MCUCR_ISC01);
    13b8:	a5 e5       	ldi	r26, 0x55	; 85
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e5 e5       	ldi	r30, 0x55	; 85
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8d 7f       	andi	r24, 0xFD	; 253
    13c4:	8c 93       	st	X, r24
				Set_bit(MCUCR,MCUCR_ISC00);
    13c6:	a5 e5       	ldi	r26, 0x55	; 85
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e5 e5       	ldi	r30, 0x55	; 85
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	81 60       	ori	r24, 0x01	; 1
    13d2:	8c 93       	st	X, r24
    13d4:	17 c0       	rjmp	.+46     	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>
				break;

			case EXTI_INT1 :

				Clr_bit(MCUCR,MCUCR_ISC11);
    13d6:	a5 e5       	ldi	r26, 0x55	; 85
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e5       	ldi	r30, 0x55	; 85
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	87 7f       	andi	r24, 0xF7	; 247
    13e2:	8c 93       	st	X, r24
				Set_bit(MCUCR,MCUCR_ISC10);
    13e4:	a5 e5       	ldi	r26, 0x55	; 85
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e5       	ldi	r30, 0x55	; 85
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	84 60       	ori	r24, 0x04	; 4
    13f0:	8c 93       	st	X, r24
    13f2:	08 c0       	rjmp	.+16     	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>
				break;

			case EXTI_INT2 :
				Local_u8ErrorState = ES_UNSUPPORTED_MODE;
    13f4:	87 e0       	ldi	r24, 0x07	; 7
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>
				break;

			default : Local_u8ErrorState = ES_WEONG_PIN;
    13fa:	86 e0       	ldi	r24, 0x06	; 6
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <EXTI_enuSetSenseCtrl+0x20c>
			}
		}
		else {
			Local_u8ErrorState = ES_WRONG_TYPE;
    1400:	84 e0       	ldi	r24, 0x04	; 4
    1402:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_u8ErrorState;
    1404:	89 81       	ldd	r24, Y+1	; 0x01
}
    1406:	2b 96       	adiw	r28, 0x0b	; 11
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <EXTI_enuIntEnable>:




ES_t EXTI_enuIntEnable(u8 Copy_u8INTPin){
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <EXTI_enuIntEnable+0x6>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <EXTI_enuIntEnable+0x8>
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_u8ErrorState = ES_NOK;
    1426:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8INTPin)
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3c 83       	std	Y+4, r19	; 0x04
    1430:	2b 83       	std	Y+3, r18	; 0x03
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	82 32       	cpi	r24, 0x22	; 34
    1438:	91 05       	cpc	r25, r1
    143a:	a1 f0       	breq	.+40     	; 0x1464 <EXTI_enuIntEnable+0x4c>
    143c:	2b 81       	ldd	r18, Y+3	; 0x03
    143e:	3c 81       	ldd	r19, Y+4	; 0x04
    1440:	23 32       	cpi	r18, 0x23	; 35
    1442:	31 05       	cpc	r19, r1
    1444:	c9 f0       	breq	.+50     	; 0x1478 <EXTI_enuIntEnable+0x60>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	81 32       	cpi	r24, 0x21	; 33
    144c:	91 05       	cpc	r25, r1
    144e:	f1 f4       	brne	.+60     	; 0x148c <EXTI_enuIntEnable+0x74>
	{
	case EXTI_INT0 :

		Set_bit(GICR,GICR_INT0);
    1450:	ab e5       	ldi	r26, 0x5B	; 91
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	eb e5       	ldi	r30, 0x5B	; 91
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 64       	ori	r24, 0x40	; 64
    145c:	8c 93       	st	X, r24
		Local_u8ErrorState = ES_OK;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	16 c0       	rjmp	.+44     	; 0x1490 <EXTI_enuIntEnable+0x78>
		break;

	case EXTI_INT1 :

		Set_bit(GICR,GICR_INT1);
    1464:	ab e5       	ldi	r26, 0x5B	; 91
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	eb e5       	ldi	r30, 0x5B	; 91
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	80 68       	ori	r24, 0x80	; 128
    1470:	8c 93       	st	X, r24
		Local_u8ErrorState = ES_OK;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	0c c0       	rjmp	.+24     	; 0x1490 <EXTI_enuIntEnable+0x78>
		break;

	case EXTI_INT2 :

		Set_bit(GICR,GICR_INT2);
    1478:	ab e5       	ldi	r26, 0x5B	; 91
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	eb e5       	ldi	r30, 0x5B	; 91
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	80 62       	ori	r24, 0x20	; 32
    1484:	8c 93       	st	X, r24
		Local_u8ErrorState = ES_OK;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <EXTI_enuIntEnable+0x78>
		break;

	default : Local_u8ErrorState = ES_WEONG_PIN;
    148c:	86 e0       	ldi	r24, 0x06	; 6
    148e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1490:	89 81       	ldd	r24, Y+1	; 0x01
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <EXTI_enuIntDisable>:



ES_t EXTI_enuIntDisable(u8 Copy_u8INTPin){
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <EXTI_enuIntDisable+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <EXTI_enuIntDisable+0x8>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_u8ErrorState = ES_NOK;
    14ae:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8INTPin)
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3c 83       	std	Y+4, r19	; 0x04
    14b8:	2b 83       	std	Y+3, r18	; 0x03
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	82 32       	cpi	r24, 0x22	; 34
    14c0:	91 05       	cpc	r25, r1
    14c2:	a1 f0       	breq	.+40     	; 0x14ec <EXTI_enuIntDisable+0x4c>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	23 32       	cpi	r18, 0x23	; 35
    14ca:	31 05       	cpc	r19, r1
    14cc:	c9 f0       	breq	.+50     	; 0x1500 <EXTI_enuIntDisable+0x60>
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	81 32       	cpi	r24, 0x21	; 33
    14d4:	91 05       	cpc	r25, r1
    14d6:	f1 f4       	brne	.+60     	; 0x1514 <EXTI_enuIntDisable+0x74>
	{
	case EXTI_INT0 :

		Clr_bit(GICR,GICR_INT0);
    14d8:	ab e5       	ldi	r26, 0x5B	; 91
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	eb e5       	ldi	r30, 0x5B	; 91
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 7b       	andi	r24, 0xBF	; 191
    14e4:	8c 93       	st	X, r24
		Local_u8ErrorState = ES_OK;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	16 c0       	rjmp	.+44     	; 0x1518 <EXTI_enuIntDisable+0x78>
		break;

	case EXTI_INT1 :

		Clr_bit(GICR,GICR_INT1);
    14ec:	ab e5       	ldi	r26, 0x5B	; 91
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	eb e5       	ldi	r30, 0x5B	; 91
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	8f 77       	andi	r24, 0x7F	; 127
    14f8:	8c 93       	st	X, r24
		Local_u8ErrorState = ES_OK;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	0c c0       	rjmp	.+24     	; 0x1518 <EXTI_enuIntDisable+0x78>
		break;

	case EXTI_INT2 :

		Clr_bit(GICR,GICR_INT2);
    1500:	ab e5       	ldi	r26, 0x5B	; 91
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	eb e5       	ldi	r30, 0x5B	; 91
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	8f 7d       	andi	r24, 0xDF	; 223
    150c:	8c 93       	st	X, r24
		Local_u8ErrorState = ES_OK;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <EXTI_enuIntDisable+0x78>
		break;

	default : Local_u8ErrorState = ES_WEONG_PIN;
    1514:	86 e0       	ldi	r24, 0x06	; 6
    1516:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1518:	89 81       	ldd	r24, Y+1	; 0x01

}
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <EXIT_enuINT0SetCallBack>:

ES_t EXIT_enuINT0SetCallBack(void(*Copy_pvUserISR)(void))
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <EXIT_enuINT0SetCallBack+0x6>
    152e:	0f 92       	push	r0
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	9b 83       	std	Y+3, r25	; 0x03
    1536:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    1538:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvUserISR != NULL)
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	9b 81       	ldd	r25, Y+3	; 0x03
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	49 f0       	breq	.+18     	; 0x1554 <EXIT_enuINT0SetCallBack+0x2c>
	{
		Global_pvEXTI_INT0_ADD = Copy_pvUserISR;
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	9b 81       	ldd	r25, Y+3	; 0x03
    1546:	90 93 63 02 	sts	0x0263, r25
    154a:	80 93 62 02 	sts	0x0262, r24
		Local_u8ErrorState = ES_OK;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <EXIT_enuINT0SetCallBack+0x30>
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1558:	89 81       	ldd	r24, Y+1	; 0x01
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <EXIT_enuINT1SetCallBack>:

ES_t EXIT_enuINT1SetCallBack(void(*Copy_pvUserISR)(void))
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <EXIT_enuINT1SetCallBack+0x6>
    156c:	0f 92       	push	r0
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	9b 83       	std	Y+3, r25	; 0x03
    1574:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    1576:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvUserISR != NULL)
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	9b 81       	ldd	r25, Y+3	; 0x03
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	49 f0       	breq	.+18     	; 0x1592 <EXIT_enuINT1SetCallBack+0x2c>
	{
		Global_pvEXTI_INT1_ADD = Copy_pvUserISR;
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	9b 81       	ldd	r25, Y+3	; 0x03
    1584:	90 93 65 02 	sts	0x0265, r25
    1588:	80 93 64 02 	sts	0x0264, r24
		Local_u8ErrorState = ES_OK;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <EXIT_enuINT1SetCallBack+0x30>
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1596:	89 81       	ldd	r24, Y+1	; 0x01
}
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <EXIT_enuINT2SetCallBack>:

ES_t EXIT_enuINT2SetCallBack(void(*Copy_pvUserISR)(void))
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <EXIT_enuINT2SetCallBack+0x6>
    15aa:	0f 92       	push	r0
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	9b 83       	std	Y+3, r25	; 0x03
    15b2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_NOK;
    15b4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvUserISR != NULL)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	49 f0       	breq	.+18     	; 0x15d0 <EXIT_enuINT2SetCallBack+0x2c>
	{
		Global_pvEXTI_INT2_ADD = Copy_pvUserISR;
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	9b 81       	ldd	r25, Y+3	; 0x03
    15c2:	90 93 67 02 	sts	0x0267, r25
    15c6:	80 93 66 02 	sts	0x0266, r24
		Local_u8ErrorState = ES_OK;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <EXIT_enuINT2SetCallBack+0x30>
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <__vector_1>:


/*ISR for INT0*/
void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    15e2:	1f 92       	push	r1
    15e4:	0f 92       	push	r0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	0f 92       	push	r0
    15ea:	11 24       	eor	r1, r1
    15ec:	2f 93       	push	r18
    15ee:	3f 93       	push	r19
    15f0:	4f 93       	push	r20
    15f2:	5f 93       	push	r21
    15f4:	6f 93       	push	r22
    15f6:	7f 93       	push	r23
    15f8:	8f 93       	push	r24
    15fa:	9f 93       	push	r25
    15fc:	af 93       	push	r26
    15fe:	bf 93       	push	r27
    1600:	ef 93       	push	r30
    1602:	ff 93       	push	r31
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvEXTI_INT0_ADD!=NULL) Global_pvEXTI_INT0_ADD();
    160c:	80 91 62 02 	lds	r24, 0x0262
    1610:	90 91 63 02 	lds	r25, 0x0263
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	29 f0       	breq	.+10     	; 0x1622 <__vector_1+0x40>
    1618:	e0 91 62 02 	lds	r30, 0x0262
    161c:	f0 91 63 02 	lds	r31, 0x0263
    1620:	09 95       	icall
}
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	ff 91       	pop	r31
    1628:	ef 91       	pop	r30
    162a:	bf 91       	pop	r27
    162c:	af 91       	pop	r26
    162e:	9f 91       	pop	r25
    1630:	8f 91       	pop	r24
    1632:	7f 91       	pop	r23
    1634:	6f 91       	pop	r22
    1636:	5f 91       	pop	r21
    1638:	4f 91       	pop	r20
    163a:	3f 91       	pop	r19
    163c:	2f 91       	pop	r18
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	0f 90       	pop	r0
    1644:	1f 90       	pop	r1
    1646:	18 95       	reti

00001648 <__vector_2>:


/*ISR for INT1*/
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    1648:	1f 92       	push	r1
    164a:	0f 92       	push	r0
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	0f 92       	push	r0
    1650:	11 24       	eor	r1, r1
    1652:	2f 93       	push	r18
    1654:	3f 93       	push	r19
    1656:	4f 93       	push	r20
    1658:	5f 93       	push	r21
    165a:	6f 93       	push	r22
    165c:	7f 93       	push	r23
    165e:	8f 93       	push	r24
    1660:	9f 93       	push	r25
    1662:	af 93       	push	r26
    1664:	bf 93       	push	r27
    1666:	ef 93       	push	r30
    1668:	ff 93       	push	r31
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvEXTI_INT1_ADD!=NULL) Global_pvEXTI_INT1_ADD();
    1672:	80 91 64 02 	lds	r24, 0x0264
    1676:	90 91 65 02 	lds	r25, 0x0265
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	29 f0       	breq	.+10     	; 0x1688 <__vector_2+0x40>
    167e:	e0 91 64 02 	lds	r30, 0x0264
    1682:	f0 91 65 02 	lds	r31, 0x0265
    1686:	09 95       	icall
}
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	ff 91       	pop	r31
    168e:	ef 91       	pop	r30
    1690:	bf 91       	pop	r27
    1692:	af 91       	pop	r26
    1694:	9f 91       	pop	r25
    1696:	8f 91       	pop	r24
    1698:	7f 91       	pop	r23
    169a:	6f 91       	pop	r22
    169c:	5f 91       	pop	r21
    169e:	4f 91       	pop	r20
    16a0:	3f 91       	pop	r19
    16a2:	2f 91       	pop	r18
    16a4:	0f 90       	pop	r0
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	0f 90       	pop	r0
    16aa:	1f 90       	pop	r1
    16ac:	18 95       	reti

000016ae <__vector_3>:


/*ISR for INT2*/
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    16ae:	1f 92       	push	r1
    16b0:	0f 92       	push	r0
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	0f 92       	push	r0
    16b6:	11 24       	eor	r1, r1
    16b8:	2f 93       	push	r18
    16ba:	3f 93       	push	r19
    16bc:	4f 93       	push	r20
    16be:	5f 93       	push	r21
    16c0:	6f 93       	push	r22
    16c2:	7f 93       	push	r23
    16c4:	8f 93       	push	r24
    16c6:	9f 93       	push	r25
    16c8:	af 93       	push	r26
    16ca:	bf 93       	push	r27
    16cc:	ef 93       	push	r30
    16ce:	ff 93       	push	r31
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvEXTI_INT2_ADD!=NULL) Global_pvEXTI_INT2_ADD();
    16d8:	80 91 66 02 	lds	r24, 0x0266
    16dc:	90 91 67 02 	lds	r25, 0x0267
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	29 f0       	breq	.+10     	; 0x16ee <__vector_3+0x40>
    16e4:	e0 91 66 02 	lds	r30, 0x0266
    16e8:	f0 91 67 02 	lds	r31, 0x0267
    16ec:	09 95       	icall
}
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	ff 91       	pop	r31
    16f4:	ef 91       	pop	r30
    16f6:	bf 91       	pop	r27
    16f8:	af 91       	pop	r26
    16fa:	9f 91       	pop	r25
    16fc:	8f 91       	pop	r24
    16fe:	7f 91       	pop	r23
    1700:	6f 91       	pop	r22
    1702:	5f 91       	pop	r21
    1704:	4f 91       	pop	r20
    1706:	3f 91       	pop	r19
    1708:	2f 91       	pop	r18
    170a:	0f 90       	pop	r0
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	0f 90       	pop	r0
    1710:	1f 90       	pop	r1
    1712:	18 95       	reti

00001714 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void){
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	0f 92       	push	r0
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_enuErrorState = ES_NOK;
    171e:	19 82       	std	Y+1, r1	; 0x01
	DDRA = CONC(PA_PIN7_DIR , PA_PIN6_DIR , PA_PIN5_DIR , PA_PIN4_DIR , PA_PIN3_DIR , PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    1720:	ea e3       	ldi	r30, 0x3A	; 58
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	10 82       	st	Z, r1
	DDRB = CONC(PB_PIN7_DIR , PB_PIN6_DIR , PB_PIN5_DIR , PB_PIN4_DIR , PB_PIN3_DIR , PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    1726:	e7 e3       	ldi	r30, 0x37	; 55
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	83 e0       	ldi	r24, 0x03	; 3
    172c:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR , PC_PIN6_DIR , PC_PIN5_DIR , PC_PIN4_DIR , PC_PIN3_DIR , PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    172e:	e4 e3       	ldi	r30, 0x34	; 52
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	8f ef       	ldi	r24, 0xFF	; 255
    1734:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR , PD_PIN6_DIR , PD_PIN5_DIR , PD_PIN4_DIR , PD_PIN3_DIR , PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    1736:	e1 e3       	ldi	r30, 0x31	; 49
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	83 e9       	ldi	r24, 0x93	; 147
    173c:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL , PA_PIN6_VAL , PA_PIN5_VAL , PA_PIN4_VAL , PA_PIN3_VAL , PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    173e:	eb e3       	ldi	r30, 0x3B	; 59
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 ee       	ldi	r24, 0xE0	; 224
    1744:	80 83       	st	Z, r24
	PORTB = CONC(PB_PIN7_VAL , PB_PIN6_VAL , PB_PIN5_VAL , PB_PIN4_VAL , PB_PIN3_VAL , PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    1746:	e8 e3       	ldi	r30, 0x38	; 56
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	8e ed       	ldi	r24, 0xDE	; 222
    174c:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_VAL , PC_PIN6_VAL , PC_PIN5_VAL , PC_PIN4_VAL , PC_PIN3_VAL , PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    174e:	e5 e3       	ldi	r30, 0x35	; 53
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	89 e5       	ldi	r24, 0x59	; 89
    1754:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL , PD_PIN6_VAL , PD_PIN5_VAL , PD_PIN4_VAL , PD_PIN3_VAL , PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    1756:	e2 e3       	ldi	r30, 0x32	; 50
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	8e e5       	ldi	r24, 0x5E	; 94
    175c:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1762:	89 81       	ldd	r24, Y+1	; 0x01
}
    1764:	0f 90       	pop	r0
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <DIO_enuSetPortDir>:


ES_t DIO_enuSetPortDir (u8 Copy_u8PortID , u8 Copy_u8Val ){
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	00 d0       	rcall	.+0      	; 0x1772 <DIO_enuSetPortDir+0x6>
    1772:	00 d0       	rcall	.+0      	; 0x1774 <DIO_enuSetPortDir+0x8>
    1774:	0f 92       	push	r0
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	8a 83       	std	Y+2, r24	; 0x02
    177c:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    177e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	84 30       	cpi	r24, 0x04	; 4
    1784:	a8 f5       	brcc	.+106    	; 0x17f0 <DIO_enuSetPortDir+0x84>
	{
		switch(Copy_u8PortID)
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	3d 83       	std	Y+5, r19	; 0x05
    178e:	2c 83       	std	Y+4, r18	; 0x04
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	9d 81       	ldd	r25, Y+5	; 0x05
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	91 05       	cpc	r25, r1
    1798:	d1 f0       	breq	.+52     	; 0x17ce <DIO_enuSetPortDir+0x62>
    179a:	2c 81       	ldd	r18, Y+4	; 0x04
    179c:	3d 81       	ldd	r19, Y+5	; 0x05
    179e:	22 30       	cpi	r18, 0x02	; 2
    17a0:	31 05       	cpc	r19, r1
    17a2:	2c f4       	brge	.+10     	; 0x17ae <DIO_enuSetPortDir+0x42>
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	61 f0       	breq	.+24     	; 0x17c4 <DIO_enuSetPortDir+0x58>
    17ac:	1e c0       	rjmp	.+60     	; 0x17ea <DIO_enuSetPortDir+0x7e>
    17ae:	2c 81       	ldd	r18, Y+4	; 0x04
    17b0:	3d 81       	ldd	r19, Y+5	; 0x05
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	81 f0       	breq	.+32     	; 0x17d8 <DIO_enuSetPortDir+0x6c>
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	9d 81       	ldd	r25, Y+5	; 0x05
    17bc:	83 30       	cpi	r24, 0x03	; 3
    17be:	91 05       	cpc	r25, r1
    17c0:	81 f0       	breq	.+32     	; 0x17e2 <DIO_enuSetPortDir+0x76>
    17c2:	13 c0       	rjmp	.+38     	; 0x17ea <DIO_enuSetPortDir+0x7e>
		{
		case DIO_PORTA :
			DDRA = Copy_u8Val;
    17c4:	ea e3       	ldi	r30, 0x3A	; 58
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	80 83       	st	Z, r24
    17cc:	0e c0       	rjmp	.+28     	; 0x17ea <DIO_enuSetPortDir+0x7e>
			break;
		case DIO_PORTB :
			DDRB = Copy_u8Val;
    17ce:	e7 e3       	ldi	r30, 0x37	; 55
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	80 83       	st	Z, r24
    17d6:	09 c0       	rjmp	.+18     	; 0x17ea <DIO_enuSetPortDir+0x7e>
			break;
		case DIO_PORTC :
			DDRC = Copy_u8Val;
    17d8:	e4 e3       	ldi	r30, 0x34	; 52
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	80 83       	st	Z, r24
    17e0:	04 c0       	rjmp	.+8      	; 0x17ea <DIO_enuSetPortDir+0x7e>
			break;
		case DIO_PORTD :
			DDRD = Copy_u8Val;
    17e2:	e1 e3       	ldi	r30, 0x31	; 49
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <DIO_enuSetPortDir+0x88>

	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
    17f0:	83 e0       	ldi	r24, 0x03	; 3
    17f2:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <DIO_enuSetPortVal>:


ES_t DIO_enuSetPortVal( u8 Copy_u8PortID , u8 Copy_u8Val ){
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	00 d0       	rcall	.+0      	; 0x180c <DIO_enuSetPortVal+0x6>
    180c:	00 d0       	rcall	.+0      	; 0x180e <DIO_enuSetPortVal+0x8>
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	8a 83       	std	Y+2, r24	; 0x02
    1816:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    1818:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	84 30       	cpi	r24, 0x04	; 4
    181e:	a8 f5       	brcc	.+106    	; 0x188a <DIO_enuSetPortVal+0x84>
	{
		switch(Copy_u8PortID)
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	3d 83       	std	Y+5, r19	; 0x05
    1828:	2c 83       	std	Y+4, r18	; 0x04
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	9d 81       	ldd	r25, Y+5	; 0x05
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	91 05       	cpc	r25, r1
    1832:	d1 f0       	breq	.+52     	; 0x1868 <DIO_enuSetPortVal+0x62>
    1834:	2c 81       	ldd	r18, Y+4	; 0x04
    1836:	3d 81       	ldd	r19, Y+5	; 0x05
    1838:	22 30       	cpi	r18, 0x02	; 2
    183a:	31 05       	cpc	r19, r1
    183c:	2c f4       	brge	.+10     	; 0x1848 <DIO_enuSetPortVal+0x42>
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	9d 81       	ldd	r25, Y+5	; 0x05
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	61 f0       	breq	.+24     	; 0x185e <DIO_enuSetPortVal+0x58>
    1846:	1e c0       	rjmp	.+60     	; 0x1884 <DIO_enuSetPortVal+0x7e>
    1848:	2c 81       	ldd	r18, Y+4	; 0x04
    184a:	3d 81       	ldd	r19, Y+5	; 0x05
    184c:	22 30       	cpi	r18, 0x02	; 2
    184e:	31 05       	cpc	r19, r1
    1850:	81 f0       	breq	.+32     	; 0x1872 <DIO_enuSetPortVal+0x6c>
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	9d 81       	ldd	r25, Y+5	; 0x05
    1856:	83 30       	cpi	r24, 0x03	; 3
    1858:	91 05       	cpc	r25, r1
    185a:	81 f0       	breq	.+32     	; 0x187c <DIO_enuSetPortVal+0x76>
    185c:	13 c0       	rjmp	.+38     	; 0x1884 <DIO_enuSetPortVal+0x7e>
		{
		case DIO_PORTA :
			PORTA = Copy_u8Val;
    185e:	eb e3       	ldi	r30, 0x3B	; 59
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	80 83       	st	Z, r24
    1866:	0e c0       	rjmp	.+28     	; 0x1884 <DIO_enuSetPortVal+0x7e>
			break;
		case DIO_PORTB :
			PORTB = Copy_u8Val;
    1868:	e8 e3       	ldi	r30, 0x38	; 56
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	80 83       	st	Z, r24
    1870:	09 c0       	rjmp	.+18     	; 0x1884 <DIO_enuSetPortVal+0x7e>
			break;
		case DIO_PORTC :
			PORTC = Copy_u8Val;
    1872:	e5 e3       	ldi	r30, 0x35	; 53
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	80 83       	st	Z, r24
    187a:	04 c0       	rjmp	.+8      	; 0x1884 <DIO_enuSetPortVal+0x7e>
			break;
		case DIO_PORTD :
			PORTD = Copy_u8Val;
    187c:	e2 e3       	ldi	r30, 0x32	; 50
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	80 83       	st	Z, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	02 c0       	rjmp	.+4      	; 0x188e <DIO_enuSetPortVal+0x88>
	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    188e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <DIO_enuTogglePort>:


ES_t DIO_enuTogglePort( u8 Copy_u8PortID ){
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <DIO_enuTogglePort+0x6>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <DIO_enuTogglePort+0x8>
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	8a 83       	std	Y+2, r24	; 0x02

	ES_t Local_enuErrorState = ES_NOK;
    18ae:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	84 30       	cpi	r24, 0x04	; 4
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <DIO_enuTogglePort+0x18>
    18b6:	41 c0       	rjmp	.+130    	; 0x193a <DIO_enuTogglePort+0x9a>
	{
		switch(Copy_u8PortID)
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	3c 83       	std	Y+4, r19	; 0x04
    18c0:	2b 83       	std	Y+3, r18	; 0x03
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	91 05       	cpc	r25, r1
    18ca:	e9 f0       	breq	.+58     	; 0x1906 <DIO_enuTogglePort+0x66>
    18cc:	2b 81       	ldd	r18, Y+3	; 0x03
    18ce:	3c 81       	ldd	r19, Y+4	; 0x04
    18d0:	22 30       	cpi	r18, 0x02	; 2
    18d2:	31 05       	cpc	r19, r1
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <DIO_enuTogglePort+0x40>
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	61 f0       	breq	.+24     	; 0x18f6 <DIO_enuTogglePort+0x56>
    18de:	2a c0       	rjmp	.+84     	; 0x1934 <DIO_enuTogglePort+0x94>
    18e0:	2b 81       	ldd	r18, Y+3	; 0x03
    18e2:	3c 81       	ldd	r19, Y+4	; 0x04
    18e4:	22 30       	cpi	r18, 0x02	; 2
    18e6:	31 05       	cpc	r19, r1
    18e8:	b1 f0       	breq	.+44     	; 0x1916 <DIO_enuTogglePort+0x76>
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	83 30       	cpi	r24, 0x03	; 3
    18f0:	91 05       	cpc	r25, r1
    18f2:	c9 f0       	breq	.+50     	; 0x1926 <DIO_enuTogglePort+0x86>
    18f4:	1f c0       	rjmp	.+62     	; 0x1934 <DIO_enuTogglePort+0x94>
		{
		case DIO_PORTA :
			PORTA = ~PORTA;
    18f6:	ab e3       	ldi	r26, 0x3B	; 59
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	eb e3       	ldi	r30, 0x3B	; 59
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	80 95       	com	r24
    1902:	8c 93       	st	X, r24
    1904:	17 c0       	rjmp	.+46     	; 0x1934 <DIO_enuTogglePort+0x94>
			break;
		case DIO_PORTB :
			PORTB = ~PORTB;
    1906:	a8 e3       	ldi	r26, 0x38	; 56
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e8 e3       	ldi	r30, 0x38	; 56
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	80 95       	com	r24
    1912:	8c 93       	st	X, r24
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <DIO_enuTogglePort+0x94>
			break;
		case DIO_PORTC :
			PORTC = ~PORTC;
    1916:	a5 e3       	ldi	r26, 0x35	; 53
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e5 e3       	ldi	r30, 0x35	; 53
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	80 95       	com	r24
    1922:	8c 93       	st	X, r24
    1924:	07 c0       	rjmp	.+14     	; 0x1934 <DIO_enuTogglePort+0x94>
			break;
		case DIO_PORTD :
			PORTD = ~PORTD;
    1926:	a2 e3       	ldi	r26, 0x32	; 50
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e2 e3       	ldi	r30, 0x32	; 50
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	80 95       	com	r24
    1932:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_enuTogglePort+0x9e>
	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
    193a:	83 e0       	ldi	r24, 0x03	; 3
    193c:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <DIO_enuGetPortVal>:


ES_t DIO_enuGetPortVal( u8 Copy_u8PortID , u8* Copy_pu8Val ){
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	00 d0       	rcall	.+0      	; 0x1954 <DIO_enuGetPortVal+0x6>
    1954:	00 d0       	rcall	.+0      	; 0x1956 <DIO_enuGetPortVal+0x8>
    1956:	00 d0       	rcall	.+0      	; 0x1958 <DIO_enuGetPortVal+0xa>
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	8a 83       	std	Y+2, r24	; 0x02
    195e:	7c 83       	std	Y+4, r23	; 0x04
    1960:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    1962:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Val != NULL)
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	09 f4       	brne	.+2      	; 0x196e <DIO_enuGetPortVal+0x20>
    196c:	43 c0       	rjmp	.+134    	; 0x19f4 <DIO_enuGetPortVal+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	84 30       	cpi	r24, 0x04	; 4
    1972:	e8 f5       	brcc	.+122    	; 0x19ee <DIO_enuGetPortVal+0xa0>
		{
			switch(Copy_u8PortID)
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	3e 83       	std	Y+6, r19	; 0x06
    197c:	2d 83       	std	Y+5, r18	; 0x05
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	91 05       	cpc	r25, r1
    1986:	e1 f0       	breq	.+56     	; 0x19c0 <DIO_enuGetPortVal+0x72>
    1988:	2d 81       	ldd	r18, Y+5	; 0x05
    198a:	3e 81       	ldd	r19, Y+6	; 0x06
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 05       	cpc	r19, r1
    1990:	2c f4       	brge	.+10     	; 0x199c <DIO_enuGetPortVal+0x4e>
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	9e 81       	ldd	r25, Y+6	; 0x06
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	61 f0       	breq	.+24     	; 0x19b2 <DIO_enuGetPortVal+0x64>
    199a:	26 c0       	rjmp	.+76     	; 0x19e8 <DIO_enuGetPortVal+0x9a>
    199c:	2d 81       	ldd	r18, Y+5	; 0x05
    199e:	3e 81       	ldd	r19, Y+6	; 0x06
    19a0:	22 30       	cpi	r18, 0x02	; 2
    19a2:	31 05       	cpc	r19, r1
    19a4:	a1 f0       	breq	.+40     	; 0x19ce <DIO_enuGetPortVal+0x80>
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	91 05       	cpc	r25, r1
    19ae:	b1 f0       	breq	.+44     	; 0x19dc <DIO_enuGetPortVal+0x8e>
    19b0:	1b c0       	rjmp	.+54     	; 0x19e8 <DIO_enuGetPortVal+0x9a>
			{
			case DIO_PORTA :
				*Copy_pu8Val = PINA;
    19b2:	e9 e3       	ldi	r30, 0x39	; 57
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	eb 81       	ldd	r30, Y+3	; 0x03
    19ba:	fc 81       	ldd	r31, Y+4	; 0x04
    19bc:	80 83       	st	Z, r24
    19be:	14 c0       	rjmp	.+40     	; 0x19e8 <DIO_enuGetPortVal+0x9a>
				break;
			case DIO_PORTB :
				*Copy_pu8Val = PINB;
    19c0:	e6 e3       	ldi	r30, 0x36	; 54
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	eb 81       	ldd	r30, Y+3	; 0x03
    19c8:	fc 81       	ldd	r31, Y+4	; 0x04
    19ca:	80 83       	st	Z, r24
    19cc:	0d c0       	rjmp	.+26     	; 0x19e8 <DIO_enuGetPortVal+0x9a>
				break;
			case DIO_PORTC :
				*Copy_pu8Val = PINC;
    19ce:	e3 e3       	ldi	r30, 0x33	; 51
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	eb 81       	ldd	r30, Y+3	; 0x03
    19d6:	fc 81       	ldd	r31, Y+4	; 0x04
    19d8:	80 83       	st	Z, r24
    19da:	06 c0       	rjmp	.+12     	; 0x19e8 <DIO_enuGetPortVal+0x9a>
				break;
			case DIO_PORTD :
				*Copy_pu8Val = PIND;
    19dc:	e0 e3       	ldi	r30, 0x30	; 48
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	eb 81       	ldd	r30, Y+3	; 0x03
    19e4:	fc 81       	ldd	r31, Y+4	; 0x04
    19e6:	80 83       	st	Z, r24
				break;
			}

			Local_enuErrorState = ES_OK;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	05 c0       	rjmp	.+10     	; 0x19f8 <DIO_enuGetPortVal+0xaa>
		}
		else Local_enuErrorState = ES_OUT_OF_RANGE;
    19ee:	83 e0       	ldi	r24, 0x03	; 3
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_enuGetPortVal+0xaa>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fa:	26 96       	adiw	r28, 0x06	; 6
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <DIO_enuSetPinDir>:



ES_t DIO_enuSetPinDir( u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Val ){
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <DIO_enuSetPinDir+0x6>
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <DIO_enuSetPinDir+0x8>
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <DIO_enuSetPinDir+0xa>
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	8a 83       	std	Y+2, r24	; 0x02
    1a1c:	6b 83       	std	Y+3, r22	; 0x03
    1a1e:	4c 83       	std	Y+4, r20	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
    1a20:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Val <= OUTPUT )
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	84 30       	cpi	r24, 0x04	; 4
    1a26:	08 f0       	brcs	.+2      	; 0x1a2a <DIO_enuSetPinDir+0x1e>
    1a28:	d1 c0       	rjmp	.+418    	; 0x1bcc <DIO_enuSetPinDir+0x1c0>
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	88 30       	cpi	r24, 0x08	; 8
    1a2e:	08 f0       	brcs	.+2      	; 0x1a32 <DIO_enuSetPinDir+0x26>
    1a30:	cd c0       	rjmp	.+410    	; 0x1bcc <DIO_enuSetPinDir+0x1c0>
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	82 30       	cpi	r24, 0x02	; 2
    1a36:	08 f0       	brcs	.+2      	; 0x1a3a <DIO_enuSetPinDir+0x2e>
    1a38:	c9 c0       	rjmp	.+402    	; 0x1bcc <DIO_enuSetPinDir+0x1c0>
	{

		switch(Copy_u8PortID)
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	3e 83       	std	Y+6, r19	; 0x06
    1a42:	2d 83       	std	Y+5, r18	; 0x05
    1a44:	6d 81       	ldd	r22, Y+5	; 0x05
    1a46:	7e 81       	ldd	r23, Y+6	; 0x06
    1a48:	61 30       	cpi	r22, 0x01	; 1
    1a4a:	71 05       	cpc	r23, r1
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <DIO_enuSetPinDir+0x44>
    1a4e:	41 c0       	rjmp	.+130    	; 0x1ad2 <DIO_enuSetPinDir+0xc6>
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	9e 81       	ldd	r25, Y+6	; 0x06
    1a54:	82 30       	cpi	r24, 0x02	; 2
    1a56:	91 05       	cpc	r25, r1
    1a58:	34 f4       	brge	.+12     	; 0x1a66 <DIO_enuSetPinDir+0x5a>
    1a5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1a5e:	21 15       	cp	r18, r1
    1a60:	31 05       	cpc	r19, r1
    1a62:	71 f0       	breq	.+28     	; 0x1a80 <DIO_enuSetPinDir+0x74>
    1a64:	b0 c0       	rjmp	.+352    	; 0x1bc6 <DIO_enuSetPinDir+0x1ba>
    1a66:	6d 81       	ldd	r22, Y+5	; 0x05
    1a68:	7e 81       	ldd	r23, Y+6	; 0x06
    1a6a:	62 30       	cpi	r22, 0x02	; 2
    1a6c:	71 05       	cpc	r23, r1
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <DIO_enuSetPinDir+0x66>
    1a70:	59 c0       	rjmp	.+178    	; 0x1b24 <DIO_enuSetPinDir+0x118>
    1a72:	8d 81       	ldd	r24, Y+5	; 0x05
    1a74:	9e 81       	ldd	r25, Y+6	; 0x06
    1a76:	83 30       	cpi	r24, 0x03	; 3
    1a78:	91 05       	cpc	r25, r1
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <DIO_enuSetPinDir+0x72>
    1a7c:	7c c0       	rjmp	.+248    	; 0x1b76 <DIO_enuSetPinDir+0x16a>
    1a7e:	a3 c0       	rjmp	.+326    	; 0x1bc6 <DIO_enuSetPinDir+0x1ba>
		{
		case DIO_PORTA :
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1a80:	aa e3       	ldi	r26, 0x3A	; 58
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	ea e3       	ldi	r30, 0x3A	; 58
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <DIO_enuSetPinDir+0x90>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	2a 95       	dec	r18
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <DIO_enuSetPinDir+0x8c>
    1aa0:	80 95       	com	r24
    1aa2:	84 23       	and	r24, r20
    1aa4:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Val << Copy_u8PinID);
    1aa6:	aa e3       	ldi	r26, 0x3A	; 58
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	ea e3       	ldi	r30, 0x3A	; 58
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	88 2f       	mov	r24, r24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	b9 01       	movw	r22, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <DIO_enuSetPinDir+0xba>
    1ac2:	66 0f       	add	r22, r22
    1ac4:	77 1f       	adc	r23, r23
    1ac6:	8a 95       	dec	r24
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <DIO_enuSetPinDir+0xb6>
    1aca:	cb 01       	movw	r24, r22
    1acc:	84 2b       	or	r24, r20
    1ace:	8c 93       	st	X, r24
    1ad0:	7a c0       	rjmp	.+244    	; 0x1bc6 <DIO_enuSetPinDir+0x1ba>
			break;
		case DIO_PORTB :
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1ad2:	a7 e3       	ldi	r26, 0x37	; 55
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e7 e3       	ldi	r30, 0x37	; 55
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	48 2f       	mov	r20, r24
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <DIO_enuSetPinDir+0xe2>
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	2a 95       	dec	r18
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <DIO_enuSetPinDir+0xde>
    1af2:	80 95       	com	r24
    1af4:	84 23       	and	r24, r20
    1af6:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Val << Copy_u8PinID);
    1af8:	a7 e3       	ldi	r26, 0x37	; 55
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e7 e3       	ldi	r30, 0x37	; 55
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	48 2f       	mov	r20, r24
    1b04:	8c 81       	ldd	r24, Y+4	; 0x04
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	88 2f       	mov	r24, r24
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	b9 01       	movw	r22, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <DIO_enuSetPinDir+0x10c>
    1b14:	66 0f       	add	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	8a 95       	dec	r24
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <DIO_enuSetPinDir+0x108>
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	84 2b       	or	r24, r20
    1b20:	8c 93       	st	X, r24
    1b22:	51 c0       	rjmp	.+162    	; 0x1bc6 <DIO_enuSetPinDir+0x1ba>
			break;
		case DIO_PORTC :
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1b24:	a4 e3       	ldi	r26, 0x34	; 52
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e4 e3       	ldi	r30, 0x34	; 52
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	48 2f       	mov	r20, r24
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <DIO_enuSetPinDir+0x134>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	2a 95       	dec	r18
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <DIO_enuSetPinDir+0x130>
    1b44:	80 95       	com	r24
    1b46:	84 23       	and	r24, r20
    1b48:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Val << Copy_u8PinID);
    1b4a:	a4 e3       	ldi	r26, 0x34	; 52
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e4 e3       	ldi	r30, 0x34	; 52
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	88 2f       	mov	r24, r24
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	b9 01       	movw	r22, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <DIO_enuSetPinDir+0x15e>
    1b66:	66 0f       	add	r22, r22
    1b68:	77 1f       	adc	r23, r23
    1b6a:	8a 95       	dec	r24
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <DIO_enuSetPinDir+0x15a>
    1b6e:	cb 01       	movw	r24, r22
    1b70:	84 2b       	or	r24, r20
    1b72:	8c 93       	st	X, r24
    1b74:	28 c0       	rjmp	.+80     	; 0x1bc6 <DIO_enuSetPinDir+0x1ba>
			break;
		case DIO_PORTD :
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1b76:	a1 e3       	ldi	r26, 0x31	; 49
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e1 e3       	ldi	r30, 0x31	; 49
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	48 2f       	mov	r20, r24
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <DIO_enuSetPinDir+0x186>
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	2a 95       	dec	r18
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <DIO_enuSetPinDir+0x182>
    1b96:	80 95       	com	r24
    1b98:	84 23       	and	r24, r20
    1b9a:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Val << Copy_u8PinID);
    1b9c:	a1 e3       	ldi	r26, 0x31	; 49
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e1 e3       	ldi	r30, 0x31	; 49
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	b9 01       	movw	r22, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <DIO_enuSetPinDir+0x1b0>
    1bb8:	66 0f       	add	r22, r22
    1bba:	77 1f       	adc	r23, r23
    1bbc:	8a 95       	dec	r24
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <DIO_enuSetPinDir+0x1ac>
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	84 2b       	or	r24, r20
    1bc4:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <DIO_enuSetPinDir+0x1c4>

	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd2:	26 96       	adiw	r28, 0x06	; 6
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <DIO_enuSetPinVal>:


ES_t DIO_enuSetPinVal( u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Val ){
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <DIO_enuSetPinVal+0x6>
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <DIO_enuSetPinVal+0x8>
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <DIO_enuSetPinVal+0xa>
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	8a 83       	std	Y+2, r24	; 0x02
    1bf4:	6b 83       	std	Y+3, r22	; 0x03
    1bf6:	4c 83       	std	Y+4, r20	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
    1bf8:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Val <= OUTPUT )
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	84 30       	cpi	r24, 0x04	; 4
    1bfe:	08 f0       	brcs	.+2      	; 0x1c02 <DIO_enuSetPinVal+0x1e>
    1c00:	d1 c0       	rjmp	.+418    	; 0x1da4 <DIO_enuSetPinVal+0x1c0>
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	88 30       	cpi	r24, 0x08	; 8
    1c06:	08 f0       	brcs	.+2      	; 0x1c0a <DIO_enuSetPinVal+0x26>
    1c08:	cd c0       	rjmp	.+410    	; 0x1da4 <DIO_enuSetPinVal+0x1c0>
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	82 30       	cpi	r24, 0x02	; 2
    1c0e:	08 f0       	brcs	.+2      	; 0x1c12 <DIO_enuSetPinVal+0x2e>
    1c10:	c9 c0       	rjmp	.+402    	; 0x1da4 <DIO_enuSetPinVal+0x1c0>
	{

		switch(Copy_u8PortID)
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	3e 83       	std	Y+6, r19	; 0x06
    1c1a:	2d 83       	std	Y+5, r18	; 0x05
    1c1c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c1e:	7e 81       	ldd	r23, Y+6	; 0x06
    1c20:	61 30       	cpi	r22, 0x01	; 1
    1c22:	71 05       	cpc	r23, r1
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <DIO_enuSetPinVal+0x44>
    1c26:	41 c0       	rjmp	.+130    	; 0x1caa <DIO_enuSetPinVal+0xc6>
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	82 30       	cpi	r24, 0x02	; 2
    1c2e:	91 05       	cpc	r25, r1
    1c30:	34 f4       	brge	.+12     	; 0x1c3e <DIO_enuSetPinVal+0x5a>
    1c32:	2d 81       	ldd	r18, Y+5	; 0x05
    1c34:	3e 81       	ldd	r19, Y+6	; 0x06
    1c36:	21 15       	cp	r18, r1
    1c38:	31 05       	cpc	r19, r1
    1c3a:	71 f0       	breq	.+28     	; 0x1c58 <DIO_enuSetPinVal+0x74>
    1c3c:	b0 c0       	rjmp	.+352    	; 0x1d9e <DIO_enuSetPinVal+0x1ba>
    1c3e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c40:	7e 81       	ldd	r23, Y+6	; 0x06
    1c42:	62 30       	cpi	r22, 0x02	; 2
    1c44:	71 05       	cpc	r23, r1
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <DIO_enuSetPinVal+0x66>
    1c48:	59 c0       	rjmp	.+178    	; 0x1cfc <DIO_enuSetPinVal+0x118>
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	83 30       	cpi	r24, 0x03	; 3
    1c50:	91 05       	cpc	r25, r1
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <DIO_enuSetPinVal+0x72>
    1c54:	7c c0       	rjmp	.+248    	; 0x1d4e <DIO_enuSetPinVal+0x16a>
    1c56:	a3 c0       	rjmp	.+326    	; 0x1d9e <DIO_enuSetPinVal+0x1ba>
		{
		case DIO_PORTA :
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1c58:	ab e3       	ldi	r26, 0x3B	; 59
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	eb e3       	ldi	r30, 0x3B	; 59
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <DIO_enuSetPinVal+0x90>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	2a 95       	dec	r18
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <DIO_enuSetPinVal+0x8c>
    1c78:	80 95       	com	r24
    1c7a:	84 23       	and	r24, r20
    1c7c:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Val << Copy_u8PinID);
    1c7e:	ab e3       	ldi	r26, 0x3B	; 59
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	eb e3       	ldi	r30, 0x3B	; 59
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	48 2f       	mov	r20, r24
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	b9 01       	movw	r22, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <DIO_enuSetPinVal+0xba>
    1c9a:	66 0f       	add	r22, r22
    1c9c:	77 1f       	adc	r23, r23
    1c9e:	8a 95       	dec	r24
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <DIO_enuSetPinVal+0xb6>
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	84 2b       	or	r24, r20
    1ca6:	8c 93       	st	X, r24
    1ca8:	7a c0       	rjmp	.+244    	; 0x1d9e <DIO_enuSetPinVal+0x1ba>
			break;
		case DIO_PORTB :
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1caa:	a8 e3       	ldi	r26, 0x38	; 56
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e8 e3       	ldi	r30, 0x38	; 56
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <DIO_enuSetPinVal+0xe2>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	2a 95       	dec	r18
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <DIO_enuSetPinVal+0xde>
    1cca:	80 95       	com	r24
    1ccc:	84 23       	and	r24, r20
    1cce:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Val << Copy_u8PinID);
    1cd0:	a8 e3       	ldi	r26, 0x38	; 56
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e8 e3       	ldi	r30, 0x38	; 56
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	48 2f       	mov	r20, r24
    1cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	88 2f       	mov	r24, r24
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	b9 01       	movw	r22, r18
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <DIO_enuSetPinVal+0x10c>
    1cec:	66 0f       	add	r22, r22
    1cee:	77 1f       	adc	r23, r23
    1cf0:	8a 95       	dec	r24
    1cf2:	e2 f7       	brpl	.-8      	; 0x1cec <DIO_enuSetPinVal+0x108>
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	84 2b       	or	r24, r20
    1cf8:	8c 93       	st	X, r24
    1cfa:	51 c0       	rjmp	.+162    	; 0x1d9e <DIO_enuSetPinVal+0x1ba>
			break;
		case DIO_PORTC :
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1cfc:	a5 e3       	ldi	r26, 0x35	; 53
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e5 e3       	ldi	r30, 0x35	; 53
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <DIO_enuSetPinVal+0x134>
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	2a 95       	dec	r18
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <DIO_enuSetPinVal+0x130>
    1d1c:	80 95       	com	r24
    1d1e:	84 23       	and	r24, r20
    1d20:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Val << Copy_u8PinID);
    1d22:	a5 e3       	ldi	r26, 0x35	; 53
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e5 e3       	ldi	r30, 0x35	; 53
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	48 2f       	mov	r20, r24
    1d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	88 2f       	mov	r24, r24
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	b9 01       	movw	r22, r18
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <DIO_enuSetPinVal+0x15e>
    1d3e:	66 0f       	add	r22, r22
    1d40:	77 1f       	adc	r23, r23
    1d42:	8a 95       	dec	r24
    1d44:	e2 f7       	brpl	.-8      	; 0x1d3e <DIO_enuSetPinVal+0x15a>
    1d46:	cb 01       	movw	r24, r22
    1d48:	84 2b       	or	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	28 c0       	rjmp	.+80     	; 0x1d9e <DIO_enuSetPinVal+0x1ba>
			break;
		case DIO_PORTD :
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1d4e:	a2 e3       	ldi	r26, 0x32	; 50
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e2 e3       	ldi	r30, 0x32	; 50
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <DIO_enuSetPinVal+0x186>
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	2a 95       	dec	r18
    1d6c:	e2 f7       	brpl	.-8      	; 0x1d66 <DIO_enuSetPinVal+0x182>
    1d6e:	80 95       	com	r24
    1d70:	84 23       	and	r24, r20
    1d72:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Val << Copy_u8PinID);
    1d74:	a2 e3       	ldi	r26, 0x32	; 50
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e2 e3       	ldi	r30, 0x32	; 50
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	48 2f       	mov	r20, r24
    1d80:	8c 81       	ldd	r24, Y+4	; 0x04
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	b9 01       	movw	r22, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_enuSetPinVal+0x1b0>
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	8a 95       	dec	r24
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_enuSetPinVal+0x1ac>
    1d98:	cb 01       	movw	r24, r22
    1d9a:	84 2b       	or	r24, r20
    1d9c:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <DIO_enuSetPinVal+0x1c4>

	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
    1da4:	83 e0       	ldi	r24, 0x03	; 3
    1da6:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1daa:	26 96       	adiw	r28, 0x06	; 6
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <DIO_enuTogglePin>:

ES_t DIO_enuTogglePin( u8 Copy_u8PortID , u8 Copy_u8PinID  ){
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <DIO_enuTogglePin+0x6>
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <DIO_enuTogglePin+0x8>
    1dc4:	0f 92       	push	r0
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	8a 83       	std	Y+2, r24	; 0x02
    1dcc:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    1dce:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 )
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	84 30       	cpi	r24, 0x04	; 4
    1dd4:	08 f0       	brcs	.+2      	; 0x1dd8 <DIO_enuTogglePin+0x1c>
    1dd6:	75 c0       	rjmp	.+234    	; 0x1ec2 <DIO_enuTogglePin+0x106>
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	88 30       	cpi	r24, 0x08	; 8
    1ddc:	08 f0       	brcs	.+2      	; 0x1de0 <DIO_enuTogglePin+0x24>
    1dde:	71 c0       	rjmp	.+226    	; 0x1ec2 <DIO_enuTogglePin+0x106>
	{

		switch(Copy_u8PortID)
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	3d 83       	std	Y+5, r19	; 0x05
    1de8:	2c 83       	std	Y+4, r18	; 0x04
    1dea:	8c 81       	ldd	r24, Y+4	; 0x04
    1dec:	9d 81       	ldd	r25, Y+5	; 0x05
    1dee:	81 30       	cpi	r24, 0x01	; 1
    1df0:	91 05       	cpc	r25, r1
    1df2:	49 f1       	breq	.+82     	; 0x1e46 <DIO_enuTogglePin+0x8a>
    1df4:	2c 81       	ldd	r18, Y+4	; 0x04
    1df6:	3d 81       	ldd	r19, Y+5	; 0x05
    1df8:	22 30       	cpi	r18, 0x02	; 2
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	2c f4       	brge	.+10     	; 0x1e08 <DIO_enuTogglePin+0x4c>
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	9d 81       	ldd	r25, Y+5	; 0x05
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	61 f0       	breq	.+24     	; 0x1e1e <DIO_enuTogglePin+0x62>
    1e06:	5a c0       	rjmp	.+180    	; 0x1ebc <DIO_enuTogglePin+0x100>
    1e08:	2c 81       	ldd	r18, Y+4	; 0x04
    1e0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e0c:	22 30       	cpi	r18, 0x02	; 2
    1e0e:	31 05       	cpc	r19, r1
    1e10:	71 f1       	breq	.+92     	; 0x1e6e <DIO_enuTogglePin+0xb2>
    1e12:	8c 81       	ldd	r24, Y+4	; 0x04
    1e14:	9d 81       	ldd	r25, Y+5	; 0x05
    1e16:	83 30       	cpi	r24, 0x03	; 3
    1e18:	91 05       	cpc	r25, r1
    1e1a:	e9 f1       	breq	.+122    	; 0x1e96 <DIO_enuTogglePin+0xda>
    1e1c:	4f c0       	rjmp	.+158    	; 0x1ebc <DIO_enuTogglePin+0x100>
		{
		case DIO_PORTA :
			PORTA ^= (DIO_MASK_BIT << Copy_u8PinID);
    1e1e:	ab e3       	ldi	r26, 0x3B	; 59
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	eb e3       	ldi	r30, 0x3B	; 59
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	48 2f       	mov	r20, r24
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 2e       	mov	r0, r18
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <DIO_enuTogglePin+0x80>
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	0a 94       	dec	r0
    1e3e:	e2 f7       	brpl	.-8      	; 0x1e38 <DIO_enuTogglePin+0x7c>
    1e40:	84 27       	eor	r24, r20
    1e42:	8c 93       	st	X, r24
    1e44:	3b c0       	rjmp	.+118    	; 0x1ebc <DIO_enuTogglePin+0x100>
			break;
		case DIO_PORTB :
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    1e46:	a8 e3       	ldi	r26, 0x38	; 56
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e8 e3       	ldi	r30, 0x38	; 56
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	48 2f       	mov	r20, r24
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	02 2e       	mov	r0, r18
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <DIO_enuTogglePin+0xa8>
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	0a 94       	dec	r0
    1e66:	e2 f7       	brpl	.-8      	; 0x1e60 <DIO_enuTogglePin+0xa4>
    1e68:	84 27       	eor	r24, r20
    1e6a:	8c 93       	st	X, r24
    1e6c:	27 c0       	rjmp	.+78     	; 0x1ebc <DIO_enuTogglePin+0x100>
			break;
		case DIO_PORTC :
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    1e6e:	a5 e3       	ldi	r26, 0x35	; 53
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e5 e3       	ldi	r30, 0x35	; 53
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	48 2f       	mov	r20, r24
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	02 2e       	mov	r0, r18
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <DIO_enuTogglePin+0xd0>
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	0a 94       	dec	r0
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <DIO_enuTogglePin+0xcc>
    1e90:	84 27       	eor	r24, r20
    1e92:	8c 93       	st	X, r24
    1e94:	13 c0       	rjmp	.+38     	; 0x1ebc <DIO_enuTogglePin+0x100>
			break;
		case DIO_PORTD :
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    1e96:	a2 e3       	ldi	r26, 0x32	; 50
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e2 e3       	ldi	r30, 0x32	; 50
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	48 2f       	mov	r20, r24
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	02 2e       	mov	r0, r18
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <DIO_enuTogglePin+0xf8>
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	0a 94       	dec	r0
    1eb6:	e2 f7       	brpl	.-8      	; 0x1eb0 <DIO_enuTogglePin+0xf4>
    1eb8:	84 27       	eor	r24, r20
    1eba:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <DIO_enuTogglePin+0x10a>

	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
    1ec2:	83 e0       	ldi	r24, 0x03	; 3
    1ec4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <DIO_enuGetPinVal>:

ES_t DIO_enuGetPinVal( u8 Copy_u8PortID , u8 Copy_u8PinID , u8* Copy_pu8Val ){
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	27 97       	sbiw	r28, 0x07	; 7
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	8a 83       	std	Y+2, r24	; 0x02
    1eee:	6b 83       	std	Y+3, r22	; 0x03
    1ef0:	5d 83       	std	Y+5, r21	; 0x05
    1ef2:	4c 83       	std	Y+4, r20	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
    1ef4:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Val != NULL)
    1ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef8:	9d 81       	ldd	r25, Y+5	; 0x05
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <DIO_enuGetPinVal+0x28>
    1efe:	7e c0       	rjmp	.+252    	; 0x1ffc <DIO_enuGetPinVal+0x124>
	{
		if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 )
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	84 30       	cpi	r24, 0x04	; 4
    1f04:	08 f0       	brcs	.+2      	; 0x1f08 <DIO_enuGetPinVal+0x30>
    1f06:	77 c0       	rjmp	.+238    	; 0x1ff6 <DIO_enuGetPinVal+0x11e>
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	88 30       	cpi	r24, 0x08	; 8
    1f0c:	08 f0       	brcs	.+2      	; 0x1f10 <DIO_enuGetPinVal+0x38>
    1f0e:	73 c0       	rjmp	.+230    	; 0x1ff6 <DIO_enuGetPinVal+0x11e>
		{
			switch(Copy_u8PortID)
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	3f 83       	std	Y+7, r19	; 0x07
    1f18:	2e 83       	std	Y+6, r18	; 0x06
    1f1a:	4e 81       	ldd	r20, Y+6	; 0x06
    1f1c:	5f 81       	ldd	r21, Y+7	; 0x07
    1f1e:	41 30       	cpi	r20, 0x01	; 1
    1f20:	51 05       	cpc	r21, r1
    1f22:	59 f1       	breq	.+86     	; 0x1f7a <DIO_enuGetPinVal+0xa2>
    1f24:	8e 81       	ldd	r24, Y+6	; 0x06
    1f26:	9f 81       	ldd	r25, Y+7	; 0x07
    1f28:	82 30       	cpi	r24, 0x02	; 2
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	34 f4       	brge	.+12     	; 0x1f3a <DIO_enuGetPinVal+0x62>
    1f2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f30:	3f 81       	ldd	r19, Y+7	; 0x07
    1f32:	21 15       	cp	r18, r1
    1f34:	31 05       	cpc	r19, r1
    1f36:	69 f0       	breq	.+26     	; 0x1f52 <DIO_enuGetPinVal+0x7a>
    1f38:	5b c0       	rjmp	.+182    	; 0x1ff0 <DIO_enuGetPinVal+0x118>
    1f3a:	4e 81       	ldd	r20, Y+6	; 0x06
    1f3c:	5f 81       	ldd	r21, Y+7	; 0x07
    1f3e:	42 30       	cpi	r20, 0x02	; 2
    1f40:	51 05       	cpc	r21, r1
    1f42:	79 f1       	breq	.+94     	; 0x1fa2 <DIO_enuGetPinVal+0xca>
    1f44:	8e 81       	ldd	r24, Y+6	; 0x06
    1f46:	9f 81       	ldd	r25, Y+7	; 0x07
    1f48:	83 30       	cpi	r24, 0x03	; 3
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <DIO_enuGetPinVal+0x78>
    1f4e:	3d c0       	rjmp	.+122    	; 0x1fca <DIO_enuGetPinVal+0xf2>
    1f50:	4f c0       	rjmp	.+158    	; 0x1ff0 <DIO_enuGetPinVal+0x118>
			{
			case DIO_PORTA :
				*Copy_pu8Val = (PINA>>Copy_u8PinID) & DIO_MASK_BIT;
    1f52:	e9 e3       	ldi	r30, 0x39	; 57
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	a9 01       	movw	r20, r18
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <DIO_enuGetPinVal+0x92>
    1f66:	55 95       	asr	r21
    1f68:	47 95       	ror	r20
    1f6a:	8a 95       	dec	r24
    1f6c:	e2 f7       	brpl	.-8      	; 0x1f66 <DIO_enuGetPinVal+0x8e>
    1f6e:	ca 01       	movw	r24, r20
    1f70:	81 70       	andi	r24, 0x01	; 1
    1f72:	ec 81       	ldd	r30, Y+4	; 0x04
    1f74:	fd 81       	ldd	r31, Y+5	; 0x05
    1f76:	80 83       	st	Z, r24
    1f78:	3b c0       	rjmp	.+118    	; 0x1ff0 <DIO_enuGetPinVal+0x118>
				break;
			case DIO_PORTB :
				*Copy_pu8Val = (PINB>>Copy_u8PinID) & DIO_MASK_BIT;
    1f7a:	e6 e3       	ldi	r30, 0x36	; 54
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a9 01       	movw	r20, r18
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <DIO_enuGetPinVal+0xba>
    1f8e:	55 95       	asr	r21
    1f90:	47 95       	ror	r20
    1f92:	8a 95       	dec	r24
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <DIO_enuGetPinVal+0xb6>
    1f96:	ca 01       	movw	r24, r20
    1f98:	81 70       	andi	r24, 0x01	; 1
    1f9a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f9c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f9e:	80 83       	st	Z, r24
    1fa0:	27 c0       	rjmp	.+78     	; 0x1ff0 <DIO_enuGetPinVal+0x118>
				break;
			case DIO_PORTC :
				*Copy_pu8Val = (PINC>>Copy_u8PinID) & DIO_MASK_BIT;
    1fa2:	e3 e3       	ldi	r30, 0x33	; 51
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	88 2f       	mov	r24, r24
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a9 01       	movw	r20, r18
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <DIO_enuGetPinVal+0xe2>
    1fb6:	55 95       	asr	r21
    1fb8:	47 95       	ror	r20
    1fba:	8a 95       	dec	r24
    1fbc:	e2 f7       	brpl	.-8      	; 0x1fb6 <DIO_enuGetPinVal+0xde>
    1fbe:	ca 01       	movw	r24, r20
    1fc0:	81 70       	andi	r24, 0x01	; 1
    1fc2:	ec 81       	ldd	r30, Y+4	; 0x04
    1fc4:	fd 81       	ldd	r31, Y+5	; 0x05
    1fc6:	80 83       	st	Z, r24
    1fc8:	13 c0       	rjmp	.+38     	; 0x1ff0 <DIO_enuGetPinVal+0x118>
				break;
			case DIO_PORTD :
				*Copy_pu8Val = (PIND>>Copy_u8PinID) & DIO_MASK_BIT;
    1fca:	e0 e3       	ldi	r30, 0x30	; 48
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a9 01       	movw	r20, r18
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <DIO_enuGetPinVal+0x10a>
    1fde:	55 95       	asr	r21
    1fe0:	47 95       	ror	r20
    1fe2:	8a 95       	dec	r24
    1fe4:	e2 f7       	brpl	.-8      	; 0x1fde <DIO_enuGetPinVal+0x106>
    1fe6:	ca 01       	movw	r24, r20
    1fe8:	81 70       	andi	r24, 0x01	; 1
    1fea:	ec 81       	ldd	r30, Y+4	; 0x04
    1fec:	fd 81       	ldd	r31, Y+5	; 0x05
    1fee:	80 83       	st	Z, r24
				break;
			}

			Local_enuErrorState = ES_OK;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	05 c0       	rjmp	.+10     	; 0x2000 <DIO_enuGetPinVal+0x128>
		}
		else Local_enuErrorState = ES_OUT_OF_RANGE;
    1ff6:	83 e0       	ldi	r24, 0x03	; 3
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <DIO_enuGetPinVal+0x128>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    1ffc:	82 e0       	ldi	r24, 0x02	; 2
    1ffe:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    2000:	89 81       	ldd	r24, Y+1	; 0x01
}
    2002:	27 96       	adiw	r28, 0x07	; 7
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <ADC_enuInit>:
/**
 * @brief initialization function
 * @return the Error state of the function
 */

ES_t ADC_enuInit(){
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	0f 92       	push	r0
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62

	ES_t Local_u8ErrorState = ES_OK;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	89 83       	std	Y+1, r24	; 0x01
#if (ADC_INITIAL_STATE == ADC_ENABLED)

	/*--------------- specify the reference voltage ---------------*/

#if (ADC_REFERENCE_VOLTAGE == ADC_AREF)
	Clr_bit(ADMUX,ADMUX_REFS0); Clr_bit(ADMUX,ADMUX_REFS1);
    2022:	a7 e2       	ldi	r26, 0x27	; 39
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e7 e2       	ldi	r30, 0x27	; 39
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	8f 7b       	andi	r24, 0xBF	; 191
    202e:	8c 93       	st	X, r24
    2030:	a7 e2       	ldi	r26, 0x27	; 39
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e7 e2       	ldi	r30, 0x27	; 39
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	8f 77       	andi	r24, 0x7F	; 127
    203c:	8c 93       	st	X, r24

#if ADC_ADJUST_RESULT == ADC_RIGHT_ADJUST
	Clr_bit(ADMUX,ADMUX_ADLAR);

#elif ADC_ADJUST_RESULT == ADC_LEFT_ADJUST
	Set_bit(ADMUX,ADMUX_ADLAR);
    203e:	a7 e2       	ldi	r26, 0x27	; 39
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e7 e2       	ldi	r30, 0x27	; 39
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	80 62       	ori	r24, 0x20	; 32
    204a:	8c 93       	st	X, r24
#endif

	/*---------------------- specify the ADC Prescaler ----------------------*/

#if (IS_VALID_PRESCALER(ADC_PRESCALER) )
	ADCSRA &= PRESCALER_MASK;
    204c:	a6 e2       	ldi	r26, 0x26	; 38
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e6 e2       	ldi	r30, 0x26	; 38
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	88 7f       	andi	r24, 0xF8	; 248
    2058:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALER;
    205a:	a6 e2       	ldi	r26, 0x26	; 38
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e6 e2       	ldi	r30, 0x26	; 38
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	87 60       	ori	r24, 0x07	; 7
    2066:	8c 93       	st	X, r24

#if   (ADC_AUTO_TRIGGER_STATE == ADC_AUTO_TRIGGER_ENABLED)
	Set_bit(ADCSRA,ADCSRA_ADATE);

#elif (ADC_AUTO_TRIGGER_STATE == ADC_AUTO_TRIGGER_DISABLED)
	Clr_bit(ADCSRA,ADCSRA_ADATE);
    2068:	a6 e2       	ldi	r26, 0x26	; 38
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e6 e2       	ldi	r30, 0x26	; 38
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	8f 7d       	andi	r24, 0xDF	; 223
    2074:	8c 93       	st	X, r24

#if   (ADC_INTERRUPT_STATE == ADC_INT_ENABLED)
	Set_bit(ADCSRA,ADCSRA_ADIE);

#elif (ADC_INTERRUPT_STATE == ADC_INT_DISABLED)
	Clr_bit(ADCSRA,ADCSRA_ADIE);
    2076:	a6 e2       	ldi	r26, 0x26	; 38
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e6 e2       	ldi	r30, 0x26	; 38
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	87 7f       	andi	r24, 0xF7	; 247
    2082:	8c 93       	st	X, r24


	/*------------------- specify the auto trigger source -------------------*/

#if ( IS_VALID_AUTO_TRIGGER_SOURCE(ADC_AUTO_TRIGGER_SOURCE) )
	SFIOR &= AUTO_TRIGGER_SOURCE_MASK;
    2084:	a0 e5       	ldi	r26, 0x50	; 80
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e0 e5       	ldi	r30, 0x50	; 80
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	8f 71       	andi	r24, 0x1F	; 31
    2090:	8c 93       	st	X, r24
	SFIOR |= ADC_AUTO_TRIGGER_SOURCE;
    2092:	a0 e5       	ldi	r26, 0x50	; 80
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e0 e5       	ldi	r30, 0x50	; 80
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	8c 93       	st	X, r24
#endif


	/*----------------------- enable the ADC peripheral----------------------*/

	Set_bit(ADCSRA,ADCSRA_ADEN);
    209e:	a6 e2       	ldi	r26, 0x26	; 38
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e6 e2       	ldi	r30, 0x26	; 38
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	80 68       	ori	r24, 0x80	; 128
    20aa:	8c 93       	st	X, r24

#else
#error "invalid ADC enable/disable selection"
#endif

	return Local_u8ErrorState;
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <ADC_enuBlockingRead>:
 * @param Copy_pu16Reading: variable in which we return the reading
 *
 * @return the Error state of the function
 */

ES_t ADC_enuBlockingRead(u8 Copy_u8Channel, u16* Copy_pu16Reading){
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	28 97       	sbiw	r28, 0x08	; 8
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	8e 83       	std	Y+6, r24	; 0x06
    20cc:	78 87       	std	Y+8, r23	; 0x08
    20ce:	6f 83       	std	Y+7, r22	; 0x07

	ES_t Local_u8ErrorState = ES_OK;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeCount = 0;
    20d4:	19 82       	std	Y+1, r1	; 0x01
    20d6:	1a 82       	std	Y+2, r1	; 0x02
    20d8:	1b 82       	std	Y+3, r1	; 0x03
    20da:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_pu16Reading != NULL){
    20dc:	8f 81       	ldd	r24, Y+7	; 0x07
    20de:	98 85       	ldd	r25, Y+8	; 0x08
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <ADC_enuBlockingRead+0x30>
    20e4:	53 c0       	rjmp	.+166    	; 0x218c <ADC_enuBlockingRead+0xd6>

		if(Global_u8ADCState == IDLE) {
    20e6:	80 91 00 02 	lds	r24, 0x0200
    20ea:	89 30       	cpi	r24, 0x09	; 9
    20ec:	09 f0       	breq	.+2      	; 0x20f0 <ADC_enuBlockingRead+0x3a>
    20ee:	4b c0       	rjmp	.+150    	; 0x2186 <ADC_enuBlockingRead+0xd0>

			/* ADC now is busy */
			Global_u8ADCState = BUSY;
    20f0:	88 e0       	ldi	r24, 0x08	; 8
    20f2:	80 93 00 02 	sts	0x0200, r24

			/* Set the required channel to the MUX bits */

			if(IS_VALID_CHANNEL(Copy_u8Channel))
    20f6:	8e 81       	ldd	r24, Y+6	; 0x06
    20f8:	80 32       	cpi	r24, 0x20	; 32
    20fa:	58 f4       	brcc	.+22     	; 0x2112 <ADC_enuBlockingRead+0x5c>
			{
				ADMUX = (ADMUX & CHANNEL_SELECTION_MASK) | Copy_u8Channel;
    20fc:	a7 e2       	ldi	r26, 0x27	; 39
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e7 e2       	ldi	r30, 0x27	; 39
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	98 2f       	mov	r25, r24
    2108:	90 7e       	andi	r25, 0xE0	; 224
    210a:	8e 81       	ldd	r24, Y+6	; 0x06
    210c:	89 2b       	or	r24, r25
    210e:	8c 93       	st	X, r24
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <ADC_enuBlockingRead+0x60>
			}
			else Local_u8ErrorState = ES_OUT_OF_RANGE;
    2112:	83 e0       	ldi	r24, 0x03	; 3
    2114:	8d 83       	std	Y+5, r24	; 0x05

			/* start conversion */
			Set_bit(ADCSRA,ADCSRA_ADSC);
    2116:	a6 e2       	ldi	r26, 0x26	; 38
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e6 e2       	ldi	r30, 0x26	; 38
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	80 64       	ori	r24, 0x40	; 64
    2122:	8c 93       	st	X, r24

			/* turn off ADC interrupt */
			Clr_bit(ADCSRA, ADCSRA_ADIE);
    2124:	a6 e2       	ldi	r26, 0x26	; 38
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e6 e2       	ldi	r30, 0x26	; 38
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	87 7f       	andi	r24, 0xF7	; 247
    2130:	8c 93       	st	X, r24

			/* Polling (busy waiting) until the conversion complete flag is set */
			while((Get_bit(ADCSRA,ADCSRA_ADIF) == LOW) && (Local_u32TimeCount < ADC_u32TIMOUT)){
    2132:	e6 e2       	ldi	r30, 0x26	; 38
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	82 95       	swap	r24
    213a:	8f 70       	andi	r24, 0x0F	; 15
    213c:	88 2f       	mov	r24, r24
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	81 70       	andi	r24, 0x01	; 1
    2142:	90 70       	andi	r25, 0x00	; 0
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	61 f4       	brne	.+24     	; 0x2160 <ADC_enuBlockingRead+0xaa>
				Local_u32TimeCount++;
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	9a 81       	ldd	r25, Y+2	; 0x02
    214c:	ab 81       	ldd	r26, Y+3	; 0x03
    214e:	bc 81       	ldd	r27, Y+4	; 0x04
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	a1 1d       	adc	r26, r1
    2154:	b1 1d       	adc	r27, r1
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	9a 83       	std	Y+2, r25	; 0x02
    215a:	ab 83       	std	Y+3, r26	; 0x03
    215c:	bc 83       	std	Y+4, r27	; 0x04
    215e:	e9 cf       	rjmp	.-46     	; 0x2132 <ADC_enuBlockingRead+0x7c>
			else
			{
				/* loop is broken because flag is raised
				 * Clear the conversion complete flag
				 */
				Set_bit(ADCSRA,ADCSRA_ADIF);
    2160:	a6 e2       	ldi	r26, 0x26	; 38
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e6 e2       	ldi	r30, 0x26	; 38
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	80 61       	ori	r24, 0x10	; 16
    216c:	8c 93       	st	X, r24
					Set_bit(ADCSRA, ADCSRA_ADIE);
				}


#if (ADC_ADJUST_RESULT == ADC_LEFT_ADJUST)
				*Copy_pu16Reading = ADCH;
    216e:	e5 e2       	ldi	r30, 0x25	; 37
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	ef 81       	ldd	r30, Y+7	; 0x07
    2178:	f8 85       	ldd	r31, Y+8	; 0x08
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	80 83       	st	Z, r24
#error "Wrong ADC adjust"
#endif
			}

			/* ADC is now IDLE */
			Global_u8ADCState = IDLE;
    217e:	89 e0       	ldi	r24, 0x09	; 9
    2180:	80 93 00 02 	sts	0x0200, r24
    2184:	05 c0       	rjmp	.+10     	; 0x2190 <ADC_enuBlockingRead+0xda>
		}
		else {
			Local_u8ErrorState = ES_BUSY_STATE;
    2186:	88 e0       	ldi	r24, 0x08	; 8
    2188:	8d 83       	std	Y+5, r24	; 0x05
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <ADC_enuBlockingRead+0xda>
		}
	}
	else Local_u8ErrorState = ES_NULL_POINTER;
    218c:	82 e0       	ldi	r24, 0x02	; 2
    218e:	8d 83       	std	Y+5, r24	; 0x05

	return Local_u8ErrorState;
    2190:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2192:	28 96       	adiw	r28, 0x08	; 8
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <ADC_enuReadNonBlocking>:
 *
 * @return the Error state of the function
 */

ES_t ADC_enuReadNonBlocking(u8 Copy_u8Channel, u16* Copy_pu16Reading, void (*Copy_pvNotficationFunc)(void))
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <ADC_enuReadNonBlocking+0x6>
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <ADC_enuReadNonBlocking+0x8>
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <ADC_enuReadNonBlocking+0xa>
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	8a 83       	std	Y+2, r24	; 0x02
    21b4:	7c 83       	std	Y+4, r23	; 0x04
    21b6:	6b 83       	std	Y+3, r22	; 0x03
    21b8:	5e 83       	std	Y+6, r21	; 0x06
    21ba:	4d 83       	std	Y+5, r20	; 0x05
	ES_t Local_u8ErrorState = ES_OK;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu16Reading != NULL && Copy_pvNotficationFunc != NULL)
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	9c 81       	ldd	r25, Y+4	; 0x04
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	c9 f1       	breq	.+114    	; 0x223a <ADC_enuReadNonBlocking+0x96>
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	a9 f1       	breq	.+106    	; 0x223a <ADC_enuReadNonBlocking+0x96>
	{

		if(Global_u8ADCState == IDLE)
    21d0:	80 91 00 02 	lds	r24, 0x0200
    21d4:	89 30       	cpi	r24, 0x09	; 9
    21d6:	71 f5       	brne	.+92     	; 0x2234 <ADC_enuReadNonBlocking+0x90>
		{
			/* ADC is now Busy */
			Global_u8ADCState = BUSY;
    21d8:	88 e0       	ldi	r24, 0x08	; 8
    21da:	80 93 00 02 	sts	0x0200, r24

			if (IS_VALID_CHANNEL(Copy_u8Channel))
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	80 32       	cpi	r24, 0x20	; 32
    21e2:	28 f5       	brcc	.+74     	; 0x222e <ADC_enuReadNonBlocking+0x8a>
			{
				/* Copy pointer to global variable for use in ISR */
				ADCValue = Copy_pu16Reading;
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	90 93 6b 02 	sts	0x026B, r25
    21ec:	80 93 6a 02 	sts	0x026A, r24

				/* assign address of the Call Back function in a global variable */
				Global_pvCallBack = Copy_pvNotficationFunc;
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	90 93 69 02 	sts	0x0269, r25
    21f8:	80 93 68 02 	sts	0x0268, r24

				/* Select the required channel by setting the four bits in ADMUX */
				ADMUX = (ADMUX & 0xF0) | (Copy_u8Channel);
    21fc:	a7 e2       	ldi	r26, 0x27	; 39
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e7 e2       	ldi	r30, 0x27	; 39
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	98 2f       	mov	r25, r24
    2208:	90 7f       	andi	r25, 0xF0	; 240
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	89 2b       	or	r24, r25
    220e:	8c 93       	st	X, r24

				/* Start Conversion by setting ADSC bit */
				Set_bit(ADCSRA, ADCSRA_ADSC);
    2210:	a6 e2       	ldi	r26, 0x26	; 38
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	e6 e2       	ldi	r30, 0x26	; 38
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	80 64       	ori	r24, 0x40	; 64
    221c:	8c 93       	st	X, r24

				/* ADC Conversion Complete Interrupt Enable */
				Set_bit(ADCSRA , ADCSRA_ADIE) ;
    221e:	a6 e2       	ldi	r26, 0x26	; 38
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e6 e2       	ldi	r30, 0x26	; 38
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	88 60       	ori	r24, 0x08	; 8
    222a:	8c 93       	st	X, r24
    222c:	08 c0       	rjmp	.+16     	; 0x223e <ADC_enuReadNonBlocking+0x9a>
			}
			else
			{
				Local_u8ErrorState = ES_OUT_OF_RANGE;
    222e:	83 e0       	ldi	r24, 0x03	; 3
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	05 c0       	rjmp	.+10     	; 0x223e <ADC_enuReadNonBlocking+0x9a>
			}

		}
		else
		{
			Local_u8ErrorState = ES_BUSY_STATE;
    2234:	88 e0       	ldi	r24, 0x08	; 8
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	02 c0       	rjmp	.+4      	; 0x223e <ADC_enuReadNonBlocking+0x9a>
		}
	}
	else Local_u8ErrorState = ES_NULL_POINTER;
    223a:	82 e0       	ldi	r24, 0x02	; 2
    223c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    223e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2240:	26 96       	adiw	r28, 0x06	; 6
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	08 95       	ret

00002252 <__vector_16>:
/*========================== ADC ISR ==========================*/


void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    2252:	1f 92       	push	r1
    2254:	0f 92       	push	r0
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	0f 92       	push	r0
    225a:	11 24       	eor	r1, r1
    225c:	2f 93       	push	r18
    225e:	3f 93       	push	r19
    2260:	4f 93       	push	r20
    2262:	5f 93       	push	r21
    2264:	6f 93       	push	r22
    2266:	7f 93       	push	r23
    2268:	8f 93       	push	r24
    226a:	9f 93       	push	r25
    226c:	af 93       	push	r26
    226e:	bf 93       	push	r27
    2270:	ef 93       	push	r30
    2272:	ff 93       	push	r31
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
	/* Read the ADC value from the ADC Data Register */
	if (ADC_RESOLUTION == ADC_8BIT)
	{
		ADCValue = ADCH;
    227c:	e5 e2       	ldi	r30, 0x25	; 37
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	90 93 6b 02 	sts	0x026B, r25
    2288:	80 93 6a 02 	sts	0x026A, r24
	{
		ADCValue = ADCVAL_10BITS;
	}

	/* Call the Callback function in the application after completion of the ADC conversion */
	if (Global_pvCallBack != NULL)
    228c:	80 91 68 02 	lds	r24, 0x0268
    2290:	90 91 69 02 	lds	r25, 0x0269
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	29 f0       	breq	.+10     	; 0x22a2 <__vector_16+0x50>
	{
		Global_pvCallBack();
    2298:	e0 91 68 02 	lds	r30, 0x0268
    229c:	f0 91 69 02 	lds	r31, 0x0269
    22a0:	09 95       	icall
	}
}
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	ff 91       	pop	r31
    22a8:	ef 91       	pop	r30
    22aa:	bf 91       	pop	r27
    22ac:	af 91       	pop	r26
    22ae:	9f 91       	pop	r25
    22b0:	8f 91       	pop	r24
    22b2:	7f 91       	pop	r23
    22b4:	6f 91       	pop	r22
    22b6:	5f 91       	pop	r21
    22b8:	4f 91       	pop	r20
    22ba:	3f 91       	pop	r19
    22bc:	2f 91       	pop	r18
    22be:	0f 90       	pop	r0
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	0f 90       	pop	r0
    22c4:	1f 90       	pop	r1
    22c6:	18 95       	reti

000022c8 <Switch_enuInit>:
#include "Switch_priv.h"
#include "Switch_config.h"

#include "../../MCAL/DIO/DIO_int.h"

ES_t Switch_enuInit(SW_t* Copy_ArrStrSwitchState ){
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <Switch_enuInit+0x6>
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <Switch_enuInit+0x8>
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	9c 83       	std	Y+4, r25	; 0x04
    22d6:	8b 83       	std	Y+3, r24	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    22d8:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_ArrStrSwitchState != NULL){
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9c 81       	ldd	r25, Y+4	; 0x04
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <Switch_enuInit+0x1c>
    22e2:	5f c0       	rjmp	.+190    	; 0x23a2 <Switch_enuInit+0xda>

	u8 Local_u8Iterator;

	for( Local_u8Iterator = 0 ; Local_u8Iterator < NUM_OF_SW ; ++Local_u8Iterator)
    22e4:	19 82       	std	Y+1, r1	; 0x01
    22e6:	58 c0       	rjmp	.+176    	; 0x2398 <Switch_enuInit+0xd0>
	{
		Local_enuErrorState = DIO_enuSetPinDir(
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	c9 01       	movw	r24, r18
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	28 0f       	add	r18, r24
    22f6:	39 1f       	adc	r19, r25
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	fc 01       	movw	r30, r24
    22fe:	e2 0f       	add	r30, r18
    2300:	f3 1f       	adc	r31, r19
    2302:	40 81       	ld	r20, Z
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	c9 01       	movw	r24, r18
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	28 0f       	add	r18, r24
    2312:	39 1f       	adc	r19, r25
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	fc 01       	movw	r30, r24
    231a:	e2 0f       	add	r30, r18
    231c:	f3 1f       	adc	r31, r19
    231e:	91 81       	ldd	r25, Z+1	; 0x01
    2320:	84 2f       	mov	r24, r20
    2322:	69 2f       	mov	r22, r25
    2324:	40 e0       	ldi	r20, 0x00	; 0
    2326:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_enuSetPinDir>
    232a:	8a 83       	std	Y+2, r24	; 0x02
				Copy_ArrStrSwitchState[Local_u8Iterator].SW_PortID,
				Copy_ArrStrSwitchState[Local_u8Iterator].SW_PinID ,
				DIO_u8INPUT
		);

		Local_enuErrorState = DIO_enuSetPinVal(
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	c9 01       	movw	r24, r18
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	28 0f       	add	r18, r24
    233a:	39 1f       	adc	r19, r25
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	9c 81       	ldd	r25, Y+4	; 0x04
    2340:	fc 01       	movw	r30, r24
    2342:	e2 0f       	add	r30, r18
    2344:	f3 1f       	adc	r31, r19
    2346:	50 81       	ld	r21, Z
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	c9 01       	movw	r24, r18
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	28 0f       	add	r18, r24
    2356:	39 1f       	adc	r19, r25
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	9c 81       	ldd	r25, Y+4	; 0x04
    235c:	fc 01       	movw	r30, r24
    235e:	e2 0f       	add	r30, r18
    2360:	f3 1f       	adc	r31, r19
    2362:	41 81       	ldd	r20, Z+1	; 0x01
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	c9 01       	movw	r24, r18
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	28 0f       	add	r18, r24
    2372:	39 1f       	adc	r19, r25
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	fc 01       	movw	r30, r24
    237a:	e2 0f       	add	r30, r18
    237c:	f3 1f       	adc	r31, r19
    237e:	92 81       	ldd	r25, Z+2	; 0x02
    2380:	85 2f       	mov	r24, r21
    2382:	64 2f       	mov	r22, r20
    2384:	49 2f       	mov	r20, r25
    2386:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    238a:	8a 83       	std	Y+2, r24	; 0x02
				Copy_ArrStrSwitchState[Local_u8Iterator].SW_PortID,
				Copy_ArrStrSwitchState[Local_u8Iterator].SW_PinID ,
				Copy_ArrStrSwitchState[Local_u8Iterator].SW_Status
		);

		if (Local_enuErrorState != ES_OK) break;
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	81 30       	cpi	r24, 0x01	; 1
    2390:	51 f4       	brne	.+20     	; 0x23a6 <Switch_enuInit+0xde>

	if(Copy_ArrStrSwitchState != NULL){

	u8 Local_u8Iterator;

	for( Local_u8Iterator = 0 ; Local_u8Iterator < NUM_OF_SW ; ++Local_u8Iterator)
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	8f 5f       	subi	r24, 0xFF	; 255
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	83 30       	cpi	r24, 0x03	; 3
    239c:	08 f4       	brcc	.+2      	; 0x23a0 <Switch_enuInit+0xd8>
    239e:	a4 cf       	rjmp	.-184    	; 0x22e8 <Switch_enuInit+0x20>
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <Switch_enuInit+0xde>

		if (Local_enuErrorState != ES_OK) break;

	}
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    23a2:	82 e0       	ldi	r24, 0x02	; 2
    23a4:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02

}
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t* Copy_ArrStrSwitchState , u8* Copy_pu8State){
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <Switch_enuGetState+0x6>
    23bc:	00 d0       	rcall	.+0      	; 0x23be <Switch_enuGetState+0x8>
    23be:	0f 92       	push	r0
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	9b 83       	std	Y+3, r25	; 0x03
    23c6:	8a 83       	std	Y+2, r24	; 0x02
    23c8:	7d 83       	std	Y+5, r23	; 0x05
    23ca:	6c 83       	std	Y+4, r22	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
    23cc:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_pu8State != NULL && Copy_ArrStrSwitchState != NULL )
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	9d 81       	ldd	r25, Y+5	; 0x05
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	91 f0       	breq	.+36     	; 0x23fa <Switch_enuGetState+0x44>
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	9b 81       	ldd	r25, Y+3	; 0x03
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	71 f0       	breq	.+28     	; 0x23fa <Switch_enuGetState+0x44>
	{
		Local_enuErrorState = DIO_enuGetPinVal(
    23de:	ea 81       	ldd	r30, Y+2	; 0x02
    23e0:	fb 81       	ldd	r31, Y+3	; 0x03
    23e2:	80 81       	ld	r24, Z
    23e4:	ea 81       	ldd	r30, Y+2	; 0x02
    23e6:	fb 81       	ldd	r31, Y+3	; 0x03
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	2c 81       	ldd	r18, Y+4	; 0x04
    23ec:	3d 81       	ldd	r19, Y+5	; 0x05
    23ee:	69 2f       	mov	r22, r25
    23f0:	a9 01       	movw	r20, r18
    23f2:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <DIO_enuGetPinVal>
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <Switch_enuGetState+0x48>
				Copy_ArrStrSwitchState->SW_PortID,
				Copy_ArrStrSwitchState->SW_PinID ,
				Copy_pu8State
		);
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    23fa:	82 e0       	ldi	r24, 0x02	; 2
    23fc:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    23fe:	89 81       	ldd	r24, Y+1	; 0x01

}
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <LCD_enuInit>:

u8 Global_u8Flag = 0;


ES_t LCD_enuInit(void)
{
    2410:	af 92       	push	r10
    2412:	bf 92       	push	r11
    2414:	cf 92       	push	r12
    2416:	df 92       	push	r13
    2418:	ef 92       	push	r14
    241a:	ff 92       	push	r15
    241c:	0f 93       	push	r16
    241e:	1f 93       	push	r17
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	cd 54       	subi	r28, 0x4D	; 77
    242a:	d0 40       	sbci	r29, 0x00	; 0
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    2436:	fe 01       	movw	r30, r28
    2438:	ee 5b       	subi	r30, 0xBE	; 190
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	10 82       	st	Z, r1
	u8 Local_u8Iterator;

	u64 Local_u64Check = 0;
    243e:	19 ae       	std	Y+57, r1	; 0x39
    2440:	1a ae       	std	Y+58, r1	; 0x3a
    2442:	1b ae       	std	Y+59, r1	; 0x3b
    2444:	1c ae       	std	Y+60, r1	; 0x3c
    2446:	1d ae       	std	Y+61, r1	; 0x3d
    2448:	1e ae       	std	Y+62, r1	; 0x3e
    244a:	1f ae       	std	Y+63, r1	; 0x3f
    244c:	fe 01       	movw	r30, r28
    244e:	e0 5c       	subi	r30, 0xC0	; 192
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	10 82       	st	Z, r1

	Local_u64Check |= (((u64)DIO_enuSetPinDir(RS_PORT, RS_PIN, DIO_u8OUTPUT)<<0 ));
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	60 e0       	ldi	r22, 0x00	; 0
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_enuSetPinDir>
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	50 e0       	ldi	r21, 0x00	; 0
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	70 e0       	ldi	r23, 0x00	; 0
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	e9 ad       	ldd	r30, Y+57	; 0x39
    2470:	e2 2b       	or	r30, r18
    2472:	e9 af       	std	Y+57, r30	; 0x39
    2474:	ea ad       	ldd	r30, Y+58	; 0x3a
    2476:	e3 2b       	or	r30, r19
    2478:	ea af       	std	Y+58, r30	; 0x3a
    247a:	eb ad       	ldd	r30, Y+59	; 0x3b
    247c:	e4 2b       	or	r30, r20
    247e:	eb af       	std	Y+59, r30	; 0x3b
    2480:	ec ad       	ldd	r30, Y+60	; 0x3c
    2482:	e5 2b       	or	r30, r21
    2484:	ec af       	std	Y+60, r30	; 0x3c
    2486:	ed ad       	ldd	r30, Y+61	; 0x3d
    2488:	e6 2b       	or	r30, r22
    248a:	ed af       	std	Y+61, r30	; 0x3d
    248c:	ee ad       	ldd	r30, Y+62	; 0x3e
    248e:	e7 2b       	or	r30, r23
    2490:	ee af       	std	Y+62, r30	; 0x3e
    2492:	ef ad       	ldd	r30, Y+63	; 0x3f
    2494:	e8 2b       	or	r30, r24
    2496:	ef af       	std	Y+63, r30	; 0x3f
    2498:	fe 01       	movw	r30, r28
    249a:	e0 5c       	subi	r30, 0xC0	; 192
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	e0 81       	ld	r30, Z
    24a0:	8e 2f       	mov	r24, r30
    24a2:	89 2b       	or	r24, r25
    24a4:	fe 01       	movw	r30, r28
    24a6:	e0 5c       	subi	r30, 0xC0	; 192
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)DIO_enuSetPinDir(RW_PORT, RW_PIN, DIO_u8OUTPUT)<<3 ));
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	61 e0       	ldi	r22, 0x01	; 1
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_enuSetPinDir>
    24b6:	a8 2e       	mov	r10, r24
    24b8:	bb 24       	eor	r11, r11
    24ba:	cc 24       	eor	r12, r12
    24bc:	dd 24       	eor	r13, r13
    24be:	ee 24       	eor	r14, r14
    24c0:	ff 24       	eor	r15, r15
    24c2:	87 01       	movw	r16, r14
    24c4:	2a 2d       	mov	r18, r10
    24c6:	3b 2d       	mov	r19, r11
    24c8:	4c 2d       	mov	r20, r12
    24ca:	5d 2d       	mov	r21, r13
    24cc:	6e 2d       	mov	r22, r14
    24ce:	7f 2d       	mov	r23, r15
    24d0:	80 2f       	mov	r24, r16
    24d2:	91 2f       	mov	r25, r17
    24d4:	03 e0       	ldi	r16, 0x03	; 3
    24d6:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    24da:	a2 2e       	mov	r10, r18
    24dc:	b3 2e       	mov	r11, r19
    24de:	c4 2e       	mov	r12, r20
    24e0:	d5 2e       	mov	r13, r21
    24e2:	e6 2e       	mov	r14, r22
    24e4:	f7 2e       	mov	r15, r23
    24e6:	08 2f       	mov	r16, r24
    24e8:	19 2f       	mov	r17, r25
    24ea:	2a 2d       	mov	r18, r10
    24ec:	3b 2d       	mov	r19, r11
    24ee:	4c 2d       	mov	r20, r12
    24f0:	5d 2d       	mov	r21, r13
    24f2:	6e 2d       	mov	r22, r14
    24f4:	7f 2d       	mov	r23, r15
    24f6:	80 2f       	mov	r24, r16
    24f8:	91 2f       	mov	r25, r17
    24fa:	e9 ad       	ldd	r30, Y+57	; 0x39
    24fc:	e2 2b       	or	r30, r18
    24fe:	e9 af       	std	Y+57, r30	; 0x39
    2500:	ea ad       	ldd	r30, Y+58	; 0x3a
    2502:	e3 2b       	or	r30, r19
    2504:	ea af       	std	Y+58, r30	; 0x3a
    2506:	eb ad       	ldd	r30, Y+59	; 0x3b
    2508:	e4 2b       	or	r30, r20
    250a:	eb af       	std	Y+59, r30	; 0x3b
    250c:	ec ad       	ldd	r30, Y+60	; 0x3c
    250e:	e5 2b       	or	r30, r21
    2510:	ec af       	std	Y+60, r30	; 0x3c
    2512:	ed ad       	ldd	r30, Y+61	; 0x3d
    2514:	e6 2b       	or	r30, r22
    2516:	ed af       	std	Y+61, r30	; 0x3d
    2518:	ee ad       	ldd	r30, Y+62	; 0x3e
    251a:	e7 2b       	or	r30, r23
    251c:	ee af       	std	Y+62, r30	; 0x3e
    251e:	ef ad       	ldd	r30, Y+63	; 0x3f
    2520:	e8 2b       	or	r30, r24
    2522:	ef af       	std	Y+63, r30	; 0x3f
    2524:	fe 01       	movw	r30, r28
    2526:	e0 5c       	subi	r30, 0xC0	; 192
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	e0 81       	ld	r30, Z
    252c:	8e 2f       	mov	r24, r30
    252e:	89 2b       	or	r24, r25
    2530:	fe 01       	movw	r30, r28
    2532:	e0 5c       	subi	r30, 0xC0	; 192
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)DIO_enuSetPinDir(EN_PORT, EN_PIN, DIO_u8OUTPUT)<<6 ));
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	66 e0       	ldi	r22, 0x06	; 6
    253c:	41 e0       	ldi	r20, 0x01	; 1
    253e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_enuSetPinDir>
    2542:	a8 2e       	mov	r10, r24
    2544:	bb 24       	eor	r11, r11
    2546:	cc 24       	eor	r12, r12
    2548:	dd 24       	eor	r13, r13
    254a:	ee 24       	eor	r14, r14
    254c:	ff 24       	eor	r15, r15
    254e:	87 01       	movw	r16, r14
    2550:	2a 2d       	mov	r18, r10
    2552:	3b 2d       	mov	r19, r11
    2554:	4c 2d       	mov	r20, r12
    2556:	5d 2d       	mov	r21, r13
    2558:	6e 2d       	mov	r22, r14
    255a:	7f 2d       	mov	r23, r15
    255c:	80 2f       	mov	r24, r16
    255e:	91 2f       	mov	r25, r17
    2560:	06 e0       	ldi	r16, 0x06	; 6
    2562:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2566:	a2 2e       	mov	r10, r18
    2568:	b3 2e       	mov	r11, r19
    256a:	c4 2e       	mov	r12, r20
    256c:	d5 2e       	mov	r13, r21
    256e:	e6 2e       	mov	r14, r22
    2570:	f7 2e       	mov	r15, r23
    2572:	08 2f       	mov	r16, r24
    2574:	19 2f       	mov	r17, r25
    2576:	2a 2d       	mov	r18, r10
    2578:	3b 2d       	mov	r19, r11
    257a:	4c 2d       	mov	r20, r12
    257c:	5d 2d       	mov	r21, r13
    257e:	6e 2d       	mov	r22, r14
    2580:	7f 2d       	mov	r23, r15
    2582:	80 2f       	mov	r24, r16
    2584:	91 2f       	mov	r25, r17
    2586:	e9 ad       	ldd	r30, Y+57	; 0x39
    2588:	e2 2b       	or	r30, r18
    258a:	e9 af       	std	Y+57, r30	; 0x39
    258c:	ea ad       	ldd	r30, Y+58	; 0x3a
    258e:	e3 2b       	or	r30, r19
    2590:	ea af       	std	Y+58, r30	; 0x3a
    2592:	eb ad       	ldd	r30, Y+59	; 0x3b
    2594:	e4 2b       	or	r30, r20
    2596:	eb af       	std	Y+59, r30	; 0x3b
    2598:	ec ad       	ldd	r30, Y+60	; 0x3c
    259a:	e5 2b       	or	r30, r21
    259c:	ec af       	std	Y+60, r30	; 0x3c
    259e:	ed ad       	ldd	r30, Y+61	; 0x3d
    25a0:	e6 2b       	or	r30, r22
    25a2:	ed af       	std	Y+61, r30	; 0x3d
    25a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    25a6:	e7 2b       	or	r30, r23
    25a8:	ee af       	std	Y+62, r30	; 0x3e
    25aa:	ef ad       	ldd	r30, Y+63	; 0x3f
    25ac:	e8 2b       	or	r30, r24
    25ae:	ef af       	std	Y+63, r30	; 0x3f
    25b0:	fe 01       	movw	r30, r28
    25b2:	e0 5c       	subi	r30, 0xC0	; 192
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	e0 81       	ld	r30, Z
    25b8:	8e 2f       	mov	r24, r30
    25ba:	89 2b       	or	r24, r25
    25bc:	fe 01       	movw	r30, r28
    25be:	e0 5c       	subi	r30, 0xC0	; 192
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 83       	st	Z, r24


	Local_u64Check |= (((u64)DIO_enuSetPinDir(DB4_PORT, DB4_PIN, DIO_u8OUTPUT)<<9 ));
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	62 e0       	ldi	r22, 0x02	; 2
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_enuSetPinDir>
    25ce:	a8 2e       	mov	r10, r24
    25d0:	bb 24       	eor	r11, r11
    25d2:	cc 24       	eor	r12, r12
    25d4:	dd 24       	eor	r13, r13
    25d6:	ee 24       	eor	r14, r14
    25d8:	ff 24       	eor	r15, r15
    25da:	87 01       	movw	r16, r14
    25dc:	2a 2d       	mov	r18, r10
    25de:	3b 2d       	mov	r19, r11
    25e0:	4c 2d       	mov	r20, r12
    25e2:	5d 2d       	mov	r21, r13
    25e4:	6e 2d       	mov	r22, r14
    25e6:	7f 2d       	mov	r23, r15
    25e8:	80 2f       	mov	r24, r16
    25ea:	91 2f       	mov	r25, r17
    25ec:	09 e0       	ldi	r16, 0x09	; 9
    25ee:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    25f2:	a2 2e       	mov	r10, r18
    25f4:	b3 2e       	mov	r11, r19
    25f6:	c4 2e       	mov	r12, r20
    25f8:	d5 2e       	mov	r13, r21
    25fa:	e6 2e       	mov	r14, r22
    25fc:	f7 2e       	mov	r15, r23
    25fe:	08 2f       	mov	r16, r24
    2600:	19 2f       	mov	r17, r25
    2602:	2a 2d       	mov	r18, r10
    2604:	3b 2d       	mov	r19, r11
    2606:	4c 2d       	mov	r20, r12
    2608:	5d 2d       	mov	r21, r13
    260a:	6e 2d       	mov	r22, r14
    260c:	7f 2d       	mov	r23, r15
    260e:	80 2f       	mov	r24, r16
    2610:	91 2f       	mov	r25, r17
    2612:	e9 ad       	ldd	r30, Y+57	; 0x39
    2614:	e2 2b       	or	r30, r18
    2616:	e9 af       	std	Y+57, r30	; 0x39
    2618:	ea ad       	ldd	r30, Y+58	; 0x3a
    261a:	e3 2b       	or	r30, r19
    261c:	ea af       	std	Y+58, r30	; 0x3a
    261e:	eb ad       	ldd	r30, Y+59	; 0x3b
    2620:	e4 2b       	or	r30, r20
    2622:	eb af       	std	Y+59, r30	; 0x3b
    2624:	ec ad       	ldd	r30, Y+60	; 0x3c
    2626:	e5 2b       	or	r30, r21
    2628:	ec af       	std	Y+60, r30	; 0x3c
    262a:	ed ad       	ldd	r30, Y+61	; 0x3d
    262c:	e6 2b       	or	r30, r22
    262e:	ed af       	std	Y+61, r30	; 0x3d
    2630:	ee ad       	ldd	r30, Y+62	; 0x3e
    2632:	e7 2b       	or	r30, r23
    2634:	ee af       	std	Y+62, r30	; 0x3e
    2636:	ef ad       	ldd	r30, Y+63	; 0x3f
    2638:	e8 2b       	or	r30, r24
    263a:	ef af       	std	Y+63, r30	; 0x3f
    263c:	fe 01       	movw	r30, r28
    263e:	e0 5c       	subi	r30, 0xC0	; 192
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	e0 81       	ld	r30, Z
    2644:	8e 2f       	mov	r24, r30
    2646:	89 2b       	or	r24, r25
    2648:	fe 01       	movw	r30, r28
    264a:	e0 5c       	subi	r30, 0xC0	; 192
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)DIO_enuSetPinDir(DB5_PORT, DB5_PIN, DIO_u8OUTPUT)<<12));
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	63 e0       	ldi	r22, 0x03	; 3
    2654:	41 e0       	ldi	r20, 0x01	; 1
    2656:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_enuSetPinDir>
    265a:	a8 2e       	mov	r10, r24
    265c:	bb 24       	eor	r11, r11
    265e:	cc 24       	eor	r12, r12
    2660:	dd 24       	eor	r13, r13
    2662:	ee 24       	eor	r14, r14
    2664:	ff 24       	eor	r15, r15
    2666:	87 01       	movw	r16, r14
    2668:	2a 2d       	mov	r18, r10
    266a:	3b 2d       	mov	r19, r11
    266c:	4c 2d       	mov	r20, r12
    266e:	5d 2d       	mov	r21, r13
    2670:	6e 2d       	mov	r22, r14
    2672:	7f 2d       	mov	r23, r15
    2674:	80 2f       	mov	r24, r16
    2676:	91 2f       	mov	r25, r17
    2678:	0c e0       	ldi	r16, 0x0C	; 12
    267a:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    267e:	a2 2e       	mov	r10, r18
    2680:	b3 2e       	mov	r11, r19
    2682:	c4 2e       	mov	r12, r20
    2684:	d5 2e       	mov	r13, r21
    2686:	e6 2e       	mov	r14, r22
    2688:	f7 2e       	mov	r15, r23
    268a:	08 2f       	mov	r16, r24
    268c:	19 2f       	mov	r17, r25
    268e:	2a 2d       	mov	r18, r10
    2690:	3b 2d       	mov	r19, r11
    2692:	4c 2d       	mov	r20, r12
    2694:	5d 2d       	mov	r21, r13
    2696:	6e 2d       	mov	r22, r14
    2698:	7f 2d       	mov	r23, r15
    269a:	80 2f       	mov	r24, r16
    269c:	91 2f       	mov	r25, r17
    269e:	e9 ad       	ldd	r30, Y+57	; 0x39
    26a0:	e2 2b       	or	r30, r18
    26a2:	e9 af       	std	Y+57, r30	; 0x39
    26a4:	ea ad       	ldd	r30, Y+58	; 0x3a
    26a6:	e3 2b       	or	r30, r19
    26a8:	ea af       	std	Y+58, r30	; 0x3a
    26aa:	eb ad       	ldd	r30, Y+59	; 0x3b
    26ac:	e4 2b       	or	r30, r20
    26ae:	eb af       	std	Y+59, r30	; 0x3b
    26b0:	ec ad       	ldd	r30, Y+60	; 0x3c
    26b2:	e5 2b       	or	r30, r21
    26b4:	ec af       	std	Y+60, r30	; 0x3c
    26b6:	ed ad       	ldd	r30, Y+61	; 0x3d
    26b8:	e6 2b       	or	r30, r22
    26ba:	ed af       	std	Y+61, r30	; 0x3d
    26bc:	ee ad       	ldd	r30, Y+62	; 0x3e
    26be:	e7 2b       	or	r30, r23
    26c0:	ee af       	std	Y+62, r30	; 0x3e
    26c2:	ef ad       	ldd	r30, Y+63	; 0x3f
    26c4:	e8 2b       	or	r30, r24
    26c6:	ef af       	std	Y+63, r30	; 0x3f
    26c8:	fe 01       	movw	r30, r28
    26ca:	e0 5c       	subi	r30, 0xC0	; 192
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	e0 81       	ld	r30, Z
    26d0:	8e 2f       	mov	r24, r30
    26d2:	89 2b       	or	r24, r25
    26d4:	fe 01       	movw	r30, r28
    26d6:	e0 5c       	subi	r30, 0xC0	; 192
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)DIO_enuSetPinDir(DB6_PORT, DB6_PIN, DIO_u8OUTPUT)<<15));
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	64 e0       	ldi	r22, 0x04	; 4
    26e0:	41 e0       	ldi	r20, 0x01	; 1
    26e2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_enuSetPinDir>
    26e6:	a8 2e       	mov	r10, r24
    26e8:	bb 24       	eor	r11, r11
    26ea:	cc 24       	eor	r12, r12
    26ec:	dd 24       	eor	r13, r13
    26ee:	ee 24       	eor	r14, r14
    26f0:	ff 24       	eor	r15, r15
    26f2:	87 01       	movw	r16, r14
    26f4:	2a 2d       	mov	r18, r10
    26f6:	3b 2d       	mov	r19, r11
    26f8:	4c 2d       	mov	r20, r12
    26fa:	5d 2d       	mov	r21, r13
    26fc:	6e 2d       	mov	r22, r14
    26fe:	7f 2d       	mov	r23, r15
    2700:	80 2f       	mov	r24, r16
    2702:	91 2f       	mov	r25, r17
    2704:	0f e0       	ldi	r16, 0x0F	; 15
    2706:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    270a:	a2 2e       	mov	r10, r18
    270c:	b3 2e       	mov	r11, r19
    270e:	c4 2e       	mov	r12, r20
    2710:	d5 2e       	mov	r13, r21
    2712:	e6 2e       	mov	r14, r22
    2714:	f7 2e       	mov	r15, r23
    2716:	08 2f       	mov	r16, r24
    2718:	19 2f       	mov	r17, r25
    271a:	2a 2d       	mov	r18, r10
    271c:	3b 2d       	mov	r19, r11
    271e:	4c 2d       	mov	r20, r12
    2720:	5d 2d       	mov	r21, r13
    2722:	6e 2d       	mov	r22, r14
    2724:	7f 2d       	mov	r23, r15
    2726:	80 2f       	mov	r24, r16
    2728:	91 2f       	mov	r25, r17
    272a:	e9 ad       	ldd	r30, Y+57	; 0x39
    272c:	e2 2b       	or	r30, r18
    272e:	e9 af       	std	Y+57, r30	; 0x39
    2730:	ea ad       	ldd	r30, Y+58	; 0x3a
    2732:	e3 2b       	or	r30, r19
    2734:	ea af       	std	Y+58, r30	; 0x3a
    2736:	eb ad       	ldd	r30, Y+59	; 0x3b
    2738:	e4 2b       	or	r30, r20
    273a:	eb af       	std	Y+59, r30	; 0x3b
    273c:	ec ad       	ldd	r30, Y+60	; 0x3c
    273e:	e5 2b       	or	r30, r21
    2740:	ec af       	std	Y+60, r30	; 0x3c
    2742:	ed ad       	ldd	r30, Y+61	; 0x3d
    2744:	e6 2b       	or	r30, r22
    2746:	ed af       	std	Y+61, r30	; 0x3d
    2748:	ee ad       	ldd	r30, Y+62	; 0x3e
    274a:	e7 2b       	or	r30, r23
    274c:	ee af       	std	Y+62, r30	; 0x3e
    274e:	ef ad       	ldd	r30, Y+63	; 0x3f
    2750:	e8 2b       	or	r30, r24
    2752:	ef af       	std	Y+63, r30	; 0x3f
    2754:	fe 01       	movw	r30, r28
    2756:	e0 5c       	subi	r30, 0xC0	; 192
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	e0 81       	ld	r30, Z
    275c:	8e 2f       	mov	r24, r30
    275e:	89 2b       	or	r24, r25
    2760:	fe 01       	movw	r30, r28
    2762:	e0 5c       	subi	r30, 0xC0	; 192
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)DIO_enuSetPinDir(DB7_PORT, DB7_PIN, DIO_u8OUTPUT)<<18));
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	65 e0       	ldi	r22, 0x05	; 5
    276c:	41 e0       	ldi	r20, 0x01	; 1
    276e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <DIO_enuSetPinDir>
    2772:	a8 2e       	mov	r10, r24
    2774:	bb 24       	eor	r11, r11
    2776:	cc 24       	eor	r12, r12
    2778:	dd 24       	eor	r13, r13
    277a:	ee 24       	eor	r14, r14
    277c:	ff 24       	eor	r15, r15
    277e:	87 01       	movw	r16, r14
    2780:	2a 2d       	mov	r18, r10
    2782:	3b 2d       	mov	r19, r11
    2784:	4c 2d       	mov	r20, r12
    2786:	5d 2d       	mov	r21, r13
    2788:	6e 2d       	mov	r22, r14
    278a:	7f 2d       	mov	r23, r15
    278c:	80 2f       	mov	r24, r16
    278e:	91 2f       	mov	r25, r17
    2790:	02 e1       	ldi	r16, 0x12	; 18
    2792:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2796:	a2 2e       	mov	r10, r18
    2798:	b3 2e       	mov	r11, r19
    279a:	c4 2e       	mov	r12, r20
    279c:	d5 2e       	mov	r13, r21
    279e:	e6 2e       	mov	r14, r22
    27a0:	f7 2e       	mov	r15, r23
    27a2:	08 2f       	mov	r16, r24
    27a4:	19 2f       	mov	r17, r25
    27a6:	2a 2d       	mov	r18, r10
    27a8:	3b 2d       	mov	r19, r11
    27aa:	4c 2d       	mov	r20, r12
    27ac:	5d 2d       	mov	r21, r13
    27ae:	6e 2d       	mov	r22, r14
    27b0:	7f 2d       	mov	r23, r15
    27b2:	80 2f       	mov	r24, r16
    27b4:	91 2f       	mov	r25, r17
    27b6:	e9 ad       	ldd	r30, Y+57	; 0x39
    27b8:	e2 2b       	or	r30, r18
    27ba:	e9 af       	std	Y+57, r30	; 0x39
    27bc:	ea ad       	ldd	r30, Y+58	; 0x3a
    27be:	e3 2b       	or	r30, r19
    27c0:	ea af       	std	Y+58, r30	; 0x3a
    27c2:	eb ad       	ldd	r30, Y+59	; 0x3b
    27c4:	e4 2b       	or	r30, r20
    27c6:	eb af       	std	Y+59, r30	; 0x3b
    27c8:	ec ad       	ldd	r30, Y+60	; 0x3c
    27ca:	e5 2b       	or	r30, r21
    27cc:	ec af       	std	Y+60, r30	; 0x3c
    27ce:	ed ad       	ldd	r30, Y+61	; 0x3d
    27d0:	e6 2b       	or	r30, r22
    27d2:	ed af       	std	Y+61, r30	; 0x3d
    27d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    27d6:	e7 2b       	or	r30, r23
    27d8:	ee af       	std	Y+62, r30	; 0x3e
    27da:	ef ad       	ldd	r30, Y+63	; 0x3f
    27dc:	e8 2b       	or	r30, r24
    27de:	ef af       	std	Y+63, r30	; 0x3f
    27e0:	fe 01       	movw	r30, r28
    27e2:	e0 5c       	subi	r30, 0xC0	; 192
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	e0 81       	ld	r30, Z
    27e8:	8e 2f       	mov	r24, r30
    27ea:	89 2b       	or	r24, r25
    27ec:	fe 01       	movw	r30, r28
    27ee:	e0 5c       	subi	r30, 0xC0	; 192
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 83       	st	Z, r24
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a0 e2       	ldi	r26, 0x20	; 32
    27fa:	b2 e4       	ldi	r27, 0x42	; 66
    27fc:	8d ab       	std	Y+53, r24	; 0x35
    27fe:	9e ab       	std	Y+54, r25	; 0x36
    2800:	af ab       	std	Y+55, r26	; 0x37
    2802:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2804:	6d a9       	ldd	r22, Y+53	; 0x35
    2806:	7e a9       	ldd	r23, Y+54	; 0x36
    2808:	8f a9       	ldd	r24, Y+55	; 0x37
    280a:	98 ad       	ldd	r25, Y+56	; 0x38
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	4a e7       	ldi	r20, 0x7A	; 122
    2812:	53 e4       	ldi	r21, 0x43	; 67
    2814:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	89 ab       	std	Y+49, r24	; 0x31
    281e:	9a ab       	std	Y+50, r25	; 0x32
    2820:	ab ab       	std	Y+51, r26	; 0x33
    2822:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2824:	69 a9       	ldd	r22, Y+49	; 0x31
    2826:	7a a9       	ldd	r23, Y+50	; 0x32
    2828:	8b a9       	ldd	r24, Y+51	; 0x33
    282a:	9c a9       	ldd	r25, Y+52	; 0x34
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e8       	ldi	r20, 0x80	; 128
    2832:	5f e3       	ldi	r21, 0x3F	; 63
    2834:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    2838:	88 23       	and	r24, r24
    283a:	2c f4       	brge	.+10     	; 0x2846 <LCD_enuInit+0x436>
		__ticks = 1;
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	98 ab       	std	Y+48, r25	; 0x30
    2842:	8f a7       	std	Y+47, r24	; 0x2f
    2844:	3f c0       	rjmp	.+126    	; 0x28c4 <LCD_enuInit+0x4b4>
	else if (__tmp > 65535)
    2846:	69 a9       	ldd	r22, Y+49	; 0x31
    2848:	7a a9       	ldd	r23, Y+50	; 0x32
    284a:	8b a9       	ldd	r24, Y+51	; 0x33
    284c:	9c a9       	ldd	r25, Y+52	; 0x34
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	3f ef       	ldi	r19, 0xFF	; 255
    2852:	4f e7       	ldi	r20, 0x7F	; 127
    2854:	57 e4       	ldi	r21, 0x47	; 71
    2856:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    285a:	18 16       	cp	r1, r24
    285c:	4c f5       	brge	.+82     	; 0x28b0 <LCD_enuInit+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285e:	6d a9       	ldd	r22, Y+53	; 0x35
    2860:	7e a9       	ldd	r23, Y+54	; 0x36
    2862:	8f a9       	ldd	r24, Y+55	; 0x37
    2864:	98 ad       	ldd	r25, Y+56	; 0x38
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e2       	ldi	r20, 0x20	; 32
    286c:	51 e4       	ldi	r21, 0x41	; 65
    286e:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	98 ab       	std	Y+48, r25	; 0x30
    2884:	8f a7       	std	Y+47, r24	; 0x2f
    2886:	0f c0       	rjmp	.+30     	; 0x28a6 <LCD_enuInit+0x496>
    2888:	89 e1       	ldi	r24, 0x19	; 25
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	9e a7       	std	Y+46, r25	; 0x2e
    288e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2890:	8d a5       	ldd	r24, Y+45	; 0x2d
    2892:	9e a5       	ldd	r25, Y+46	; 0x2e
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <LCD_enuInit+0x484>
    2898:	9e a7       	std	Y+46, r25	; 0x2e
    289a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289c:	8f a5       	ldd	r24, Y+47	; 0x2f
    289e:	98 a9       	ldd	r25, Y+48	; 0x30
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	98 ab       	std	Y+48, r25	; 0x30
    28a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28a8:	98 a9       	ldd	r25, Y+48	; 0x30
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	69 f7       	brne	.-38     	; 0x2888 <LCD_enuInit+0x478>
    28ae:	14 c0       	rjmp	.+40     	; 0x28d8 <LCD_enuInit+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b0:	69 a9       	ldd	r22, Y+49	; 0x31
    28b2:	7a a9       	ldd	r23, Y+50	; 0x32
    28b4:	8b a9       	ldd	r24, Y+51	; 0x33
    28b6:	9c a9       	ldd	r25, Y+52	; 0x34
    28b8:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	98 ab       	std	Y+48, r25	; 0x30
    28c2:	8f a7       	std	Y+47, r24	; 0x2f
    28c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c6:	98 a9       	ldd	r25, Y+48	; 0x30
    28c8:	9c a7       	std	Y+44, r25	; 0x2c
    28ca:	8b a7       	std	Y+43, r24	; 0x2b
    28cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    28ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <LCD_enuInit+0x4c0>
    28d4:	9c a7       	std	Y+44, r25	; 0x2c
    28d6:	8b a7       	std	Y+43, r24	; 0x2b
	//Local_enuErrorState = LCD_inenuSendCommand(0x38); //2 lines, 5*7 ,8 bit mode


#elif LCD_MODE == FOUR_BIT

	Local_u64Check |= (((u64)LCD_inenuSendCommand(0x20)<<21 ));
    28d8:	80 e2       	ldi	r24, 0x20	; 32
    28da:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <LCD_inenuSendCommand>
    28de:	a8 2e       	mov	r10, r24
    28e0:	bb 24       	eor	r11, r11
    28e2:	cc 24       	eor	r12, r12
    28e4:	dd 24       	eor	r13, r13
    28e6:	ee 24       	eor	r14, r14
    28e8:	ff 24       	eor	r15, r15
    28ea:	87 01       	movw	r16, r14
    28ec:	2a 2d       	mov	r18, r10
    28ee:	3b 2d       	mov	r19, r11
    28f0:	4c 2d       	mov	r20, r12
    28f2:	5d 2d       	mov	r21, r13
    28f4:	6e 2d       	mov	r22, r14
    28f6:	7f 2d       	mov	r23, r15
    28f8:	80 2f       	mov	r24, r16
    28fa:	91 2f       	mov	r25, r17
    28fc:	05 e1       	ldi	r16, 0x15	; 21
    28fe:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2902:	a2 2e       	mov	r10, r18
    2904:	b3 2e       	mov	r11, r19
    2906:	c4 2e       	mov	r12, r20
    2908:	d5 2e       	mov	r13, r21
    290a:	e6 2e       	mov	r14, r22
    290c:	f7 2e       	mov	r15, r23
    290e:	08 2f       	mov	r16, r24
    2910:	19 2f       	mov	r17, r25
    2912:	2a 2d       	mov	r18, r10
    2914:	3b 2d       	mov	r19, r11
    2916:	4c 2d       	mov	r20, r12
    2918:	5d 2d       	mov	r21, r13
    291a:	6e 2d       	mov	r22, r14
    291c:	7f 2d       	mov	r23, r15
    291e:	80 2f       	mov	r24, r16
    2920:	91 2f       	mov	r25, r17
    2922:	e9 ad       	ldd	r30, Y+57	; 0x39
    2924:	e2 2b       	or	r30, r18
    2926:	e9 af       	std	Y+57, r30	; 0x39
    2928:	ea ad       	ldd	r30, Y+58	; 0x3a
    292a:	e3 2b       	or	r30, r19
    292c:	ea af       	std	Y+58, r30	; 0x3a
    292e:	eb ad       	ldd	r30, Y+59	; 0x3b
    2930:	e4 2b       	or	r30, r20
    2932:	eb af       	std	Y+59, r30	; 0x3b
    2934:	ec ad       	ldd	r30, Y+60	; 0x3c
    2936:	e5 2b       	or	r30, r21
    2938:	ec af       	std	Y+60, r30	; 0x3c
    293a:	ed ad       	ldd	r30, Y+61	; 0x3d
    293c:	e6 2b       	or	r30, r22
    293e:	ed af       	std	Y+61, r30	; 0x3d
    2940:	ee ad       	ldd	r30, Y+62	; 0x3e
    2942:	e7 2b       	or	r30, r23
    2944:	ee af       	std	Y+62, r30	; 0x3e
    2946:	ef ad       	ldd	r30, Y+63	; 0x3f
    2948:	e8 2b       	or	r30, r24
    294a:	ef af       	std	Y+63, r30	; 0x3f
    294c:	fe 01       	movw	r30, r28
    294e:	e0 5c       	subi	r30, 0xC0	; 192
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	e0 81       	ld	r30, Z
    2954:	8e 2f       	mov	r24, r30
    2956:	89 2b       	or	r24, r25
    2958:	fe 01       	movw	r30, r28
    295a:	e0 5c       	subi	r30, 0xC0	; 192
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)LCD_inenuSendCommand(0x20)<<24 ));
    2960:	80 e2       	ldi	r24, 0x20	; 32
    2962:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <LCD_inenuSendCommand>
    2966:	a8 2e       	mov	r10, r24
    2968:	bb 24       	eor	r11, r11
    296a:	cc 24       	eor	r12, r12
    296c:	dd 24       	eor	r13, r13
    296e:	ee 24       	eor	r14, r14
    2970:	ff 24       	eor	r15, r15
    2972:	87 01       	movw	r16, r14
    2974:	2a 2d       	mov	r18, r10
    2976:	3b 2d       	mov	r19, r11
    2978:	4c 2d       	mov	r20, r12
    297a:	5d 2d       	mov	r21, r13
    297c:	6e 2d       	mov	r22, r14
    297e:	7f 2d       	mov	r23, r15
    2980:	80 2f       	mov	r24, r16
    2982:	91 2f       	mov	r25, r17
    2984:	08 e1       	ldi	r16, 0x18	; 24
    2986:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    298a:	a2 2e       	mov	r10, r18
    298c:	b3 2e       	mov	r11, r19
    298e:	c4 2e       	mov	r12, r20
    2990:	d5 2e       	mov	r13, r21
    2992:	e6 2e       	mov	r14, r22
    2994:	f7 2e       	mov	r15, r23
    2996:	08 2f       	mov	r16, r24
    2998:	19 2f       	mov	r17, r25
    299a:	2a 2d       	mov	r18, r10
    299c:	3b 2d       	mov	r19, r11
    299e:	4c 2d       	mov	r20, r12
    29a0:	5d 2d       	mov	r21, r13
    29a2:	6e 2d       	mov	r22, r14
    29a4:	7f 2d       	mov	r23, r15
    29a6:	80 2f       	mov	r24, r16
    29a8:	91 2f       	mov	r25, r17
    29aa:	e9 ad       	ldd	r30, Y+57	; 0x39
    29ac:	e2 2b       	or	r30, r18
    29ae:	e9 af       	std	Y+57, r30	; 0x39
    29b0:	ea ad       	ldd	r30, Y+58	; 0x3a
    29b2:	e3 2b       	or	r30, r19
    29b4:	ea af       	std	Y+58, r30	; 0x3a
    29b6:	eb ad       	ldd	r30, Y+59	; 0x3b
    29b8:	e4 2b       	or	r30, r20
    29ba:	eb af       	std	Y+59, r30	; 0x3b
    29bc:	ec ad       	ldd	r30, Y+60	; 0x3c
    29be:	e5 2b       	or	r30, r21
    29c0:	ec af       	std	Y+60, r30	; 0x3c
    29c2:	ed ad       	ldd	r30, Y+61	; 0x3d
    29c4:	e6 2b       	or	r30, r22
    29c6:	ed af       	std	Y+61, r30	; 0x3d
    29c8:	ee ad       	ldd	r30, Y+62	; 0x3e
    29ca:	e7 2b       	or	r30, r23
    29cc:	ee af       	std	Y+62, r30	; 0x3e
    29ce:	ef ad       	ldd	r30, Y+63	; 0x3f
    29d0:	e8 2b       	or	r30, r24
    29d2:	ef af       	std	Y+63, r30	; 0x3f
    29d4:	fe 01       	movw	r30, r28
    29d6:	e0 5c       	subi	r30, 0xC0	; 192
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	e0 81       	ld	r30, Z
    29dc:	8e 2f       	mov	r24, r30
    29de:	89 2b       	or	r24, r25
    29e0:	fe 01       	movw	r30, r28
    29e2:	e0 5c       	subi	r30, 0xC0	; 192
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)LCD_inenuSendCommand(0x80)<<27 )); //2 lines, 5*7 ,4 bit mode
    29e8:	80 e8       	ldi	r24, 0x80	; 128
    29ea:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <LCD_inenuSendCommand>
    29ee:	a8 2e       	mov	r10, r24
    29f0:	bb 24       	eor	r11, r11
    29f2:	cc 24       	eor	r12, r12
    29f4:	dd 24       	eor	r13, r13
    29f6:	ee 24       	eor	r14, r14
    29f8:	ff 24       	eor	r15, r15
    29fa:	87 01       	movw	r16, r14
    29fc:	2a 2d       	mov	r18, r10
    29fe:	3b 2d       	mov	r19, r11
    2a00:	4c 2d       	mov	r20, r12
    2a02:	5d 2d       	mov	r21, r13
    2a04:	6e 2d       	mov	r22, r14
    2a06:	7f 2d       	mov	r23, r15
    2a08:	80 2f       	mov	r24, r16
    2a0a:	91 2f       	mov	r25, r17
    2a0c:	0b e1       	ldi	r16, 0x1B	; 27
    2a0e:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2a12:	a2 2e       	mov	r10, r18
    2a14:	b3 2e       	mov	r11, r19
    2a16:	c4 2e       	mov	r12, r20
    2a18:	d5 2e       	mov	r13, r21
    2a1a:	e6 2e       	mov	r14, r22
    2a1c:	f7 2e       	mov	r15, r23
    2a1e:	08 2f       	mov	r16, r24
    2a20:	19 2f       	mov	r17, r25
    2a22:	2a 2d       	mov	r18, r10
    2a24:	3b 2d       	mov	r19, r11
    2a26:	4c 2d       	mov	r20, r12
    2a28:	5d 2d       	mov	r21, r13
    2a2a:	6e 2d       	mov	r22, r14
    2a2c:	7f 2d       	mov	r23, r15
    2a2e:	80 2f       	mov	r24, r16
    2a30:	91 2f       	mov	r25, r17
    2a32:	e9 ad       	ldd	r30, Y+57	; 0x39
    2a34:	e2 2b       	or	r30, r18
    2a36:	e9 af       	std	Y+57, r30	; 0x39
    2a38:	ea ad       	ldd	r30, Y+58	; 0x3a
    2a3a:	e3 2b       	or	r30, r19
    2a3c:	ea af       	std	Y+58, r30	; 0x3a
    2a3e:	eb ad       	ldd	r30, Y+59	; 0x3b
    2a40:	e4 2b       	or	r30, r20
    2a42:	eb af       	std	Y+59, r30	; 0x3b
    2a44:	ec ad       	ldd	r30, Y+60	; 0x3c
    2a46:	e5 2b       	or	r30, r21
    2a48:	ec af       	std	Y+60, r30	; 0x3c
    2a4a:	ed ad       	ldd	r30, Y+61	; 0x3d
    2a4c:	e6 2b       	or	r30, r22
    2a4e:	ed af       	std	Y+61, r30	; 0x3d
    2a50:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a52:	e7 2b       	or	r30, r23
    2a54:	ee af       	std	Y+62, r30	; 0x3e
    2a56:	ef ad       	ldd	r30, Y+63	; 0x3f
    2a58:	e8 2b       	or	r30, r24
    2a5a:	ef af       	std	Y+63, r30	; 0x3f
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e0 5c       	subi	r30, 0xC0	; 192
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	e0 81       	ld	r30, Z
    2a64:	8e 2f       	mov	r24, r30
    2a66:	89 2b       	or	r24, r25
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e0 5c       	subi	r30, 0xC0	; 192
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 83       	st	Z, r24
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	a0 e8       	ldi	r26, 0x80	; 128
    2a76:	bf e3       	ldi	r27, 0x3F	; 63
    2a78:	8f a3       	std	Y+39, r24	; 0x27
    2a7a:	98 a7       	std	Y+40, r25	; 0x28
    2a7c:	a9 a7       	std	Y+41, r26	; 0x29
    2a7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a80:	6f a1       	ldd	r22, Y+39	; 0x27
    2a82:	78 a5       	ldd	r23, Y+40	; 0x28
    2a84:	89 a5       	ldd	r24, Y+41	; 0x29
    2a86:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	4a e7       	ldi	r20, 0x7A	; 122
    2a8e:	53 e4       	ldi	r21, 0x43	; 67
    2a90:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	8b a3       	std	Y+35, r24	; 0x23
    2a9a:	9c a3       	std	Y+36, r25	; 0x24
    2a9c:	ad a3       	std	Y+37, r26	; 0x25
    2a9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2aa0:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa2:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa4:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa6:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e8       	ldi	r20, 0x80	; 128
    2aae:	5f e3       	ldi	r21, 0x3F	; 63
    2ab0:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    2ab4:	88 23       	and	r24, r24
    2ab6:	2c f4       	brge	.+10     	; 0x2ac2 <LCD_enuInit+0x6b2>
		__ticks = 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9a a3       	std	Y+34, r25	; 0x22
    2abe:	89 a3       	std	Y+33, r24	; 0x21
    2ac0:	3f c0       	rjmp	.+126    	; 0x2b40 <LCD_enuInit+0x730>
	else if (__tmp > 65535)
    2ac2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ac4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	3f ef       	ldi	r19, 0xFF	; 255
    2ace:	4f e7       	ldi	r20, 0x7F	; 127
    2ad0:	57 e4       	ldi	r21, 0x47	; 71
    2ad2:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    2ad6:	18 16       	cp	r1, r24
    2ad8:	4c f5       	brge	.+82     	; 0x2b2c <LCD_enuInit+0x71c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ada:	6f a1       	ldd	r22, Y+39	; 0x27
    2adc:	78 a5       	ldd	r23, Y+40	; 0x28
    2ade:	89 a5       	ldd	r24, Y+41	; 0x29
    2ae0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e2       	ldi	r20, 0x20	; 32
    2ae8:	51 e4       	ldi	r21, 0x41	; 65
    2aea:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	bc 01       	movw	r22, r24
    2af4:	cd 01       	movw	r24, r26
    2af6:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	9a a3       	std	Y+34, r25	; 0x22
    2b00:	89 a3       	std	Y+33, r24	; 0x21
    2b02:	0f c0       	rjmp	.+30     	; 0x2b22 <LCD_enuInit+0x712>
    2b04:	89 e1       	ldi	r24, 0x19	; 25
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	98 a3       	std	Y+32, r25	; 0x20
    2b0a:	8f 8f       	std	Y+31, r24	; 0x1f
    2b0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b0e:	98 a1       	ldd	r25, Y+32	; 0x20
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <LCD_enuInit+0x700>
    2b14:	98 a3       	std	Y+32, r25	; 0x20
    2b16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b18:	89 a1       	ldd	r24, Y+33	; 0x21
    2b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	9a a3       	std	Y+34, r25	; 0x22
    2b20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b22:	89 a1       	ldd	r24, Y+33	; 0x21
    2b24:	9a a1       	ldd	r25, Y+34	; 0x22
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	69 f7       	brne	.-38     	; 0x2b04 <LCD_enuInit+0x6f4>
    2b2a:	14 c0       	rjmp	.+40     	; 0x2b54 <LCD_enuInit+0x744>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b30:	8d a1       	ldd	r24, Y+37	; 0x25
    2b32:	9e a1       	ldd	r25, Y+38	; 0x26
    2b34:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	9a a3       	std	Y+34, r25	; 0x22
    2b3e:	89 a3       	std	Y+33, r24	; 0x21
    2b40:	89 a1       	ldd	r24, Y+33	; 0x21
    2b42:	9a a1       	ldd	r25, Y+34	; 0x22
    2b44:	9e 8f       	std	Y+30, r25	; 0x1e
    2b46:	8d 8f       	std	Y+29, r24	; 0x1d
    2b48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <LCD_enuInit+0x73c>
    2b50:	9e 8f       	std	Y+30, r25	; 0x1e
    2b52:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Local_u64Check |= (((u64)LCD_inenuSendCommand(0x00)<<30 ));
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <LCD_inenuSendCommand>
    2b5a:	a8 2e       	mov	r10, r24
    2b5c:	bb 24       	eor	r11, r11
    2b5e:	cc 24       	eor	r12, r12
    2b60:	dd 24       	eor	r13, r13
    2b62:	ee 24       	eor	r14, r14
    2b64:	ff 24       	eor	r15, r15
    2b66:	87 01       	movw	r16, r14
    2b68:	2a 2d       	mov	r18, r10
    2b6a:	3b 2d       	mov	r19, r11
    2b6c:	4c 2d       	mov	r20, r12
    2b6e:	5d 2d       	mov	r21, r13
    2b70:	6e 2d       	mov	r22, r14
    2b72:	7f 2d       	mov	r23, r15
    2b74:	80 2f       	mov	r24, r16
    2b76:	91 2f       	mov	r25, r17
    2b78:	0e e1       	ldi	r16, 0x1E	; 30
    2b7a:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2b7e:	a2 2e       	mov	r10, r18
    2b80:	b3 2e       	mov	r11, r19
    2b82:	c4 2e       	mov	r12, r20
    2b84:	d5 2e       	mov	r13, r21
    2b86:	e6 2e       	mov	r14, r22
    2b88:	f7 2e       	mov	r15, r23
    2b8a:	08 2f       	mov	r16, r24
    2b8c:	19 2f       	mov	r17, r25
    2b8e:	2a 2d       	mov	r18, r10
    2b90:	3b 2d       	mov	r19, r11
    2b92:	4c 2d       	mov	r20, r12
    2b94:	5d 2d       	mov	r21, r13
    2b96:	6e 2d       	mov	r22, r14
    2b98:	7f 2d       	mov	r23, r15
    2b9a:	80 2f       	mov	r24, r16
    2b9c:	91 2f       	mov	r25, r17
    2b9e:	e9 ad       	ldd	r30, Y+57	; 0x39
    2ba0:	e2 2b       	or	r30, r18
    2ba2:	e9 af       	std	Y+57, r30	; 0x39
    2ba4:	ea ad       	ldd	r30, Y+58	; 0x3a
    2ba6:	e3 2b       	or	r30, r19
    2ba8:	ea af       	std	Y+58, r30	; 0x3a
    2baa:	eb ad       	ldd	r30, Y+59	; 0x3b
    2bac:	e4 2b       	or	r30, r20
    2bae:	eb af       	std	Y+59, r30	; 0x3b
    2bb0:	ec ad       	ldd	r30, Y+60	; 0x3c
    2bb2:	e5 2b       	or	r30, r21
    2bb4:	ec af       	std	Y+60, r30	; 0x3c
    2bb6:	ed ad       	ldd	r30, Y+61	; 0x3d
    2bb8:	e6 2b       	or	r30, r22
    2bba:	ed af       	std	Y+61, r30	; 0x3d
    2bbc:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bbe:	e7 2b       	or	r30, r23
    2bc0:	ee af       	std	Y+62, r30	; 0x3e
    2bc2:	ef ad       	ldd	r30, Y+63	; 0x3f
    2bc4:	e8 2b       	or	r30, r24
    2bc6:	ef af       	std	Y+63, r30	; 0x3f
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e0 5c       	subi	r30, 0xC0	; 192
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	e0 81       	ld	r30, Z
    2bd0:	8e 2f       	mov	r24, r30
    2bd2:	89 2b       	or	r24, r25
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e0 5c       	subi	r30, 0xC0	; 192
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)LCD_inenuSendCommand(0xC0)<<33 )); //Display ON, Cursor ON ,Blink ON -> F0
    2bdc:	80 ec       	ldi	r24, 0xC0	; 192
    2bde:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <LCD_inenuSendCommand>
    2be2:	a8 2e       	mov	r10, r24
    2be4:	bb 24       	eor	r11, r11
    2be6:	cc 24       	eor	r12, r12
    2be8:	dd 24       	eor	r13, r13
    2bea:	ee 24       	eor	r14, r14
    2bec:	ff 24       	eor	r15, r15
    2bee:	87 01       	movw	r16, r14
    2bf0:	2a 2d       	mov	r18, r10
    2bf2:	3b 2d       	mov	r19, r11
    2bf4:	4c 2d       	mov	r20, r12
    2bf6:	5d 2d       	mov	r21, r13
    2bf8:	6e 2d       	mov	r22, r14
    2bfa:	7f 2d       	mov	r23, r15
    2bfc:	80 2f       	mov	r24, r16
    2bfe:	91 2f       	mov	r25, r17
    2c00:	01 e2       	ldi	r16, 0x21	; 33
    2c02:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2c06:	a2 2e       	mov	r10, r18
    2c08:	b3 2e       	mov	r11, r19
    2c0a:	c4 2e       	mov	r12, r20
    2c0c:	d5 2e       	mov	r13, r21
    2c0e:	e6 2e       	mov	r14, r22
    2c10:	f7 2e       	mov	r15, r23
    2c12:	08 2f       	mov	r16, r24
    2c14:	19 2f       	mov	r17, r25
    2c16:	2a 2d       	mov	r18, r10
    2c18:	3b 2d       	mov	r19, r11
    2c1a:	4c 2d       	mov	r20, r12
    2c1c:	5d 2d       	mov	r21, r13
    2c1e:	6e 2d       	mov	r22, r14
    2c20:	7f 2d       	mov	r23, r15
    2c22:	80 2f       	mov	r24, r16
    2c24:	91 2f       	mov	r25, r17
    2c26:	e9 ad       	ldd	r30, Y+57	; 0x39
    2c28:	e2 2b       	or	r30, r18
    2c2a:	e9 af       	std	Y+57, r30	; 0x39
    2c2c:	ea ad       	ldd	r30, Y+58	; 0x3a
    2c2e:	e3 2b       	or	r30, r19
    2c30:	ea af       	std	Y+58, r30	; 0x3a
    2c32:	eb ad       	ldd	r30, Y+59	; 0x3b
    2c34:	e4 2b       	or	r30, r20
    2c36:	eb af       	std	Y+59, r30	; 0x3b
    2c38:	ec ad       	ldd	r30, Y+60	; 0x3c
    2c3a:	e5 2b       	or	r30, r21
    2c3c:	ec af       	std	Y+60, r30	; 0x3c
    2c3e:	ed ad       	ldd	r30, Y+61	; 0x3d
    2c40:	e6 2b       	or	r30, r22
    2c42:	ed af       	std	Y+61, r30	; 0x3d
    2c44:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c46:	e7 2b       	or	r30, r23
    2c48:	ee af       	std	Y+62, r30	; 0x3e
    2c4a:	ef ad       	ldd	r30, Y+63	; 0x3f
    2c4c:	e8 2b       	or	r30, r24
    2c4e:	ef af       	std	Y+63, r30	; 0x3f
    2c50:	fe 01       	movw	r30, r28
    2c52:	e0 5c       	subi	r30, 0xC0	; 192
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	e0 81       	ld	r30, Z
    2c58:	8e 2f       	mov	r24, r30
    2c5a:	89 2b       	or	r24, r25
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	e0 5c       	subi	r30, 0xC0	; 192
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	80 83       	st	Z, r24
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	a0 e8       	ldi	r26, 0x80	; 128
    2c6a:	bf e3       	ldi	r27, 0x3F	; 63
    2c6c:	89 8f       	std	Y+25, r24	; 0x19
    2c6e:	9a 8f       	std	Y+26, r25	; 0x1a
    2c70:	ab 8f       	std	Y+27, r26	; 0x1b
    2c72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c74:	69 8d       	ldd	r22, Y+25	; 0x19
    2c76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	4a e7       	ldi	r20, 0x7A	; 122
    2c82:	53 e4       	ldi	r21, 0x43	; 67
    2c84:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	8d 8b       	std	Y+21, r24	; 0x15
    2c8e:	9e 8b       	std	Y+22, r25	; 0x16
    2c90:	af 8b       	std	Y+23, r26	; 0x17
    2c92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c94:	6d 89       	ldd	r22, Y+21	; 0x15
    2c96:	7e 89       	ldd	r23, Y+22	; 0x16
    2c98:	8f 89       	ldd	r24, Y+23	; 0x17
    2c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e8       	ldi	r20, 0x80	; 128
    2ca2:	5f e3       	ldi	r21, 0x3F	; 63
    2ca4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    2ca8:	88 23       	and	r24, r24
    2caa:	2c f4       	brge	.+10     	; 0x2cb6 <LCD_enuInit+0x8a6>
		__ticks = 1;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	9c 8b       	std	Y+20, r25	; 0x14
    2cb2:	8b 8b       	std	Y+19, r24	; 0x13
    2cb4:	3f c0       	rjmp	.+126    	; 0x2d34 <LCD_enuInit+0x924>
	else if (__tmp > 65535)
    2cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cba:	8f 89       	ldd	r24, Y+23	; 0x17
    2cbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	3f ef       	ldi	r19, 0xFF	; 255
    2cc2:	4f e7       	ldi	r20, 0x7F	; 127
    2cc4:	57 e4       	ldi	r21, 0x47	; 71
    2cc6:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    2cca:	18 16       	cp	r1, r24
    2ccc:	4c f5       	brge	.+82     	; 0x2d20 <LCD_enuInit+0x910>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cce:	69 8d       	ldd	r22, Y+25	; 0x19
    2cd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e2       	ldi	r20, 0x20	; 32
    2cdc:	51 e4       	ldi	r21, 0x41	; 65
    2cde:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	9c 8b       	std	Y+20, r25	; 0x14
    2cf4:	8b 8b       	std	Y+19, r24	; 0x13
    2cf6:	0f c0       	rjmp	.+30     	; 0x2d16 <LCD_enuInit+0x906>
    2cf8:	89 e1       	ldi	r24, 0x19	; 25
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	9a 8b       	std	Y+18, r25	; 0x12
    2cfe:	89 8b       	std	Y+17, r24	; 0x11
    2d00:	89 89       	ldd	r24, Y+17	; 0x11
    2d02:	9a 89       	ldd	r25, Y+18	; 0x12
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <LCD_enuInit+0x8f4>
    2d08:	9a 8b       	std	Y+18, r25	; 0x12
    2d0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	9c 8b       	std	Y+20, r25	; 0x14
    2d14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d16:	8b 89       	ldd	r24, Y+19	; 0x13
    2d18:	9c 89       	ldd	r25, Y+20	; 0x14
    2d1a:	00 97       	sbiw	r24, 0x00	; 0
    2d1c:	69 f7       	brne	.-38     	; 0x2cf8 <LCD_enuInit+0x8e8>
    2d1e:	14 c0       	rjmp	.+40     	; 0x2d48 <LCD_enuInit+0x938>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d20:	6d 89       	ldd	r22, Y+21	; 0x15
    2d22:	7e 89       	ldd	r23, Y+22	; 0x16
    2d24:	8f 89       	ldd	r24, Y+23	; 0x17
    2d26:	98 8d       	ldd	r25, Y+24	; 0x18
    2d28:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	9c 8b       	std	Y+20, r25	; 0x14
    2d32:	8b 8b       	std	Y+19, r24	; 0x13
    2d34:	8b 89       	ldd	r24, Y+19	; 0x13
    2d36:	9c 89       	ldd	r25, Y+20	; 0x14
    2d38:	98 8b       	std	Y+16, r25	; 0x10
    2d3a:	8f 87       	std	Y+15, r24	; 0x0f
    2d3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3e:	98 89       	ldd	r25, Y+16	; 0x10
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	f1 f7       	brne	.-4      	; 0x2d40 <LCD_enuInit+0x930>
    2d44:	98 8b       	std	Y+16, r25	; 0x10
    2d46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Local_u64Check |= (((u64)LCD_inenuSendCommand(0x00)<<36 ));
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <LCD_inenuSendCommand>
    2d4e:	a8 2e       	mov	r10, r24
    2d50:	bb 24       	eor	r11, r11
    2d52:	cc 24       	eor	r12, r12
    2d54:	dd 24       	eor	r13, r13
    2d56:	ee 24       	eor	r14, r14
    2d58:	ff 24       	eor	r15, r15
    2d5a:	87 01       	movw	r16, r14
    2d5c:	2a 2d       	mov	r18, r10
    2d5e:	3b 2d       	mov	r19, r11
    2d60:	4c 2d       	mov	r20, r12
    2d62:	5d 2d       	mov	r21, r13
    2d64:	6e 2d       	mov	r22, r14
    2d66:	7f 2d       	mov	r23, r15
    2d68:	80 2f       	mov	r24, r16
    2d6a:	91 2f       	mov	r25, r17
    2d6c:	04 e2       	ldi	r16, 0x24	; 36
    2d6e:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2d72:	a2 2e       	mov	r10, r18
    2d74:	b3 2e       	mov	r11, r19
    2d76:	c4 2e       	mov	r12, r20
    2d78:	d5 2e       	mov	r13, r21
    2d7a:	e6 2e       	mov	r14, r22
    2d7c:	f7 2e       	mov	r15, r23
    2d7e:	08 2f       	mov	r16, r24
    2d80:	19 2f       	mov	r17, r25
    2d82:	2a 2d       	mov	r18, r10
    2d84:	3b 2d       	mov	r19, r11
    2d86:	4c 2d       	mov	r20, r12
    2d88:	5d 2d       	mov	r21, r13
    2d8a:	6e 2d       	mov	r22, r14
    2d8c:	7f 2d       	mov	r23, r15
    2d8e:	80 2f       	mov	r24, r16
    2d90:	91 2f       	mov	r25, r17
    2d92:	e9 ad       	ldd	r30, Y+57	; 0x39
    2d94:	e2 2b       	or	r30, r18
    2d96:	e9 af       	std	Y+57, r30	; 0x39
    2d98:	ea ad       	ldd	r30, Y+58	; 0x3a
    2d9a:	e3 2b       	or	r30, r19
    2d9c:	ea af       	std	Y+58, r30	; 0x3a
    2d9e:	eb ad       	ldd	r30, Y+59	; 0x3b
    2da0:	e4 2b       	or	r30, r20
    2da2:	eb af       	std	Y+59, r30	; 0x3b
    2da4:	ec ad       	ldd	r30, Y+60	; 0x3c
    2da6:	e5 2b       	or	r30, r21
    2da8:	ec af       	std	Y+60, r30	; 0x3c
    2daa:	ed ad       	ldd	r30, Y+61	; 0x3d
    2dac:	e6 2b       	or	r30, r22
    2dae:	ed af       	std	Y+61, r30	; 0x3d
    2db0:	ee ad       	ldd	r30, Y+62	; 0x3e
    2db2:	e7 2b       	or	r30, r23
    2db4:	ee af       	std	Y+62, r30	; 0x3e
    2db6:	ef ad       	ldd	r30, Y+63	; 0x3f
    2db8:	e8 2b       	or	r30, r24
    2dba:	ef af       	std	Y+63, r30	; 0x3f
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e0 5c       	subi	r30, 0xC0	; 192
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	e0 81       	ld	r30, Z
    2dc4:	8e 2f       	mov	r24, r30
    2dc6:	89 2b       	or	r24, r25
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e0 5c       	subi	r30, 0xC0	; 192
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)LCD_inenuSendCommand(0x10)<<39 )); //Display Clear
    2dd0:	80 e1       	ldi	r24, 0x10	; 16
    2dd2:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <LCD_inenuSendCommand>
    2dd6:	a8 2e       	mov	r10, r24
    2dd8:	bb 24       	eor	r11, r11
    2dda:	cc 24       	eor	r12, r12
    2ddc:	dd 24       	eor	r13, r13
    2dde:	ee 24       	eor	r14, r14
    2de0:	ff 24       	eor	r15, r15
    2de2:	87 01       	movw	r16, r14
    2de4:	2a 2d       	mov	r18, r10
    2de6:	3b 2d       	mov	r19, r11
    2de8:	4c 2d       	mov	r20, r12
    2dea:	5d 2d       	mov	r21, r13
    2dec:	6e 2d       	mov	r22, r14
    2dee:	7f 2d       	mov	r23, r15
    2df0:	80 2f       	mov	r24, r16
    2df2:	91 2f       	mov	r25, r17
    2df4:	07 e2       	ldi	r16, 0x27	; 39
    2df6:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2dfa:	a2 2e       	mov	r10, r18
    2dfc:	b3 2e       	mov	r11, r19
    2dfe:	c4 2e       	mov	r12, r20
    2e00:	d5 2e       	mov	r13, r21
    2e02:	e6 2e       	mov	r14, r22
    2e04:	f7 2e       	mov	r15, r23
    2e06:	08 2f       	mov	r16, r24
    2e08:	19 2f       	mov	r17, r25
    2e0a:	2a 2d       	mov	r18, r10
    2e0c:	3b 2d       	mov	r19, r11
    2e0e:	4c 2d       	mov	r20, r12
    2e10:	5d 2d       	mov	r21, r13
    2e12:	6e 2d       	mov	r22, r14
    2e14:	7f 2d       	mov	r23, r15
    2e16:	80 2f       	mov	r24, r16
    2e18:	91 2f       	mov	r25, r17
    2e1a:	e9 ad       	ldd	r30, Y+57	; 0x39
    2e1c:	e2 2b       	or	r30, r18
    2e1e:	e9 af       	std	Y+57, r30	; 0x39
    2e20:	ea ad       	ldd	r30, Y+58	; 0x3a
    2e22:	e3 2b       	or	r30, r19
    2e24:	ea af       	std	Y+58, r30	; 0x3a
    2e26:	eb ad       	ldd	r30, Y+59	; 0x3b
    2e28:	e4 2b       	or	r30, r20
    2e2a:	eb af       	std	Y+59, r30	; 0x3b
    2e2c:	ec ad       	ldd	r30, Y+60	; 0x3c
    2e2e:	e5 2b       	or	r30, r21
    2e30:	ec af       	std	Y+60, r30	; 0x3c
    2e32:	ed ad       	ldd	r30, Y+61	; 0x3d
    2e34:	e6 2b       	or	r30, r22
    2e36:	ed af       	std	Y+61, r30	; 0x3d
    2e38:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e3a:	e7 2b       	or	r30, r23
    2e3c:	ee af       	std	Y+62, r30	; 0x3e
    2e3e:	ef ad       	ldd	r30, Y+63	; 0x3f
    2e40:	e8 2b       	or	r30, r24
    2e42:	ef af       	std	Y+63, r30	; 0x3f
    2e44:	fe 01       	movw	r30, r28
    2e46:	e0 5c       	subi	r30, 0xC0	; 192
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	e0 81       	ld	r30, Z
    2e4c:	8e 2f       	mov	r24, r30
    2e4e:	89 2b       	or	r24, r25
    2e50:	fe 01       	movw	r30, r28
    2e52:	e0 5c       	subi	r30, 0xC0	; 192
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	80 83       	st	Z, r24
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	a0 e0       	ldi	r26, 0x00	; 0
    2e5e:	b0 e4       	ldi	r27, 0x40	; 64
    2e60:	8b 87       	std	Y+11, r24	; 0x0b
    2e62:	9c 87       	std	Y+12, r25	; 0x0c
    2e64:	ad 87       	std	Y+13, r26	; 0x0d
    2e66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	4a e7       	ldi	r20, 0x7A	; 122
    2e76:	53 e4       	ldi	r21, 0x43	; 67
    2e78:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	8f 83       	std	Y+7, r24	; 0x07
    2e82:	98 87       	std	Y+8, r25	; 0x08
    2e84:	a9 87       	std	Y+9, r26	; 0x09
    2e86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e88:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8a:	78 85       	ldd	r23, Y+8	; 0x08
    2e8c:	89 85       	ldd	r24, Y+9	; 0x09
    2e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	5f e3       	ldi	r21, 0x3F	; 63
    2e98:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	2c f4       	brge	.+10     	; 0x2eaa <LCD_enuInit+0xa9a>
		__ticks = 1;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9e 83       	std	Y+6, r25	; 0x06
    2ea6:	8d 83       	std	Y+5, r24	; 0x05
    2ea8:	3f c0       	rjmp	.+126    	; 0x2f28 <LCD_enuInit+0xb18>
	else if (__tmp > 65535)
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	3f ef       	ldi	r19, 0xFF	; 255
    2eb6:	4f e7       	ldi	r20, 0x7F	; 127
    2eb8:	57 e4       	ldi	r21, 0x47	; 71
    2eba:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    2ebe:	18 16       	cp	r1, r24
    2ec0:	4c f5       	brge	.+82     	; 0x2f14 <LCD_enuInit+0xb04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e2       	ldi	r20, 0x20	; 32
    2ed0:	51 e4       	ldi	r21, 0x41	; 65
    2ed2:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	bc 01       	movw	r22, r24
    2edc:	cd 01       	movw	r24, r26
    2ede:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	9e 83       	std	Y+6, r25	; 0x06
    2ee8:	8d 83       	std	Y+5, r24	; 0x05
    2eea:	0f c0       	rjmp	.+30     	; 0x2f0a <LCD_enuInit+0xafa>
    2eec:	89 e1       	ldi	r24, 0x19	; 25
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	9c 83       	std	Y+4, r25	; 0x04
    2ef2:	8b 83       	std	Y+3, r24	; 0x03
    2ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <LCD_enuInit+0xae8>
    2efc:	9c 83       	std	Y+4, r25	; 0x04
    2efe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f00:	8d 81       	ldd	r24, Y+5	; 0x05
    2f02:	9e 81       	ldd	r25, Y+6	; 0x06
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	9e 83       	std	Y+6, r25	; 0x06
    2f08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0e:	00 97       	sbiw	r24, 0x00	; 0
    2f10:	69 f7       	brne	.-38     	; 0x2eec <LCD_enuInit+0xadc>
    2f12:	14 c0       	rjmp	.+40     	; 0x2f3c <LCD_enuInit+0xb2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f14:	6f 81       	ldd	r22, Y+7	; 0x07
    2f16:	78 85       	ldd	r23, Y+8	; 0x08
    2f18:	89 85       	ldd	r24, Y+9	; 0x09
    2f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	9e 83       	std	Y+6, r25	; 0x06
    2f26:	8d 83       	std	Y+5, r24	; 0x05
    2f28:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2c:	9a 83       	std	Y+2, r25	; 0x02
    2f2e:	89 83       	std	Y+1, r24	; 0x01
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	9a 81       	ldd	r25, Y+2	; 0x02
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <LCD_enuInit+0xb24>
    2f38:	9a 83       	std	Y+2, r25	; 0x02
    2f3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Local_u64Check |= (((u64)LCD_inenuSendCommand(0x00)<<42 ));	//  increment AC and NO shift
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <LCD_inenuSendCommand>
    2f42:	a8 2e       	mov	r10, r24
    2f44:	bb 24       	eor	r11, r11
    2f46:	cc 24       	eor	r12, r12
    2f48:	dd 24       	eor	r13, r13
    2f4a:	ee 24       	eor	r14, r14
    2f4c:	ff 24       	eor	r15, r15
    2f4e:	87 01       	movw	r16, r14
    2f50:	2a 2d       	mov	r18, r10
    2f52:	3b 2d       	mov	r19, r11
    2f54:	4c 2d       	mov	r20, r12
    2f56:	5d 2d       	mov	r21, r13
    2f58:	6e 2d       	mov	r22, r14
    2f5a:	7f 2d       	mov	r23, r15
    2f5c:	80 2f       	mov	r24, r16
    2f5e:	91 2f       	mov	r25, r17
    2f60:	0a e2       	ldi	r16, 0x2A	; 42
    2f62:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2f66:	a2 2e       	mov	r10, r18
    2f68:	b3 2e       	mov	r11, r19
    2f6a:	c4 2e       	mov	r12, r20
    2f6c:	d5 2e       	mov	r13, r21
    2f6e:	e6 2e       	mov	r14, r22
    2f70:	f7 2e       	mov	r15, r23
    2f72:	08 2f       	mov	r16, r24
    2f74:	19 2f       	mov	r17, r25
    2f76:	2a 2d       	mov	r18, r10
    2f78:	3b 2d       	mov	r19, r11
    2f7a:	4c 2d       	mov	r20, r12
    2f7c:	5d 2d       	mov	r21, r13
    2f7e:	6e 2d       	mov	r22, r14
    2f80:	7f 2d       	mov	r23, r15
    2f82:	80 2f       	mov	r24, r16
    2f84:	91 2f       	mov	r25, r17
    2f86:	e9 ad       	ldd	r30, Y+57	; 0x39
    2f88:	e2 2b       	or	r30, r18
    2f8a:	e9 af       	std	Y+57, r30	; 0x39
    2f8c:	ea ad       	ldd	r30, Y+58	; 0x3a
    2f8e:	e3 2b       	or	r30, r19
    2f90:	ea af       	std	Y+58, r30	; 0x3a
    2f92:	eb ad       	ldd	r30, Y+59	; 0x3b
    2f94:	e4 2b       	or	r30, r20
    2f96:	eb af       	std	Y+59, r30	; 0x3b
    2f98:	ec ad       	ldd	r30, Y+60	; 0x3c
    2f9a:	e5 2b       	or	r30, r21
    2f9c:	ec af       	std	Y+60, r30	; 0x3c
    2f9e:	ed ad       	ldd	r30, Y+61	; 0x3d
    2fa0:	e6 2b       	or	r30, r22
    2fa2:	ed af       	std	Y+61, r30	; 0x3d
    2fa4:	ee ad       	ldd	r30, Y+62	; 0x3e
    2fa6:	e7 2b       	or	r30, r23
    2fa8:	ee af       	std	Y+62, r30	; 0x3e
    2faa:	ef ad       	ldd	r30, Y+63	; 0x3f
    2fac:	e8 2b       	or	r30, r24
    2fae:	ef af       	std	Y+63, r30	; 0x3f
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e0 5c       	subi	r30, 0xC0	; 192
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	e0 81       	ld	r30, Z
    2fb8:	8e 2f       	mov	r24, r30
    2fba:	89 2b       	or	r24, r25
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e0 5c       	subi	r30, 0xC0	; 192
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	80 83       	st	Z, r24
	Local_u64Check |= (((u64)LCD_inenuSendCommand(0x60)<<45 ));
    2fc4:	80 e6       	ldi	r24, 0x60	; 96
    2fc6:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <LCD_inenuSendCommand>
    2fca:	a8 2e       	mov	r10, r24
    2fcc:	bb 24       	eor	r11, r11
    2fce:	cc 24       	eor	r12, r12
    2fd0:	dd 24       	eor	r13, r13
    2fd2:	ee 24       	eor	r14, r14
    2fd4:	ff 24       	eor	r15, r15
    2fd6:	87 01       	movw	r16, r14
    2fd8:	2a 2d       	mov	r18, r10
    2fda:	3b 2d       	mov	r19, r11
    2fdc:	4c 2d       	mov	r20, r12
    2fde:	5d 2d       	mov	r21, r13
    2fe0:	6e 2d       	mov	r22, r14
    2fe2:	7f 2d       	mov	r23, r15
    2fe4:	80 2f       	mov	r24, r16
    2fe6:	91 2f       	mov	r25, r17
    2fe8:	0d e2       	ldi	r16, 0x2D	; 45
    2fea:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2fee:	a2 2e       	mov	r10, r18
    2ff0:	b3 2e       	mov	r11, r19
    2ff2:	c4 2e       	mov	r12, r20
    2ff4:	d5 2e       	mov	r13, r21
    2ff6:	e6 2e       	mov	r14, r22
    2ff8:	f7 2e       	mov	r15, r23
    2ffa:	08 2f       	mov	r16, r24
    2ffc:	19 2f       	mov	r17, r25
    2ffe:	2a 2d       	mov	r18, r10
    3000:	3b 2d       	mov	r19, r11
    3002:	4c 2d       	mov	r20, r12
    3004:	5d 2d       	mov	r21, r13
    3006:	6e 2d       	mov	r22, r14
    3008:	7f 2d       	mov	r23, r15
    300a:	80 2f       	mov	r24, r16
    300c:	91 2f       	mov	r25, r17
    300e:	e9 ad       	ldd	r30, Y+57	; 0x39
    3010:	e2 2b       	or	r30, r18
    3012:	e9 af       	std	Y+57, r30	; 0x39
    3014:	ea ad       	ldd	r30, Y+58	; 0x3a
    3016:	e3 2b       	or	r30, r19
    3018:	ea af       	std	Y+58, r30	; 0x3a
    301a:	eb ad       	ldd	r30, Y+59	; 0x3b
    301c:	e4 2b       	or	r30, r20
    301e:	eb af       	std	Y+59, r30	; 0x3b
    3020:	ec ad       	ldd	r30, Y+60	; 0x3c
    3022:	e5 2b       	or	r30, r21
    3024:	ec af       	std	Y+60, r30	; 0x3c
    3026:	ed ad       	ldd	r30, Y+61	; 0x3d
    3028:	e6 2b       	or	r30, r22
    302a:	ed af       	std	Y+61, r30	; 0x3d
    302c:	ee ad       	ldd	r30, Y+62	; 0x3e
    302e:	e7 2b       	or	r30, r23
    3030:	ee af       	std	Y+62, r30	; 0x3e
    3032:	ef ad       	ldd	r30, Y+63	; 0x3f
    3034:	e8 2b       	or	r30, r24
    3036:	ef af       	std	Y+63, r30	; 0x3f
    3038:	fe 01       	movw	r30, r28
    303a:	e0 5c       	subi	r30, 0xC0	; 192
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	e0 81       	ld	r30, Z
    3040:	8e 2f       	mov	r24, r30
    3042:	89 2b       	or	r24, r25
    3044:	fe 01       	movw	r30, r28
    3046:	e0 5c       	subi	r30, 0xC0	; 192
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	80 83       	st	Z, r24


	Global_u8Flag = 1;
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	80 93 6c 02 	sts	0x026C, r24


	for(Local_u8Iterator = 0; Local_u8Iterator < 48; Local_u8Iterator+=3)
    3052:	fe 01       	movw	r30, r28
    3054:	ef 5b       	subi	r30, 0xBF	; 191
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	10 82       	st	Z, r1
    305a:	85 c0       	rjmp	.+266    	; 0x3166 <LCD_enuInit+0xd56>
	{
		if(((Local_u64Check >> Local_u8Iterator) & (0b111)) != ES_OK)
    305c:	fe 01       	movw	r30, r28
    305e:	ef 5b       	subi	r30, 0xBF	; 191
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	80 81       	ld	r24, Z
    3064:	a8 2f       	mov	r26, r24
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	29 ad       	ldd	r18, Y+57	; 0x39
    306a:	3a ad       	ldd	r19, Y+58	; 0x3a
    306c:	4b ad       	ldd	r20, Y+59	; 0x3b
    306e:	5c ad       	ldd	r21, Y+60	; 0x3c
    3070:	6d ad       	ldd	r22, Y+61	; 0x3d
    3072:	7e ad       	ldd	r23, Y+62	; 0x3e
    3074:	8f ad       	ldd	r24, Y+63	; 0x3f
    3076:	2e 96       	adiw	r28, 0x0e	; 14
    3078:	df af       	std	Y+63, r29	; 0x3f
    307a:	ce af       	std	Y+62, r28	; 0x3e
    307c:	2e 97       	sbiw	r28, 0x0e	; 14
    307e:	fe 01       	movw	r30, r28
    3080:	e0 5c       	subi	r30, 0xC0	; 192
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	90 81       	ld	r25, Z
    3086:	0a 2f       	mov	r16, r26
    3088:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    308c:	a2 2e       	mov	r10, r18
    308e:	b3 2e       	mov	r11, r19
    3090:	c4 2e       	mov	r12, r20
    3092:	d5 2e       	mov	r13, r21
    3094:	e6 2e       	mov	r14, r22
    3096:	f7 2e       	mov	r15, r23
    3098:	08 2f       	mov	r16, r24
    309a:	19 2f       	mov	r17, r25
    309c:	2a 2d       	mov	r18, r10
    309e:	3b 2d       	mov	r19, r11
    30a0:	4c 2d       	mov	r20, r12
    30a2:	5d 2d       	mov	r21, r13
    30a4:	6e 2d       	mov	r22, r14
    30a6:	7f 2d       	mov	r23, r15
    30a8:	80 2f       	mov	r24, r16
    30aa:	91 2f       	mov	r25, r17
    30ac:	e2 2f       	mov	r30, r18
    30ae:	e7 70       	andi	r30, 0x07	; 7
    30b0:	25 96       	adiw	r28, 0x05	; 5
    30b2:	ef af       	std	Y+63, r30	; 0x3f
    30b4:	25 97       	sbiw	r28, 0x05	; 5
    30b6:	e3 2f       	mov	r30, r19
    30b8:	e0 70       	andi	r30, 0x00	; 0
    30ba:	26 96       	adiw	r28, 0x06	; 6
    30bc:	ef af       	std	Y+63, r30	; 0x3f
    30be:	26 97       	sbiw	r28, 0x06	; 6
    30c0:	e4 2f       	mov	r30, r20
    30c2:	e0 70       	andi	r30, 0x00	; 0
    30c4:	27 96       	adiw	r28, 0x07	; 7
    30c6:	ef af       	std	Y+63, r30	; 0x3f
    30c8:	27 97       	sbiw	r28, 0x07	; 7
    30ca:	e5 2f       	mov	r30, r21
    30cc:	e0 70       	andi	r30, 0x00	; 0
    30ce:	28 96       	adiw	r28, 0x08	; 8
    30d0:	ef af       	std	Y+63, r30	; 0x3f
    30d2:	28 97       	sbiw	r28, 0x08	; 8
    30d4:	e6 2f       	mov	r30, r22
    30d6:	e0 70       	andi	r30, 0x00	; 0
    30d8:	29 96       	adiw	r28, 0x09	; 9
    30da:	ef af       	std	Y+63, r30	; 0x3f
    30dc:	29 97       	sbiw	r28, 0x09	; 9
    30de:	e7 2f       	mov	r30, r23
    30e0:	e0 70       	andi	r30, 0x00	; 0
    30e2:	2a 96       	adiw	r28, 0x0a	; 10
    30e4:	ef af       	std	Y+63, r30	; 0x3f
    30e6:	2a 97       	sbiw	r28, 0x0a	; 10
    30e8:	e8 2f       	mov	r30, r24
    30ea:	e0 70       	andi	r30, 0x00	; 0
    30ec:	2b 96       	adiw	r28, 0x0b	; 11
    30ee:	ef af       	std	Y+63, r30	; 0x3f
    30f0:	2b 97       	sbiw	r28, 0x0b	; 11
    30f2:	e9 2f       	mov	r30, r25
    30f4:	e0 70       	andi	r30, 0x00	; 0
    30f6:	2c 96       	adiw	r28, 0x0c	; 12
    30f8:	ef af       	std	Y+63, r30	; 0x3f
    30fa:	2c 97       	sbiw	r28, 0x0c	; 12
    30fc:	25 96       	adiw	r28, 0x05	; 5
    30fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    3100:	25 97       	sbiw	r28, 0x05	; 5
    3102:	81 30       	cpi	r24, 0x01	; 1
    3104:	19 f5       	brne	.+70     	; 0x314c <LCD_enuInit+0xd3c>
    3106:	26 96       	adiw	r28, 0x06	; 6
    3108:	ef ad       	ldd	r30, Y+63	; 0x3f
    310a:	26 97       	sbiw	r28, 0x06	; 6
    310c:	ee 23       	and	r30, r30
    310e:	f1 f4       	brne	.+60     	; 0x314c <LCD_enuInit+0xd3c>
    3110:	27 96       	adiw	r28, 0x07	; 7
    3112:	8f ad       	ldd	r24, Y+63	; 0x3f
    3114:	27 97       	sbiw	r28, 0x07	; 7
    3116:	88 23       	and	r24, r24
    3118:	c9 f4       	brne	.+50     	; 0x314c <LCD_enuInit+0xd3c>
    311a:	28 96       	adiw	r28, 0x08	; 8
    311c:	ef ad       	ldd	r30, Y+63	; 0x3f
    311e:	28 97       	sbiw	r28, 0x08	; 8
    3120:	ee 23       	and	r30, r30
    3122:	a1 f4       	brne	.+40     	; 0x314c <LCD_enuInit+0xd3c>
    3124:	29 96       	adiw	r28, 0x09	; 9
    3126:	8f ad       	ldd	r24, Y+63	; 0x3f
    3128:	29 97       	sbiw	r28, 0x09	; 9
    312a:	88 23       	and	r24, r24
    312c:	79 f4       	brne	.+30     	; 0x314c <LCD_enuInit+0xd3c>
    312e:	2a 96       	adiw	r28, 0x0a	; 10
    3130:	ef ad       	ldd	r30, Y+63	; 0x3f
    3132:	2a 97       	sbiw	r28, 0x0a	; 10
    3134:	ee 23       	and	r30, r30
    3136:	51 f4       	brne	.+20     	; 0x314c <LCD_enuInit+0xd3c>
    3138:	2b 96       	adiw	r28, 0x0b	; 11
    313a:	8f ad       	ldd	r24, Y+63	; 0x3f
    313c:	2b 97       	sbiw	r28, 0x0b	; 11
    313e:	88 23       	and	r24, r24
    3140:	29 f4       	brne	.+10     	; 0x314c <LCD_enuInit+0xd3c>
    3142:	2c 96       	adiw	r28, 0x0c	; 12
    3144:	ef ad       	ldd	r30, Y+63	; 0x3f
    3146:	2c 97       	sbiw	r28, 0x0c	; 12
    3148:	ee 23       	and	r30, r30
    314a:	21 f0       	breq	.+8      	; 0x3154 <LCD_enuInit+0xd44>
		{
			return ES_NOK;
    314c:	24 96       	adiw	r28, 0x04	; 4
    314e:	1f ae       	std	Y+63, r1	; 0x3f
    3150:	24 97       	sbiw	r28, 0x04	; 4
    3152:	1c c0       	rjmp	.+56     	; 0x318c <LCD_enuInit+0xd7c>


	Global_u8Flag = 1;


	for(Local_u8Iterator = 0; Local_u8Iterator < 48; Local_u8Iterator+=3)
    3154:	de 01       	movw	r26, r28
    3156:	af 5b       	subi	r26, 0xBF	; 191
    3158:	bf 4f       	sbci	r27, 0xFF	; 255
    315a:	fe 01       	movw	r30, r28
    315c:	ef 5b       	subi	r30, 0xBF	; 191
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	80 81       	ld	r24, Z
    3162:	8d 5f       	subi	r24, 0xFD	; 253
    3164:	8c 93       	st	X, r24
    3166:	fe 01       	movw	r30, r28
    3168:	ef 5b       	subi	r30, 0xBF	; 191
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	80 81       	ld	r24, Z
    316e:	80 33       	cpi	r24, 0x30	; 48
    3170:	08 f4       	brcc	.+2      	; 0x3174 <LCD_enuInit+0xd64>
    3172:	74 cf       	rjmp	.-280    	; 0x305c <LCD_enuInit+0xc4c>
		{
			return ES_NOK;
		}
	}

Local_enuErrorState = ES_OK;
    3174:	fe 01       	movw	r30, r28
    3176:	ee 5b       	subi	r30, 0xBE	; 190
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	80 83       	st	Z, r24
#else
#error "Unsupported mode"
#endif


	return Local_enuErrorState;
    317e:	fe 01       	movw	r30, r28
    3180:	ee 5b       	subi	r30, 0xBE	; 190
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	80 81       	ld	r24, Z
    3186:	24 96       	adiw	r28, 0x04	; 4
    3188:	8f af       	std	Y+63, r24	; 0x3f
    318a:	24 97       	sbiw	r28, 0x04	; 4
    318c:	24 96       	adiw	r28, 0x04	; 4
    318e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3190:	24 97       	sbiw	r28, 0x04	; 4
}
    3192:	c3 5b       	subi	r28, 0xB3	; 179
    3194:	df 4f       	sbci	r29, 0xFF	; 255
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
    31a0:	cf 91       	pop	r28
    31a2:	df 91       	pop	r29
    31a4:	1f 91       	pop	r17
    31a6:	0f 91       	pop	r16
    31a8:	ff 90       	pop	r15
    31aa:	ef 90       	pop	r14
    31ac:	df 90       	pop	r13
    31ae:	cf 90       	pop	r12
    31b0:	bf 90       	pop	r11
    31b2:	af 90       	pop	r10
    31b4:	08 95       	ret

000031b6 <LCD_enuSendChar>:


ES_t LCD_enuSendChar(u8 Copy_u8Data)
{
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	00 d0       	rcall	.+0      	; 0x31bc <LCD_enuSendChar+0x6>
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    31c2:	19 82       	std	Y+1, r1	; 0x01

	/* select instruction register */

	if( DIO_enuSetPinVal( RS_PORT, RS_PIN, DIO_u8HIGH ) == ES_OK)
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	60 e0       	ldi	r22, 0x00	; 0
    31c8:	41 e0       	ldi	r20, 0x01	; 1
    31ca:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    31ce:	81 30       	cpi	r24, 0x01	; 1
    31d0:	21 f4       	brne	.+8      	; 0x31da <LCD_enuSendChar+0x24>
	{
		Local_enuErrorState = LCD_inenuLatch(Copy_u8Data);
    31d2:	8a 81       	ldd	r24, Y+2	; 0x02
    31d4:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_inenuLatch>
    31d8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    31da:	89 81       	ldd	r24, Y+1	; 0x01
}
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	08 95       	ret

000031e6 <LCD_enuSendCommand>:


ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	00 d0       	rcall	.+0      	; 0x31ec <LCD_enuSendCommand+0x6>
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
    31f0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    31f2:	19 82       	std	Y+1, r1	; 0x01

	/* select instruction register*/
	if( DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW ) == ES_OK )
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	60 e0       	ldi	r22, 0x00	; 0
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    31fe:	81 30       	cpi	r24, 0x01	; 1
    3200:	21 f4       	brne	.+8      	; 0x320a <LCD_enuSendCommand+0x24>
	{
		Local_enuErrorState = LCD_inenuLatch(Copy_u8Command);
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_inenuLatch>
    3208:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    320a:	89 81       	ldd	r24, Y+1	; 0x01

}
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	08 95       	ret

00003216 <LCD_enuClearDisplay>:

ES_t LCD_enuClearDisplay(void)
{
    3216:	df 93       	push	r29
    3218:	cf 93       	push	r28
    321a:	0f 92       	push	r0
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    3220:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = LCD_inenuSendCommand(0x01);
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <LCD_inenuSendCommand>
    3228:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    322a:	89 81       	ldd	r24, Y+1	; 0x01
}
    322c:	0f 90       	pop	r0
    322e:	cf 91       	pop	r28
    3230:	df 91       	pop	r29
    3232:	08 95       	ret

00003234 <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(u8* Copy_pu8String)
{
    3234:	df 93       	push	r29
    3236:	cf 93       	push	r28
    3238:	00 d0       	rcall	.+0      	; 0x323a <LCD_enuDisplayString+0x6>
    323a:	00 d0       	rcall	.+0      	; 0x323c <LCD_enuDisplayString+0x8>
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	9c 83       	std	Y+4, r25	; 0x04
    3242:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3244:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iterator = 0;
    3246:	19 82       	std	Y+1, r1	; 0x01
	if( DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8HIGH ) == ES_OK)
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	60 e0       	ldi	r22, 0x00	; 0
    324c:	41 e0       	ldi	r20, 0x01	; 1
    324e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    3252:	81 30       	cpi	r24, 0x01	; 1
    3254:	01 f5       	brne	.+64     	; 0x3296 <LCD_enuDisplayString+0x62>
	{
		Local_enuErrorState = ES_OK;
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	8a 83       	std	Y+2, r24	; 0x02
    325a:	0f c0       	rjmp	.+30     	; 0x327a <LCD_enuDisplayString+0x46>
		while( Copy_pu8String[Local_u8Iterator] && Local_enuErrorState == ES_OK )
		{
			Local_enuErrorState = LCD_inenuLatch(Copy_pu8String[Local_u8Iterator]);
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	28 2f       	mov	r18, r24
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	8b 81       	ldd	r24, Y+3	; 0x03
    3264:	9c 81       	ldd	r25, Y+4	; 0x04
    3266:	fc 01       	movw	r30, r24
    3268:	e2 0f       	add	r30, r18
    326a:	f3 1f       	adc	r31, r19
    326c:	80 81       	ld	r24, Z
    326e:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_inenuLatch>
    3272:	8a 83       	std	Y+2, r24	; 0x02
			Local_u8Iterator++;
    3274:	89 81       	ldd	r24, Y+1	; 0x01
    3276:	8f 5f       	subi	r24, 0xFF	; 255
    3278:	89 83       	std	Y+1, r24	; 0x01

	u8 Local_u8Iterator = 0;
	if( DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8HIGH ) == ES_OK)
	{
		Local_enuErrorState = ES_OK;
		while( Copy_pu8String[Local_u8Iterator] && Local_enuErrorState == ES_OK )
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	28 2f       	mov	r18, r24
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	8b 81       	ldd	r24, Y+3	; 0x03
    3282:	9c 81       	ldd	r25, Y+4	; 0x04
    3284:	fc 01       	movw	r30, r24
    3286:	e2 0f       	add	r30, r18
    3288:	f3 1f       	adc	r31, r19
    328a:	80 81       	ld	r24, Z
    328c:	88 23       	and	r24, r24
    328e:	19 f0       	breq	.+6      	; 0x3296 <LCD_enuDisplayString+0x62>
    3290:	8a 81       	ldd	r24, Y+2	; 0x02
    3292:	81 30       	cpi	r24, 0x01	; 1
    3294:	19 f3       	breq	.-58     	; 0x325c <LCD_enuDisplayString+0x28>
			Local_enuErrorState = LCD_inenuLatch(Copy_pu8String[Local_u8Iterator]);
			Local_u8Iterator++;
		}
	}

	return Local_enuErrorState;
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	cf 91       	pop	r28
    32a2:	df 91       	pop	r29
    32a4:	08 95       	ret

000032a6 <LCD_enuCreatChar>:




ES_t LCD_enuCreatChar(u8* Copy_Au8NewChar, u8 Copy_u8Size, u8 Copy_u8StartPattern )
{
    32a6:	df 93       	push	r29
    32a8:	cf 93       	push	r28
    32aa:	00 d0       	rcall	.+0      	; 0x32ac <LCD_enuCreatChar+0x6>
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <LCD_enuCreatChar+0x8>
    32ae:	00 d0       	rcall	.+0      	; 0x32b0 <LCD_enuCreatChar+0xa>
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	9c 83       	std	Y+4, r25	; 0x04
    32b6:	8b 83       	std	Y+3, r24	; 0x03
    32b8:	6d 83       	std	Y+5, r22	; 0x05
    32ba:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    32bc:	1a 82       	std	Y+2, r1	; 0x02

	Local_enuErrorState = LCD_enuSendCommand(0x40 + 8*Copy_u8StartPattern);
    32be:	8e 81       	ldd	r24, Y+6	; 0x06
    32c0:	88 2f       	mov	r24, r24
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	08 96       	adiw	r24, 0x08	; 8
    32c6:	88 0f       	add	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	88 0f       	add	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	88 0f       	add	r24, r24
    32d0:	99 1f       	adc	r25, r25
    32d2:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <LCD_enuSendCommand>
    32d6:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Iterator;

	for( Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8Size*8 ; ++Local_u8Iterator)
    32d8:	19 82       	std	Y+1, r1	; 0x01
    32da:	0e c0       	rjmp	.+28     	; 0x32f8 <LCD_enuCreatChar+0x52>
	{
		LCD_enuSendChar(Copy_Au8NewChar[Local_u8Iterator]);
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	28 2f       	mov	r18, r24
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	8b 81       	ldd	r24, Y+3	; 0x03
    32e4:	9c 81       	ldd	r25, Y+4	; 0x04
    32e6:	fc 01       	movw	r30, r24
    32e8:	e2 0f       	add	r30, r18
    32ea:	f3 1f       	adc	r31, r19
    32ec:	80 81       	ld	r24, Z
    32ee:	0e 94 db 18 	call	0x31b6	; 0x31b6 <LCD_enuSendChar>

	Local_enuErrorState = LCD_enuSendCommand(0x40 + 8*Copy_u8StartPattern);

	u8 Local_u8Iterator;

	for( Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8Size*8 ; ++Local_u8Iterator)
    32f2:	89 81       	ldd	r24, Y+1	; 0x01
    32f4:	8f 5f       	subi	r24, 0xFF	; 255
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	28 2f       	mov	r18, r24
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3300:	88 2f       	mov	r24, r24
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	88 0f       	add	r24, r24
    3306:	99 1f       	adc	r25, r25
    3308:	88 0f       	add	r24, r24
    330a:	99 1f       	adc	r25, r25
    330c:	88 0f       	add	r24, r24
    330e:	99 1f       	adc	r25, r25
    3310:	28 17       	cp	r18, r24
    3312:	39 07       	cpc	r19, r25
    3314:	1c f3       	brlt	.-58     	; 0x32dc <LCD_enuCreatChar+0x36>

#if DISPLAY_DIRECTION == RIGHT_TO_LEFT
	LCD_enuSendCommand(0x80);
	LCD_enuSendCommand(0x06);
#elif DISPLAY_DIRECTION == LEFT_TO_RIGHT
	LCD_enuSendCommand(0x8f);
    3316:	8f e8       	ldi	r24, 0x8F	; 143
    3318:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <LCD_enuSendCommand>
	LCD_enuSendCommand(0x04);
    331c:	84 e0       	ldi	r24, 0x04	; 4
    331e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <LCD_enuSendCommand>
//	LCD_enuSendCommand(0x06);
//#else
//#error "Unsupported Display Direction"
//#endif

	return Local_enuErrorState;
    3322:	8a 81       	ldd	r24, Y+2	; 0x02

}
    3324:	26 96       	adiw	r28, 0x06	; 6
    3326:	0f b6       	in	r0, 0x3f	; 63
    3328:	f8 94       	cli
    332a:	de bf       	out	0x3e, r29	; 62
    332c:	0f be       	out	0x3f, r0	; 63
    332e:	cd bf       	out	0x3d, r28	; 61
    3330:	cf 91       	pop	r28
    3332:	df 91       	pop	r29
    3334:	08 95       	ret

00003336 <LCD_enuGoto>:



ES_t LCD_enuGoto(u8 Copy_u8Line,u8 Copy_u8Block)
{
    3336:	df 93       	push	r29
    3338:	cf 93       	push	r28
    333a:	00 d0       	rcall	.+0      	; 0x333c <LCD_enuGoto+0x6>
    333c:	0f 92       	push	r0
    333e:	cd b7       	in	r28, 0x3d	; 61
    3340:	de b7       	in	r29, 0x3e	; 62
    3342:	8a 83       	std	Y+2, r24	; 0x02
    3344:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    3346:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Line == 1)
    3348:	8a 81       	ldd	r24, Y+2	; 0x02
    334a:	81 30       	cpi	r24, 0x01	; 1
    334c:	31 f4       	brne	.+12     	; 0x335a <LCD_enuGoto+0x24>
	{
		Local_enuErrorState = LCD_inenuSendCommand(0x80 + Copy_u8Block);
    334e:	8b 81       	ldd	r24, Y+3	; 0x03
    3350:	80 58       	subi	r24, 0x80	; 128
    3352:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <LCD_inenuSendCommand>
    3356:	89 83       	std	Y+1, r24	; 0x01
    3358:	05 c0       	rjmp	.+10     	; 0x3364 <LCD_enuGoto+0x2e>
	}
	else
	{
		Local_enuErrorState = LCD_inenuSendCommand(0xc0 +Copy_u8Block);
    335a:	8b 81       	ldd	r24, Y+3	; 0x03
    335c:	80 54       	subi	r24, 0x40	; 64
    335e:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <LCD_inenuSendCommand>
    3362:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3364:	89 81       	ldd	r24, Y+1	; 0x01
}
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	cf 91       	pop	r28
    336e:	df 91       	pop	r29
    3370:	08 95       	ret

00003372 <LCD_enuWriteNumber>:


ES_t LCD_enuWriteNumber(u8 Copy_u8Num)
{
    3372:	0f 93       	push	r16
    3374:	1f 93       	push	r17
    3376:	df 93       	push	r29
    3378:	cf 93       	push	r28
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    337e:	2a 97       	sbiw	r28, 0x0a	; 10
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	89 87       	std	Y+9, r24	; 0x09
	ES_t Local_enuErrorState = ES_NOK;
    338c:	18 86       	std	Y+8, r1	; 0x08
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8HIGH );
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	60 e0       	ldi	r22, 0x00	; 0
    3392:	41 e0       	ldi	r20, 0x01	; 1
    3394:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    3398:	88 87       	std	Y+8, r24	; 0x08

	if(Copy_u8Num == 0.0)
    339a:	89 85       	ldd	r24, Y+9	; 0x09
    339c:	88 2f       	mov	r24, r24
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	aa 27       	eor	r26, r26
    33a2:	97 fd       	sbrc	r25, 7
    33a4:	a0 95       	com	r26
    33a6:	ba 2f       	mov	r27, r26
    33a8:	bc 01       	movw	r22, r24
    33aa:	cd 01       	movw	r24, r26
    33ac:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatsisf>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	bc 01       	movw	r22, r24
    33b6:	cd 01       	movw	r24, r26
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e0       	ldi	r20, 0x00	; 0
    33be:	50 e0       	ldi	r21, 0x00	; 0
    33c0:	0e 94 17 04 	call	0x82e	; 0x82e <__eqsf2>
    33c4:	88 23       	and	r24, r24
    33c6:	39 f4       	brne	.+14     	; 0x33d6 <LCD_enuWriteNumber+0x64>
	{
		Local_enuErrorState = LCD_inenuLatch('0');
    33c8:	80 e3       	ldi	r24, 0x30	; 48
    33ca:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_inenuLatch>
    33ce:	88 87       	std	Y+8, r24	; 0x08
		return Local_enuErrorState;
    33d0:	28 85       	ldd	r18, Y+8	; 0x08
    33d2:	2a 87       	std	Y+10, r18	; 0x0a
    33d4:	fb c0       	rjmp	.+502    	; 0x35cc <LCD_enuWriteNumber+0x25a>
	}

	static u8 Local_Au8Digits[16] = {'0'};
	s8 Local_u8Iterator = -1;
    33d6:	8f ef       	ldi	r24, 0xFF	; 255
    33d8:	8f 83       	std	Y+7, r24	; 0x07
	s32 Local_s32Number = Copy_u8Num;
    33da:	89 85       	ldd	r24, Y+9	; 0x09
    33dc:	88 2f       	mov	r24, r24
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	a0 e0       	ldi	r26, 0x00	; 0
    33e2:	b0 e0       	ldi	r27, 0x00	; 0
    33e4:	8b 83       	std	Y+3, r24	; 0x03
    33e6:	9c 83       	std	Y+4, r25	; 0x04
    33e8:	ad 83       	std	Y+5, r26	; 0x05
    33ea:	be 83       	std	Y+6, r27	; 0x06
	{
		LCD_enuSendChar('-');
		Local_s32Number *= -1;
	}

	if((Copy_u8Num < 1.0 && Copy_u8Num > 0.0) || (Copy_u8Num > -1.0 && Copy_u8Num < 0.0)) LCD_enuSendChar('0');
    33ec:	89 85       	ldd	r24, Y+9	; 0x09
    33ee:	88 2f       	mov	r24, r24
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	aa 27       	eor	r26, r26
    33f4:	97 fd       	sbrc	r25, 7
    33f6:	a0 95       	com	r26
    33f8:	ba 2f       	mov	r27, r26
    33fa:	bc 01       	movw	r22, r24
    33fc:	cd 01       	movw	r24, r26
    33fe:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatsisf>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	bc 01       	movw	r22, r24
    3408:	cd 01       	movw	r24, r26
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e8       	ldi	r20, 0x80	; 128
    3410:	5f e3       	ldi	r21, 0x3F	; 63
    3412:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    3416:	88 23       	and	r24, r24
    3418:	0c f0       	brlt	.+2      	; 0x341c <LCD_enuWriteNumber+0xaa>
    341a:	47 c0       	rjmp	.+142    	; 0x34aa <LCD_enuWriteNumber+0x138>
    341c:	89 85       	ldd	r24, Y+9	; 0x09
    341e:	88 2f       	mov	r24, r24
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	aa 27       	eor	r26, r26
    3424:	97 fd       	sbrc	r25, 7
    3426:	a0 95       	com	r26
    3428:	ba 2f       	mov	r27, r26
    342a:	bc 01       	movw	r22, r24
    342c:	cd 01       	movw	r24, r26
    342e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatsisf>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	bc 01       	movw	r22, r24
    3438:	cd 01       	movw	r24, r26
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	40 e0       	ldi	r20, 0x00	; 0
    3440:	50 e0       	ldi	r21, 0x00	; 0
    3442:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    3446:	18 16       	cp	r1, r24
    3448:	84 f5       	brge	.+96     	; 0x34aa <LCD_enuWriteNumber+0x138>
    344a:	80 e3       	ldi	r24, 0x30	; 48
    344c:	0e 94 db 18 	call	0x31b6	; 0x31b6 <LCD_enuSendChar>
    3450:	2c c0       	rjmp	.+88     	; 0x34aa <LCD_enuWriteNumber+0x138>

	while (Local_s32Number > 0 && Local_enuErrorState == ES_OK)
	{
		Local_u8Iterator++;
    3452:	8f 81       	ldd	r24, Y+7	; 0x07
    3454:	8f 5f       	subi	r24, 0xFF	; 255
    3456:	8f 83       	std	Y+7, r24	; 0x07
		Local_Au8Digits[Local_u8Iterator] = Local_s32Number % 10;
    3458:	8f 81       	ldd	r24, Y+7	; 0x07
    345a:	08 2f       	mov	r16, r24
    345c:	11 27       	eor	r17, r17
    345e:	07 fd       	sbrc	r16, 7
    3460:	10 95       	com	r17
    3462:	8b 81       	ldd	r24, Y+3	; 0x03
    3464:	9c 81       	ldd	r25, Y+4	; 0x04
    3466:	ad 81       	ldd	r26, Y+5	; 0x05
    3468:	be 81       	ldd	r27, Y+6	; 0x06
    346a:	2a e0       	ldi	r18, 0x0A	; 10
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	40 e0       	ldi	r20, 0x00	; 0
    3470:	50 e0       	ldi	r21, 0x00	; 0
    3472:	bc 01       	movw	r22, r24
    3474:	cd 01       	movw	r24, r26
    3476:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodsi4>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	f8 01       	movw	r30, r16
    3480:	ea 5b       	subi	r30, 0xBA	; 186
    3482:	fd 4f       	sbci	r31, 0xFD	; 253
    3484:	80 83       	st	Z, r24
		Local_s32Number /= 10;
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	9c 81       	ldd	r25, Y+4	; 0x04
    348a:	ad 81       	ldd	r26, Y+5	; 0x05
    348c:	be 81       	ldd	r27, Y+6	; 0x06
    348e:	2a e0       	ldi	r18, 0x0A	; 10
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	40 e0       	ldi	r20, 0x00	; 0
    3494:	50 e0       	ldi	r21, 0x00	; 0
    3496:	bc 01       	movw	r22, r24
    3498:	cd 01       	movw	r24, r26
    349a:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodsi4>
    349e:	da 01       	movw	r26, r20
    34a0:	c9 01       	movw	r24, r18
    34a2:	8b 83       	std	Y+3, r24	; 0x03
    34a4:	9c 83       	std	Y+4, r25	; 0x04
    34a6:	ad 83       	std	Y+5, r26	; 0x05
    34a8:	be 83       	std	Y+6, r27	; 0x06
		Local_s32Number *= -1;
	}

	if((Copy_u8Num < 1.0 && Copy_u8Num > 0.0) || (Copy_u8Num > -1.0 && Copy_u8Num < 0.0)) LCD_enuSendChar('0');

	while (Local_s32Number > 0 && Local_enuErrorState == ES_OK)
    34aa:	8b 81       	ldd	r24, Y+3	; 0x03
    34ac:	9c 81       	ldd	r25, Y+4	; 0x04
    34ae:	ad 81       	ldd	r26, Y+5	; 0x05
    34b0:	be 81       	ldd	r27, Y+6	; 0x06
    34b2:	18 16       	cp	r1, r24
    34b4:	19 06       	cpc	r1, r25
    34b6:	1a 06       	cpc	r1, r26
    34b8:	1b 06       	cpc	r1, r27
    34ba:	9c f4       	brge	.+38     	; 0x34e2 <LCD_enuWriteNumber+0x170>
    34bc:	88 85       	ldd	r24, Y+8	; 0x08
    34be:	81 30       	cpi	r24, 0x01	; 1
    34c0:	41 f2       	breq	.-112    	; 0x3452 <LCD_enuWriteNumber+0xe0>
    34c2:	0f c0       	rjmp	.+30     	; 0x34e2 <LCD_enuWriteNumber+0x170>
		Local_s32Number /= 10;
	}

	while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
	{
		Local_enuErrorState = LCD_inenuLatch( Local_Au8Digits[Local_u8Iterator] + '0');
    34c4:	8f 81       	ldd	r24, Y+7	; 0x07
    34c6:	99 27       	eor	r25, r25
    34c8:	87 fd       	sbrc	r24, 7
    34ca:	90 95       	com	r25
    34cc:	fc 01       	movw	r30, r24
    34ce:	ea 5b       	subi	r30, 0xBA	; 186
    34d0:	fd 4f       	sbci	r31, 0xFD	; 253
    34d2:	80 81       	ld	r24, Z
    34d4:	80 5d       	subi	r24, 0xD0	; 208
    34d6:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_inenuLatch>
    34da:	88 87       	std	Y+8, r24	; 0x08
		Local_u8Iterator--;
    34dc:	8f 81       	ldd	r24, Y+7	; 0x07
    34de:	81 50       	subi	r24, 0x01	; 1
    34e0:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8Iterator++;
		Local_Au8Digits[Local_u8Iterator] = Local_s32Number % 10;
		Local_s32Number /= 10;
	}

	while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
    34e2:	8f 81       	ldd	r24, Y+7	; 0x07
    34e4:	88 23       	and	r24, r24
    34e6:	1c f0       	brlt	.+6      	; 0x34ee <LCD_enuWriteNumber+0x17c>
    34e8:	88 85       	ldd	r24, Y+8	; 0x08
    34ea:	81 30       	cpi	r24, 0x01	; 1
    34ec:	59 f3       	breq	.-42     	; 0x34c4 <LCD_enuWriteNumber+0x152>
	{
		Local_enuErrorState = LCD_inenuLatch( Local_Au8Digits[Local_u8Iterator] + '0');
		Local_u8Iterator--;
	}

	Copy_u8Num = (Copy_u8Num - (s32)Copy_u8Num);
    34ee:	19 86       	std	Y+9, r1	; 0x09
	if(Copy_u8Num != 0.0)
    34f0:	89 85       	ldd	r24, Y+9	; 0x09
    34f2:	88 2f       	mov	r24, r24
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	aa 27       	eor	r26, r26
    34f8:	97 fd       	sbrc	r25, 7
    34fa:	a0 95       	com	r26
    34fc:	ba 2f       	mov	r27, r26
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatsisf>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	bc 01       	movw	r22, r24
    350c:	cd 01       	movw	r24, r26
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	40 e0       	ldi	r20, 0x00	; 0
    3514:	50 e0       	ldi	r21, 0x00	; 0
    3516:	0e 94 47 04 	call	0x88e	; 0x88e <__nesf2>
    351a:	88 23       	and	r24, r24
    351c:	09 f4       	brne	.+2      	; 0x3520 <LCD_enuWriteNumber+0x1ae>
    351e:	54 c0       	rjmp	.+168    	; 0x35c8 <LCD_enuWriteNumber+0x256>
	{
		LCD_inenuLatch('.');
    3520:	8e e2       	ldi	r24, 0x2E	; 46
    3522:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_inenuLatch>
		if(Copy_u8Num < 0) Copy_u8Num *= -1;
		u16 base = 10;
    3526:	8a e0       	ldi	r24, 0x0A	; 10
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	9a 83       	std	Y+2, r25	; 0x02
    352c:	89 83       	std	Y+1, r24	; 0x01
    352e:	30 c0       	rjmp	.+96     	; 0x3590 <LCD_enuWriteNumber+0x21e>
		while (base <= 10000)
		{
			Local_u8Iterator++;
    3530:	8f 81       	ldd	r24, Y+7	; 0x07
    3532:	8f 5f       	subi	r24, 0xFF	; 255
    3534:	8f 83       	std	Y+7, r24	; 0x07
			Local_Au8Digits[3 - Local_u8Iterator] = ((s32)(Copy_u8Num*base))%10;
    3536:	8f 81       	ldd	r24, Y+7	; 0x07
    3538:	28 2f       	mov	r18, r24
    353a:	33 27       	eor	r19, r19
    353c:	27 fd       	sbrc	r18, 7
    353e:	30 95       	com	r19
    3540:	83 e0       	ldi	r24, 0x03	; 3
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	fc 01       	movw	r30, r24
    3546:	e2 1b       	sub	r30, r18
    3548:	f3 0b       	sbc	r31, r19
    354a:	89 85       	ldd	r24, Y+9	; 0x09
    354c:	28 2f       	mov	r18, r24
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	89 81       	ldd	r24, Y+1	; 0x01
    3552:	9a 81       	ldd	r25, Y+2	; 0x02
    3554:	ac 01       	movw	r20, r24
    3556:	24 9f       	mul	r18, r20
    3558:	c0 01       	movw	r24, r0
    355a:	25 9f       	mul	r18, r21
    355c:	90 0d       	add	r25, r0
    355e:	34 9f       	mul	r19, r20
    3560:	90 0d       	add	r25, r0
    3562:	11 24       	eor	r1, r1
    3564:	2a e0       	ldi	r18, 0x0A	; 10
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	b9 01       	movw	r22, r18
    356a:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__udivmodhi4>
    356e:	ea 5b       	subi	r30, 0xBA	; 186
    3570:	fd 4f       	sbci	r31, 0xFD	; 253
    3572:	80 83       	st	Z, r24
			base *= 10;
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	9a 81       	ldd	r25, Y+2	; 0x02
    3578:	9c 01       	movw	r18, r24
    357a:	22 0f       	add	r18, r18
    357c:	33 1f       	adc	r19, r19
    357e:	c9 01       	movw	r24, r18
    3580:	88 0f       	add	r24, r24
    3582:	99 1f       	adc	r25, r25
    3584:	88 0f       	add	r24, r24
    3586:	99 1f       	adc	r25, r25
    3588:	82 0f       	add	r24, r18
    358a:	93 1f       	adc	r25, r19
    358c:	9a 83       	std	Y+2, r25	; 0x02
    358e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Num != 0.0)
	{
		LCD_inenuLatch('.');
		if(Copy_u8Num < 0) Copy_u8Num *= -1;
		u16 base = 10;
		while (base <= 10000)
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	9a 81       	ldd	r25, Y+2	; 0x02
    3594:	57 e2       	ldi	r21, 0x27	; 39
    3596:	81 31       	cpi	r24, 0x11	; 17
    3598:	95 07       	cpc	r25, r21
    359a:	50 f2       	brcs	.-108    	; 0x3530 <LCD_enuWriteNumber+0x1be>
    359c:	0f c0       	rjmp	.+30     	; 0x35bc <LCD_enuWriteNumber+0x24a>
			base *= 10;
		}

		while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
		{
			Local_enuErrorState = LCD_inenuLatch( Local_Au8Digits[Local_u8Iterator] + '0');
    359e:	8f 81       	ldd	r24, Y+7	; 0x07
    35a0:	99 27       	eor	r25, r25
    35a2:	87 fd       	sbrc	r24, 7
    35a4:	90 95       	com	r25
    35a6:	fc 01       	movw	r30, r24
    35a8:	ea 5b       	subi	r30, 0xBA	; 186
    35aa:	fd 4f       	sbci	r31, 0xFD	; 253
    35ac:	80 81       	ld	r24, Z
    35ae:	80 5d       	subi	r24, 0xD0	; 208
    35b0:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_inenuLatch>
    35b4:	88 87       	std	Y+8, r24	; 0x08
			Local_u8Iterator--;
    35b6:	8f 81       	ldd	r24, Y+7	; 0x07
    35b8:	81 50       	subi	r24, 0x01	; 1
    35ba:	8f 83       	std	Y+7, r24	; 0x07
			Local_u8Iterator++;
			Local_Au8Digits[3 - Local_u8Iterator] = ((s32)(Copy_u8Num*base))%10;
			base *= 10;
		}

		while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
    35bc:	8f 81       	ldd	r24, Y+7	; 0x07
    35be:	88 23       	and	r24, r24
    35c0:	1c f0       	brlt	.+6      	; 0x35c8 <LCD_enuWriteNumber+0x256>
    35c2:	88 85       	ldd	r24, Y+8	; 0x08
    35c4:	81 30       	cpi	r24, 0x01	; 1
    35c6:	59 f3       	breq	.-42     	; 0x359e <LCD_enuWriteNumber+0x22c>
			Local_u8Iterator--;
		}

	}

	return Local_enuErrorState;
    35c8:	88 85       	ldd	r24, Y+8	; 0x08
    35ca:	8a 87       	std	Y+10, r24	; 0x0a
    35cc:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    35ce:	2a 96       	adiw	r28, 0x0a	; 10
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	de bf       	out	0x3e, r29	; 62
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	cd bf       	out	0x3d, r28	; 61
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	1f 91       	pop	r17
    35e0:	0f 91       	pop	r16
    35e2:	08 95       	ret

000035e4 <LCD_inenuLatch>:



static ES_t LCD_inenuLatch( u8 Copy_u8Data )
{
    35e4:	df 93       	push	r29
    35e6:	cf 93       	push	r28
    35e8:	cd b7       	in	r28, 0x3d	; 61
    35ea:	de b7       	in	r29, 0x3e	; 62
    35ec:	c0 54       	subi	r28, 0x40	; 64
    35ee:	d0 40       	sbci	r29, 0x00	; 0
    35f0:	0f b6       	in	r0, 0x3f	; 63
    35f2:	f8 94       	cli
    35f4:	de bf       	out	0x3e, r29	; 62
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	cd bf       	out	0x3d, r28	; 61
    35fa:	8f af       	std	Y+63, r24	; 0x3f
	ES_t Local_enuErrorState = ES_NOK;
    35fc:	1e ae       	std	Y+62, r1	; 0x3e
	u8 Local_u8Iterator;
	u32 Copy_u32Check = 0;
    35fe:	19 ae       	std	Y+57, r1	; 0x39
    3600:	1a ae       	std	Y+58, r1	; 0x3a
    3602:	1b ae       	std	Y+59, r1	; 0x3b
    3604:	1c ae       	std	Y+60, r1	; 0x3c

	// choose write mode
	Copy_u32Check |= ((u32)(DIO_enuSetPinVal(RW_PORT, RW_PIN, DIO_u8LOW )<<0));
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	61 e0       	ldi	r22, 0x01	; 1
    360a:	40 e0       	ldi	r20, 0x00	; 0
    360c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    3610:	28 2f       	mov	r18, r24
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	40 e0       	ldi	r20, 0x00	; 0
    3616:	50 e0       	ldi	r21, 0x00	; 0
    3618:	89 ad       	ldd	r24, Y+57	; 0x39
    361a:	9a ad       	ldd	r25, Y+58	; 0x3a
    361c:	ab ad       	ldd	r26, Y+59	; 0x3b
    361e:	bc ad       	ldd	r27, Y+60	; 0x3c
    3620:	82 2b       	or	r24, r18
    3622:	93 2b       	or	r25, r19
    3624:	a4 2b       	or	r26, r20
    3626:	b5 2b       	or	r27, r21
    3628:	89 af       	std	Y+57, r24	; 0x39
    362a:	9a af       	std	Y+58, r25	; 0x3a
    362c:	ab af       	std	Y+59, r26	; 0x3b
    362e:	bc af       	std	Y+60, r27	; 0x3c
	Copy_u32Check |= ((u32)(DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8LOW )<<3));
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	66 e0       	ldi	r22, 0x06	; 6
    3634:	40 e0       	ldi	r20, 0x00	; 0
    3636:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    363a:	88 2f       	mov	r24, r24
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	88 0f       	add	r24, r24
    3640:	99 1f       	adc	r25, r25
    3642:	88 0f       	add	r24, r24
    3644:	99 1f       	adc	r25, r25
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	9c 01       	movw	r18, r24
    364c:	44 27       	eor	r20, r20
    364e:	37 fd       	sbrc	r19, 7
    3650:	40 95       	com	r20
    3652:	54 2f       	mov	r21, r20
    3654:	89 ad       	ldd	r24, Y+57	; 0x39
    3656:	9a ad       	ldd	r25, Y+58	; 0x3a
    3658:	ab ad       	ldd	r26, Y+59	; 0x3b
    365a:	bc ad       	ldd	r27, Y+60	; 0x3c
    365c:	82 2b       	or	r24, r18
    365e:	93 2b       	or	r25, r19
    3660:	a4 2b       	or	r26, r20
    3662:	b5 2b       	or	r27, r21
    3664:	89 af       	std	Y+57, r24	; 0x39
    3666:	9a af       	std	Y+58, r25	; 0x3a
    3668:	ab af       	std	Y+59, r26	; 0x3b
    366a:	bc af       	std	Y+60, r27	; 0x3c

	// write command

	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB7_PORT, DB7_PIN, (Copy_u8Data>>7)&1 )<<6 ));
    366c:	8f ad       	ldd	r24, Y+63	; 0x3f
    366e:	98 2f       	mov	r25, r24
    3670:	99 1f       	adc	r25, r25
    3672:	99 27       	eor	r25, r25
    3674:	99 1f       	adc	r25, r25
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	65 e0       	ldi	r22, 0x05	; 5
    367a:	49 2f       	mov	r20, r25
    367c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    3680:	88 2f       	mov	r24, r24
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	a0 e0       	ldi	r26, 0x00	; 0
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	88 0f       	add	r24, r24
    368a:	99 1f       	adc	r25, r25
    368c:	aa 1f       	adc	r26, r26
    368e:	bb 1f       	adc	r27, r27
    3690:	88 0f       	add	r24, r24
    3692:	99 1f       	adc	r25, r25
    3694:	aa 1f       	adc	r26, r26
    3696:	bb 1f       	adc	r27, r27
    3698:	88 0f       	add	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	aa 1f       	adc	r26, r26
    369e:	bb 1f       	adc	r27, r27
    36a0:	88 0f       	add	r24, r24
    36a2:	99 1f       	adc	r25, r25
    36a4:	aa 1f       	adc	r26, r26
    36a6:	bb 1f       	adc	r27, r27
    36a8:	88 0f       	add	r24, r24
    36aa:	99 1f       	adc	r25, r25
    36ac:	aa 1f       	adc	r26, r26
    36ae:	bb 1f       	adc	r27, r27
    36b0:	88 0f       	add	r24, r24
    36b2:	99 1f       	adc	r25, r25
    36b4:	aa 1f       	adc	r26, r26
    36b6:	bb 1f       	adc	r27, r27
    36b8:	9c 01       	movw	r18, r24
    36ba:	ad 01       	movw	r20, r26
    36bc:	89 ad       	ldd	r24, Y+57	; 0x39
    36be:	9a ad       	ldd	r25, Y+58	; 0x3a
    36c0:	ab ad       	ldd	r26, Y+59	; 0x3b
    36c2:	bc ad       	ldd	r27, Y+60	; 0x3c
    36c4:	82 2b       	or	r24, r18
    36c6:	93 2b       	or	r25, r19
    36c8:	a4 2b       	or	r26, r20
    36ca:	b5 2b       	or	r27, r21
    36cc:	89 af       	std	Y+57, r24	; 0x39
    36ce:	9a af       	std	Y+58, r25	; 0x3a
    36d0:	ab af       	std	Y+59, r26	; 0x3b
    36d2:	bc af       	std	Y+60, r27	; 0x3c
	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB6_PORT, DB6_PIN, (Copy_u8Data>>6)&1 )<<9 ));
    36d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    36d6:	82 95       	swap	r24
    36d8:	86 95       	lsr	r24
    36da:	86 95       	lsr	r24
    36dc:	83 70       	andi	r24, 0x03	; 3
    36de:	98 2f       	mov	r25, r24
    36e0:	91 70       	andi	r25, 0x01	; 1
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	64 e0       	ldi	r22, 0x04	; 4
    36e6:	49 2f       	mov	r20, r25
    36e8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    36ec:	88 2f       	mov	r24, r24
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	a0 e0       	ldi	r26, 0x00	; 0
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	9c 01       	movw	r18, r24
    36f6:	ad 01       	movw	r20, r26
    36f8:	01 2e       	mov	r0, r17
    36fa:	19 e0       	ldi	r17, 0x09	; 9
    36fc:	22 0f       	add	r18, r18
    36fe:	33 1f       	adc	r19, r19
    3700:	44 1f       	adc	r20, r20
    3702:	55 1f       	adc	r21, r21
    3704:	1a 95       	dec	r17
    3706:	d1 f7       	brne	.-12     	; 0x36fc <LCD_inenuLatch+0x118>
    3708:	10 2d       	mov	r17, r0
    370a:	89 ad       	ldd	r24, Y+57	; 0x39
    370c:	9a ad       	ldd	r25, Y+58	; 0x3a
    370e:	ab ad       	ldd	r26, Y+59	; 0x3b
    3710:	bc ad       	ldd	r27, Y+60	; 0x3c
    3712:	82 2b       	or	r24, r18
    3714:	93 2b       	or	r25, r19
    3716:	a4 2b       	or	r26, r20
    3718:	b5 2b       	or	r27, r21
    371a:	89 af       	std	Y+57, r24	; 0x39
    371c:	9a af       	std	Y+58, r25	; 0x3a
    371e:	ab af       	std	Y+59, r26	; 0x3b
    3720:	bc af       	std	Y+60, r27	; 0x3c
	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB5_PORT, DB5_PIN, (Copy_u8Data>>5)&1 )<<12 ));
    3722:	8f ad       	ldd	r24, Y+63	; 0x3f
    3724:	82 95       	swap	r24
    3726:	86 95       	lsr	r24
    3728:	87 70       	andi	r24, 0x07	; 7
    372a:	98 2f       	mov	r25, r24
    372c:	91 70       	andi	r25, 0x01	; 1
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	63 e0       	ldi	r22, 0x03	; 3
    3732:	49 2f       	mov	r20, r25
    3734:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    3738:	88 2f       	mov	r24, r24
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	a0 e0       	ldi	r26, 0x00	; 0
    373e:	b0 e0       	ldi	r27, 0x00	; 0
    3740:	9c 01       	movw	r18, r24
    3742:	ad 01       	movw	r20, r26
    3744:	01 2e       	mov	r0, r17
    3746:	1c e0       	ldi	r17, 0x0C	; 12
    3748:	22 0f       	add	r18, r18
    374a:	33 1f       	adc	r19, r19
    374c:	44 1f       	adc	r20, r20
    374e:	55 1f       	adc	r21, r21
    3750:	1a 95       	dec	r17
    3752:	d1 f7       	brne	.-12     	; 0x3748 <LCD_inenuLatch+0x164>
    3754:	10 2d       	mov	r17, r0
    3756:	89 ad       	ldd	r24, Y+57	; 0x39
    3758:	9a ad       	ldd	r25, Y+58	; 0x3a
    375a:	ab ad       	ldd	r26, Y+59	; 0x3b
    375c:	bc ad       	ldd	r27, Y+60	; 0x3c
    375e:	82 2b       	or	r24, r18
    3760:	93 2b       	or	r25, r19
    3762:	a4 2b       	or	r26, r20
    3764:	b5 2b       	or	r27, r21
    3766:	89 af       	std	Y+57, r24	; 0x39
    3768:	9a af       	std	Y+58, r25	; 0x3a
    376a:	ab af       	std	Y+59, r26	; 0x3b
    376c:	bc af       	std	Y+60, r27	; 0x3c
	Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB4_PORT, DB4_PIN, (Copy_u8Data>>4)&1 )<<15));
    376e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3770:	82 95       	swap	r24
    3772:	8f 70       	andi	r24, 0x0F	; 15
    3774:	98 2f       	mov	r25, r24
    3776:	91 70       	andi	r25, 0x01	; 1
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	62 e0       	ldi	r22, 0x02	; 2
    377c:	49 2f       	mov	r20, r25
    377e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    3782:	88 2f       	mov	r24, r24
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	a0 e0       	ldi	r26, 0x00	; 0
    3788:	b0 e0       	ldi	r27, 0x00	; 0
    378a:	9c 01       	movw	r18, r24
    378c:	ad 01       	movw	r20, r26
    378e:	01 2e       	mov	r0, r17
    3790:	1f e0       	ldi	r17, 0x0F	; 15
    3792:	22 0f       	add	r18, r18
    3794:	33 1f       	adc	r19, r19
    3796:	44 1f       	adc	r20, r20
    3798:	55 1f       	adc	r21, r21
    379a:	1a 95       	dec	r17
    379c:	d1 f7       	brne	.-12     	; 0x3792 <LCD_inenuLatch+0x1ae>
    379e:	10 2d       	mov	r17, r0
    37a0:	89 ad       	ldd	r24, Y+57	; 0x39
    37a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    37a4:	ab ad       	ldd	r26, Y+59	; 0x3b
    37a6:	bc ad       	ldd	r27, Y+60	; 0x3c
    37a8:	82 2b       	or	r24, r18
    37aa:	93 2b       	or	r25, r19
    37ac:	a4 2b       	or	r26, r20
    37ae:	b5 2b       	or	r27, r21
    37b0:	89 af       	std	Y+57, r24	; 0x39
    37b2:	9a af       	std	Y+58, r25	; 0x3a
    37b4:	ab af       	std	Y+59, r26	; 0x3b
    37b6:	bc af       	std	Y+60, r27	; 0x3c

	Local_enuErrorState = ES_OK;

#elif LCD_MODE == FOUR_BIT

	if(Global_u8Flag)
    37b8:	80 91 6c 02 	lds	r24, 0x026C
    37bc:	88 23       	and	r24, r24
    37be:	09 f4       	brne	.+2      	; 0x37c2 <LCD_inenuLatch+0x1de>
    37c0:	8f c1       	rjmp	.+798    	; 0x3ae0 <LCD_inenuLatch+0x4fc>
	{
		DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8HIGH);
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	66 e0       	ldi	r22, 0x06	; 6
    37c6:	41 e0       	ldi	r20, 0x01	; 1
    37c8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	a0 e8       	ldi	r26, 0x80	; 128
    37d2:	bf e3       	ldi	r27, 0x3F	; 63
    37d4:	8d ab       	std	Y+53, r24	; 0x35
    37d6:	9e ab       	std	Y+54, r25	; 0x36
    37d8:	af ab       	std	Y+55, r26	; 0x37
    37da:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37dc:	6d a9       	ldd	r22, Y+53	; 0x35
    37de:	7e a9       	ldd	r23, Y+54	; 0x36
    37e0:	8f a9       	ldd	r24, Y+55	; 0x37
    37e2:	98 ad       	ldd	r25, Y+56	; 0x38
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	4a e7       	ldi	r20, 0x7A	; 122
    37ea:	53 e4       	ldi	r21, 0x43	; 67
    37ec:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	89 ab       	std	Y+49, r24	; 0x31
    37f6:	9a ab       	std	Y+50, r25	; 0x32
    37f8:	ab ab       	std	Y+51, r26	; 0x33
    37fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37fc:	69 a9       	ldd	r22, Y+49	; 0x31
    37fe:	7a a9       	ldd	r23, Y+50	; 0x32
    3800:	8b a9       	ldd	r24, Y+51	; 0x33
    3802:	9c a9       	ldd	r25, Y+52	; 0x34
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	40 e8       	ldi	r20, 0x80	; 128
    380a:	5f e3       	ldi	r21, 0x3F	; 63
    380c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    3810:	88 23       	and	r24, r24
    3812:	2c f4       	brge	.+10     	; 0x381e <LCD_inenuLatch+0x23a>
		__ticks = 1;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	98 ab       	std	Y+48, r25	; 0x30
    381a:	8f a7       	std	Y+47, r24	; 0x2f
    381c:	3f c0       	rjmp	.+126    	; 0x389c <LCD_inenuLatch+0x2b8>
	else if (__tmp > 65535)
    381e:	69 a9       	ldd	r22, Y+49	; 0x31
    3820:	7a a9       	ldd	r23, Y+50	; 0x32
    3822:	8b a9       	ldd	r24, Y+51	; 0x33
    3824:	9c a9       	ldd	r25, Y+52	; 0x34
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	3f ef       	ldi	r19, 0xFF	; 255
    382a:	4f e7       	ldi	r20, 0x7F	; 127
    382c:	57 e4       	ldi	r21, 0x47	; 71
    382e:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    3832:	18 16       	cp	r1, r24
    3834:	4c f5       	brge	.+82     	; 0x3888 <LCD_inenuLatch+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3836:	6d a9       	ldd	r22, Y+53	; 0x35
    3838:	7e a9       	ldd	r23, Y+54	; 0x36
    383a:	8f a9       	ldd	r24, Y+55	; 0x37
    383c:	98 ad       	ldd	r25, Y+56	; 0x38
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	40 e2       	ldi	r20, 0x20	; 32
    3844:	51 e4       	ldi	r21, 0x41	; 65
    3846:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	98 ab       	std	Y+48, r25	; 0x30
    385c:	8f a7       	std	Y+47, r24	; 0x2f
    385e:	0f c0       	rjmp	.+30     	; 0x387e <LCD_inenuLatch+0x29a>
    3860:	89 e1       	ldi	r24, 0x19	; 25
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	9e a7       	std	Y+46, r25	; 0x2e
    3866:	8d a7       	std	Y+45, r24	; 0x2d
    3868:	8d a5       	ldd	r24, Y+45	; 0x2d
    386a:	9e a5       	ldd	r25, Y+46	; 0x2e
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <LCD_inenuLatch+0x288>
    3870:	9e a7       	std	Y+46, r25	; 0x2e
    3872:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3874:	8f a5       	ldd	r24, Y+47	; 0x2f
    3876:	98 a9       	ldd	r25, Y+48	; 0x30
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	98 ab       	std	Y+48, r25	; 0x30
    387c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3880:	98 a9       	ldd	r25, Y+48	; 0x30
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	69 f7       	brne	.-38     	; 0x3860 <LCD_inenuLatch+0x27c>
    3886:	14 c0       	rjmp	.+40     	; 0x38b0 <LCD_inenuLatch+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3888:	69 a9       	ldd	r22, Y+49	; 0x31
    388a:	7a a9       	ldd	r23, Y+50	; 0x32
    388c:	8b a9       	ldd	r24, Y+51	; 0x33
    388e:	9c a9       	ldd	r25, Y+52	; 0x34
    3890:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	98 ab       	std	Y+48, r25	; 0x30
    389a:	8f a7       	std	Y+47, r24	; 0x2f
    389c:	8f a5       	ldd	r24, Y+47	; 0x2f
    389e:	98 a9       	ldd	r25, Y+48	; 0x30
    38a0:	9c a7       	std	Y+44, r25	; 0x2c
    38a2:	8b a7       	std	Y+43, r24	; 0x2b
    38a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    38a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <LCD_inenuLatch+0x2c4>
    38ac:	9c a7       	std	Y+44, r25	; 0x2c
    38ae:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8LOW);
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	66 e0       	ldi	r22, 0x06	; 6
    38b4:	40 e0       	ldi	r20, 0x00	; 0
    38b6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    38ba:	80 e0       	ldi	r24, 0x00	; 0
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	a0 e8       	ldi	r26, 0x80	; 128
    38c0:	bf e3       	ldi	r27, 0x3F	; 63
    38c2:	8f a3       	std	Y+39, r24	; 0x27
    38c4:	98 a7       	std	Y+40, r25	; 0x28
    38c6:	a9 a7       	std	Y+41, r26	; 0x29
    38c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ca:	6f a1       	ldd	r22, Y+39	; 0x27
    38cc:	78 a5       	ldd	r23, Y+40	; 0x28
    38ce:	89 a5       	ldd	r24, Y+41	; 0x29
    38d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	4a e7       	ldi	r20, 0x7A	; 122
    38d8:	53 e4       	ldi	r21, 0x43	; 67
    38da:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	8b a3       	std	Y+35, r24	; 0x23
    38e4:	9c a3       	std	Y+36, r25	; 0x24
    38e6:	ad a3       	std	Y+37, r26	; 0x25
    38e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38ea:	6b a1       	ldd	r22, Y+35	; 0x23
    38ec:	7c a1       	ldd	r23, Y+36	; 0x24
    38ee:	8d a1       	ldd	r24, Y+37	; 0x25
    38f0:	9e a1       	ldd	r25, Y+38	; 0x26
    38f2:	20 e0       	ldi	r18, 0x00	; 0
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	40 e8       	ldi	r20, 0x80	; 128
    38f8:	5f e3       	ldi	r21, 0x3F	; 63
    38fa:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    38fe:	88 23       	and	r24, r24
    3900:	2c f4       	brge	.+10     	; 0x390c <LCD_inenuLatch+0x328>
		__ticks = 1;
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	9a a3       	std	Y+34, r25	; 0x22
    3908:	89 a3       	std	Y+33, r24	; 0x21
    390a:	3f c0       	rjmp	.+126    	; 0x398a <LCD_inenuLatch+0x3a6>
	else if (__tmp > 65535)
    390c:	6b a1       	ldd	r22, Y+35	; 0x23
    390e:	7c a1       	ldd	r23, Y+36	; 0x24
    3910:	8d a1       	ldd	r24, Y+37	; 0x25
    3912:	9e a1       	ldd	r25, Y+38	; 0x26
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	3f ef       	ldi	r19, 0xFF	; 255
    3918:	4f e7       	ldi	r20, 0x7F	; 127
    391a:	57 e4       	ldi	r21, 0x47	; 71
    391c:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    3920:	18 16       	cp	r1, r24
    3922:	4c f5       	brge	.+82     	; 0x3976 <LCD_inenuLatch+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3924:	6f a1       	ldd	r22, Y+39	; 0x27
    3926:	78 a5       	ldd	r23, Y+40	; 0x28
    3928:	89 a5       	ldd	r24, Y+41	; 0x29
    392a:	9a a5       	ldd	r25, Y+42	; 0x2a
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	40 e2       	ldi	r20, 0x20	; 32
    3932:	51 e4       	ldi	r21, 0x41	; 65
    3934:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3938:	dc 01       	movw	r26, r24
    393a:	cb 01       	movw	r24, r22
    393c:	bc 01       	movw	r22, r24
    393e:	cd 01       	movw	r24, r26
    3940:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3944:	dc 01       	movw	r26, r24
    3946:	cb 01       	movw	r24, r22
    3948:	9a a3       	std	Y+34, r25	; 0x22
    394a:	89 a3       	std	Y+33, r24	; 0x21
    394c:	0f c0       	rjmp	.+30     	; 0x396c <LCD_inenuLatch+0x388>
    394e:	89 e1       	ldi	r24, 0x19	; 25
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	98 a3       	std	Y+32, r25	; 0x20
    3954:	8f 8f       	std	Y+31, r24	; 0x1f
    3956:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3958:	98 a1       	ldd	r25, Y+32	; 0x20
    395a:	01 97       	sbiw	r24, 0x01	; 1
    395c:	f1 f7       	brne	.-4      	; 0x395a <LCD_inenuLatch+0x376>
    395e:	98 a3       	std	Y+32, r25	; 0x20
    3960:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3962:	89 a1       	ldd	r24, Y+33	; 0x21
    3964:	9a a1       	ldd	r25, Y+34	; 0x22
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	9a a3       	std	Y+34, r25	; 0x22
    396a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    396c:	89 a1       	ldd	r24, Y+33	; 0x21
    396e:	9a a1       	ldd	r25, Y+34	; 0x22
    3970:	00 97       	sbiw	r24, 0x00	; 0
    3972:	69 f7       	brne	.-38     	; 0x394e <LCD_inenuLatch+0x36a>
    3974:	14 c0       	rjmp	.+40     	; 0x399e <LCD_inenuLatch+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3976:	6b a1       	ldd	r22, Y+35	; 0x23
    3978:	7c a1       	ldd	r23, Y+36	; 0x24
    397a:	8d a1       	ldd	r24, Y+37	; 0x25
    397c:	9e a1       	ldd	r25, Y+38	; 0x26
    397e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	9a a3       	std	Y+34, r25	; 0x22
    3988:	89 a3       	std	Y+33, r24	; 0x21
    398a:	89 a1       	ldd	r24, Y+33	; 0x21
    398c:	9a a1       	ldd	r25, Y+34	; 0x22
    398e:	9e 8f       	std	Y+30, r25	; 0x1e
    3990:	8d 8f       	std	Y+29, r24	; 0x1d
    3992:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3994:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3996:	01 97       	sbiw	r24, 0x01	; 1
    3998:	f1 f7       	brne	.-4      	; 0x3996 <LCD_inenuLatch+0x3b2>
    399a:	9e 8f       	std	Y+30, r25	; 0x1e
    399c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB7_PORT, DB7_PIN, (Copy_u8Data>>3)&1 )<<6 ));
    399e:	8f ad       	ldd	r24, Y+63	; 0x3f
    39a0:	86 95       	lsr	r24
    39a2:	86 95       	lsr	r24
    39a4:	86 95       	lsr	r24
    39a6:	98 2f       	mov	r25, r24
    39a8:	91 70       	andi	r25, 0x01	; 1
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	65 e0       	ldi	r22, 0x05	; 5
    39ae:	49 2f       	mov	r20, r25
    39b0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    39b4:	88 2f       	mov	r24, r24
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	a0 e0       	ldi	r26, 0x00	; 0
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	88 0f       	add	r24, r24
    39be:	99 1f       	adc	r25, r25
    39c0:	aa 1f       	adc	r26, r26
    39c2:	bb 1f       	adc	r27, r27
    39c4:	88 0f       	add	r24, r24
    39c6:	99 1f       	adc	r25, r25
    39c8:	aa 1f       	adc	r26, r26
    39ca:	bb 1f       	adc	r27, r27
    39cc:	88 0f       	add	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	aa 1f       	adc	r26, r26
    39d2:	bb 1f       	adc	r27, r27
    39d4:	88 0f       	add	r24, r24
    39d6:	99 1f       	adc	r25, r25
    39d8:	aa 1f       	adc	r26, r26
    39da:	bb 1f       	adc	r27, r27
    39dc:	88 0f       	add	r24, r24
    39de:	99 1f       	adc	r25, r25
    39e0:	aa 1f       	adc	r26, r26
    39e2:	bb 1f       	adc	r27, r27
    39e4:	88 0f       	add	r24, r24
    39e6:	99 1f       	adc	r25, r25
    39e8:	aa 1f       	adc	r26, r26
    39ea:	bb 1f       	adc	r27, r27
    39ec:	9c 01       	movw	r18, r24
    39ee:	ad 01       	movw	r20, r26
    39f0:	89 ad       	ldd	r24, Y+57	; 0x39
    39f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    39f4:	ab ad       	ldd	r26, Y+59	; 0x3b
    39f6:	bc ad       	ldd	r27, Y+60	; 0x3c
    39f8:	82 2b       	or	r24, r18
    39fa:	93 2b       	or	r25, r19
    39fc:	a4 2b       	or	r26, r20
    39fe:	b5 2b       	or	r27, r21
    3a00:	89 af       	std	Y+57, r24	; 0x39
    3a02:	9a af       	std	Y+58, r25	; 0x3a
    3a04:	ab af       	std	Y+59, r26	; 0x3b
    3a06:	bc af       	std	Y+60, r27	; 0x3c
		Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB6_PORT, DB6_PIN, (Copy_u8Data>>2)&1 )<<9 ));
    3a08:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a0a:	86 95       	lsr	r24
    3a0c:	86 95       	lsr	r24
    3a0e:	98 2f       	mov	r25, r24
    3a10:	91 70       	andi	r25, 0x01	; 1
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	64 e0       	ldi	r22, 0x04	; 4
    3a16:	49 2f       	mov	r20, r25
    3a18:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    3a1c:	88 2f       	mov	r24, r24
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	a0 e0       	ldi	r26, 0x00	; 0
    3a22:	b0 e0       	ldi	r27, 0x00	; 0
    3a24:	9c 01       	movw	r18, r24
    3a26:	ad 01       	movw	r20, r26
    3a28:	01 2e       	mov	r0, r17
    3a2a:	19 e0       	ldi	r17, 0x09	; 9
    3a2c:	22 0f       	add	r18, r18
    3a2e:	33 1f       	adc	r19, r19
    3a30:	44 1f       	adc	r20, r20
    3a32:	55 1f       	adc	r21, r21
    3a34:	1a 95       	dec	r17
    3a36:	d1 f7       	brne	.-12     	; 0x3a2c <LCD_inenuLatch+0x448>
    3a38:	10 2d       	mov	r17, r0
    3a3a:	89 ad       	ldd	r24, Y+57	; 0x39
    3a3c:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a3e:	ab ad       	ldd	r26, Y+59	; 0x3b
    3a40:	bc ad       	ldd	r27, Y+60	; 0x3c
    3a42:	82 2b       	or	r24, r18
    3a44:	93 2b       	or	r25, r19
    3a46:	a4 2b       	or	r26, r20
    3a48:	b5 2b       	or	r27, r21
    3a4a:	89 af       	std	Y+57, r24	; 0x39
    3a4c:	9a af       	std	Y+58, r25	; 0x3a
    3a4e:	ab af       	std	Y+59, r26	; 0x3b
    3a50:	bc af       	std	Y+60, r27	; 0x3c
		Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB5_PORT, DB5_PIN, (Copy_u8Data>>1)&1 )<<12 ));
    3a52:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a54:	86 95       	lsr	r24
    3a56:	98 2f       	mov	r25, r24
    3a58:	91 70       	andi	r25, 0x01	; 1
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	63 e0       	ldi	r22, 0x03	; 3
    3a5e:	49 2f       	mov	r20, r25
    3a60:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    3a64:	88 2f       	mov	r24, r24
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	a0 e0       	ldi	r26, 0x00	; 0
    3a6a:	b0 e0       	ldi	r27, 0x00	; 0
    3a6c:	9c 01       	movw	r18, r24
    3a6e:	ad 01       	movw	r20, r26
    3a70:	01 2e       	mov	r0, r17
    3a72:	1c e0       	ldi	r17, 0x0C	; 12
    3a74:	22 0f       	add	r18, r18
    3a76:	33 1f       	adc	r19, r19
    3a78:	44 1f       	adc	r20, r20
    3a7a:	55 1f       	adc	r21, r21
    3a7c:	1a 95       	dec	r17
    3a7e:	d1 f7       	brne	.-12     	; 0x3a74 <LCD_inenuLatch+0x490>
    3a80:	10 2d       	mov	r17, r0
    3a82:	89 ad       	ldd	r24, Y+57	; 0x39
    3a84:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a86:	ab ad       	ldd	r26, Y+59	; 0x3b
    3a88:	bc ad       	ldd	r27, Y+60	; 0x3c
    3a8a:	82 2b       	or	r24, r18
    3a8c:	93 2b       	or	r25, r19
    3a8e:	a4 2b       	or	r26, r20
    3a90:	b5 2b       	or	r27, r21
    3a92:	89 af       	std	Y+57, r24	; 0x39
    3a94:	9a af       	std	Y+58, r25	; 0x3a
    3a96:	ab af       	std	Y+59, r26	; 0x3b
    3a98:	bc af       	std	Y+60, r27	; 0x3c
		Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB4_PORT, DB4_PIN, (Copy_u8Data>>0)&1 )<<15));
    3a9a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a9c:	98 2f       	mov	r25, r24
    3a9e:	91 70       	andi	r25, 0x01	; 1
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	62 e0       	ldi	r22, 0x02	; 2
    3aa4:	49 2f       	mov	r20, r25
    3aa6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    3aaa:	88 2f       	mov	r24, r24
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	a0 e0       	ldi	r26, 0x00	; 0
    3ab0:	b0 e0       	ldi	r27, 0x00	; 0
    3ab2:	9c 01       	movw	r18, r24
    3ab4:	ad 01       	movw	r20, r26
    3ab6:	01 2e       	mov	r0, r17
    3ab8:	1f e0       	ldi	r17, 0x0F	; 15
    3aba:	22 0f       	add	r18, r18
    3abc:	33 1f       	adc	r19, r19
    3abe:	44 1f       	adc	r20, r20
    3ac0:	55 1f       	adc	r21, r21
    3ac2:	1a 95       	dec	r17
    3ac4:	d1 f7       	brne	.-12     	; 0x3aba <LCD_inenuLatch+0x4d6>
    3ac6:	10 2d       	mov	r17, r0
    3ac8:	89 ad       	ldd	r24, Y+57	; 0x39
    3aca:	9a ad       	ldd	r25, Y+58	; 0x3a
    3acc:	ab ad       	ldd	r26, Y+59	; 0x3b
    3ace:	bc ad       	ldd	r27, Y+60	; 0x3c
    3ad0:	82 2b       	or	r24, r18
    3ad2:	93 2b       	or	r25, r19
    3ad4:	a4 2b       	or	r26, r20
    3ad6:	b5 2b       	or	r27, r21
    3ad8:	89 af       	std	Y+57, r24	; 0x39
    3ada:	9a af       	std	Y+58, r25	; 0x3a
    3adc:	ab af       	std	Y+59, r26	; 0x3b
    3ade:	bc af       	std	Y+60, r27	; 0x3c
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 18; Local_u8Iterator+=3)
    3ae0:	1d ae       	std	Y+61, r1	; 0x3d
    3ae2:	1f c0       	rjmp	.+62     	; 0x3b22 <LCD_inenuLatch+0x53e>
	{
		if(((Copy_u32Check >> Local_u8Iterator) & (0b111)) != ES_OK)
    3ae4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ae6:	28 2f       	mov	r18, r24
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	89 ad       	ldd	r24, Y+57	; 0x39
    3aec:	9a ad       	ldd	r25, Y+58	; 0x3a
    3aee:	ab ad       	ldd	r26, Y+59	; 0x3b
    3af0:	bc ad       	ldd	r27, Y+60	; 0x3c
    3af2:	02 2e       	mov	r0, r18
    3af4:	04 c0       	rjmp	.+8      	; 0x3afe <LCD_inenuLatch+0x51a>
    3af6:	b6 95       	lsr	r27
    3af8:	a7 95       	ror	r26
    3afa:	97 95       	ror	r25
    3afc:	87 95       	ror	r24
    3afe:	0a 94       	dec	r0
    3b00:	d2 f7       	brpl	.-12     	; 0x3af6 <LCD_inenuLatch+0x512>
    3b02:	87 70       	andi	r24, 0x07	; 7
    3b04:	90 70       	andi	r25, 0x00	; 0
    3b06:	a0 70       	andi	r26, 0x00	; 0
    3b08:	b0 70       	andi	r27, 0x00	; 0
    3b0a:	81 30       	cpi	r24, 0x01	; 1
    3b0c:	91 05       	cpc	r25, r1
    3b0e:	a1 05       	cpc	r26, r1
    3b10:	b1 05       	cpc	r27, r1
    3b12:	21 f0       	breq	.+8      	; 0x3b1c <LCD_inenuLatch+0x538>
		{
			return ES_NOK;
    3b14:	21 96       	adiw	r28, 0x01	; 1
    3b16:	1f ae       	std	Y+63, r1	; 0x3f
    3b18:	21 97       	sbiw	r28, 0x01	; 1
    3b1a:	fa c0       	rjmp	.+500    	; 0x3d10 <LCD_inenuLatch+0x72c>
		Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB6_PORT, DB6_PIN, (Copy_u8Data>>2)&1 )<<9 ));
		Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB5_PORT, DB5_PIN, (Copy_u8Data>>1)&1 )<<12 ));
		Copy_u32Check |= (((u32)DIO_enuSetPinVal(DB4_PORT, DB4_PIN, (Copy_u8Data>>0)&1 )<<15));
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 18; Local_u8Iterator+=3)
    3b1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b1e:	8d 5f       	subi	r24, 0xFD	; 253
    3b20:	8d af       	std	Y+61, r24	; 0x3d
    3b22:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b24:	82 31       	cpi	r24, 0x12	; 18
    3b26:	f0 f2       	brcs	.-68     	; 0x3ae4 <LCD_inenuLatch+0x500>
		{
			return ES_NOK;
		}
	}

	Local_enuErrorState = ES_OK;
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	8e af       	std	Y+62, r24	; 0x3e
#else
#error "Unsupported mode"
#endif
	// enable latch

	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8HIGH);
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	66 e0       	ldi	r22, 0x06	; 6
    3b30:	41 e0       	ldi	r20, 0x01	; 1
    3b32:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	a0 e8       	ldi	r26, 0x80	; 128
    3b3c:	bf e3       	ldi	r27, 0x3F	; 63
    3b3e:	89 8f       	std	Y+25, r24	; 0x19
    3b40:	9a 8f       	std	Y+26, r25	; 0x1a
    3b42:	ab 8f       	std	Y+27, r26	; 0x1b
    3b44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b46:	69 8d       	ldd	r22, Y+25	; 0x19
    3b48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	4a e7       	ldi	r20, 0x7A	; 122
    3b54:	53 e4       	ldi	r21, 0x43	; 67
    3b56:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	8d 8b       	std	Y+21, r24	; 0x15
    3b60:	9e 8b       	std	Y+22, r25	; 0x16
    3b62:	af 8b       	std	Y+23, r26	; 0x17
    3b64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b66:	6d 89       	ldd	r22, Y+21	; 0x15
    3b68:	7e 89       	ldd	r23, Y+22	; 0x16
    3b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	40 e8       	ldi	r20, 0x80	; 128
    3b74:	5f e3       	ldi	r21, 0x3F	; 63
    3b76:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    3b7a:	88 23       	and	r24, r24
    3b7c:	2c f4       	brge	.+10     	; 0x3b88 <LCD_inenuLatch+0x5a4>
		__ticks = 1;
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	9c 8b       	std	Y+20, r25	; 0x14
    3b84:	8b 8b       	std	Y+19, r24	; 0x13
    3b86:	3f c0       	rjmp	.+126    	; 0x3c06 <LCD_inenuLatch+0x622>
	else if (__tmp > 65535)
    3b88:	6d 89       	ldd	r22, Y+21	; 0x15
    3b8a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b8e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	3f ef       	ldi	r19, 0xFF	; 255
    3b94:	4f e7       	ldi	r20, 0x7F	; 127
    3b96:	57 e4       	ldi	r21, 0x47	; 71
    3b98:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    3b9c:	18 16       	cp	r1, r24
    3b9e:	4c f5       	brge	.+82     	; 0x3bf2 <LCD_inenuLatch+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ba2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ba4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ba6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ba8:	20 e0       	ldi	r18, 0x00	; 0
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	40 e2       	ldi	r20, 0x20	; 32
    3bae:	51 e4       	ldi	r21, 0x41	; 65
    3bb0:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	bc 01       	movw	r22, r24
    3bba:	cd 01       	movw	r24, r26
    3bbc:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	9c 8b       	std	Y+20, r25	; 0x14
    3bc6:	8b 8b       	std	Y+19, r24	; 0x13
    3bc8:	0f c0       	rjmp	.+30     	; 0x3be8 <LCD_inenuLatch+0x604>
    3bca:	89 e1       	ldi	r24, 0x19	; 25
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	9a 8b       	std	Y+18, r25	; 0x12
    3bd0:	89 8b       	std	Y+17, r24	; 0x11
    3bd2:	89 89       	ldd	r24, Y+17	; 0x11
    3bd4:	9a 89       	ldd	r25, Y+18	; 0x12
    3bd6:	01 97       	sbiw	r24, 0x01	; 1
    3bd8:	f1 f7       	brne	.-4      	; 0x3bd6 <LCD_inenuLatch+0x5f2>
    3bda:	9a 8b       	std	Y+18, r25	; 0x12
    3bdc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bde:	8b 89       	ldd	r24, Y+19	; 0x13
    3be0:	9c 89       	ldd	r25, Y+20	; 0x14
    3be2:	01 97       	sbiw	r24, 0x01	; 1
    3be4:	9c 8b       	std	Y+20, r25	; 0x14
    3be6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be8:	8b 89       	ldd	r24, Y+19	; 0x13
    3bea:	9c 89       	ldd	r25, Y+20	; 0x14
    3bec:	00 97       	sbiw	r24, 0x00	; 0
    3bee:	69 f7       	brne	.-38     	; 0x3bca <LCD_inenuLatch+0x5e6>
    3bf0:	14 c0       	rjmp	.+40     	; 0x3c1a <LCD_inenuLatch+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf2:	6d 89       	ldd	r22, Y+21	; 0x15
    3bf4:	7e 89       	ldd	r23, Y+22	; 0x16
    3bf6:	8f 89       	ldd	r24, Y+23	; 0x17
    3bf8:	98 8d       	ldd	r25, Y+24	; 0x18
    3bfa:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	9c 8b       	std	Y+20, r25	; 0x14
    3c04:	8b 8b       	std	Y+19, r24	; 0x13
    3c06:	8b 89       	ldd	r24, Y+19	; 0x13
    3c08:	9c 89       	ldd	r25, Y+20	; 0x14
    3c0a:	98 8b       	std	Y+16, r25	; 0x10
    3c0c:	8f 87       	std	Y+15, r24	; 0x0f
    3c0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c10:	98 89       	ldd	r25, Y+16	; 0x10
    3c12:	01 97       	sbiw	r24, 0x01	; 1
    3c14:	f1 f7       	brne	.-4      	; 0x3c12 <LCD_inenuLatch+0x62e>
    3c16:	98 8b       	std	Y+16, r25	; 0x10
    3c18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinVal(EN_PORT, EN_PIN, DIO_u8LOW);
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	66 e0       	ldi	r22, 0x06	; 6
    3c1e:	40 e0       	ldi	r20, 0x00	; 0
    3c20:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	a0 e8       	ldi	r26, 0x80	; 128
    3c2a:	bf e3       	ldi	r27, 0x3F	; 63
    3c2c:	8b 87       	std	Y+11, r24	; 0x0b
    3c2e:	9c 87       	std	Y+12, r25	; 0x0c
    3c30:	ad 87       	std	Y+13, r26	; 0x0d
    3c32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	4a e7       	ldi	r20, 0x7A	; 122
    3c42:	53 e4       	ldi	r21, 0x43	; 67
    3c44:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3c48:	dc 01       	movw	r26, r24
    3c4a:	cb 01       	movw	r24, r22
    3c4c:	8f 83       	std	Y+7, r24	; 0x07
    3c4e:	98 87       	std	Y+8, r25	; 0x08
    3c50:	a9 87       	std	Y+9, r26	; 0x09
    3c52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c54:	6f 81       	ldd	r22, Y+7	; 0x07
    3c56:	78 85       	ldd	r23, Y+8	; 0x08
    3c58:	89 85       	ldd	r24, Y+9	; 0x09
    3c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	40 e8       	ldi	r20, 0x80	; 128
    3c62:	5f e3       	ldi	r21, 0x3F	; 63
    3c64:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    3c68:	88 23       	and	r24, r24
    3c6a:	2c f4       	brge	.+10     	; 0x3c76 <LCD_inenuLatch+0x692>
		__ticks = 1;
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	9e 83       	std	Y+6, r25	; 0x06
    3c72:	8d 83       	std	Y+5, r24	; 0x05
    3c74:	3f c0       	rjmp	.+126    	; 0x3cf4 <LCD_inenuLatch+0x710>
	else if (__tmp > 65535)
    3c76:	6f 81       	ldd	r22, Y+7	; 0x07
    3c78:	78 85       	ldd	r23, Y+8	; 0x08
    3c7a:	89 85       	ldd	r24, Y+9	; 0x09
    3c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	3f ef       	ldi	r19, 0xFF	; 255
    3c82:	4f e7       	ldi	r20, 0x7F	; 127
    3c84:	57 e4       	ldi	r21, 0x47	; 71
    3c86:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    3c8a:	18 16       	cp	r1, r24
    3c8c:	4c f5       	brge	.+82     	; 0x3ce0 <LCD_inenuLatch+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	40 e2       	ldi	r20, 0x20	; 32
    3c9c:	51 e4       	ldi	r21, 0x41	; 65
    3c9e:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	bc 01       	movw	r22, r24
    3ca8:	cd 01       	movw	r24, r26
    3caa:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	9e 83       	std	Y+6, r25	; 0x06
    3cb4:	8d 83       	std	Y+5, r24	; 0x05
    3cb6:	0f c0       	rjmp	.+30     	; 0x3cd6 <LCD_inenuLatch+0x6f2>
    3cb8:	89 e1       	ldi	r24, 0x19	; 25
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	9c 83       	std	Y+4, r25	; 0x04
    3cbe:	8b 83       	std	Y+3, r24	; 0x03
    3cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	f1 f7       	brne	.-4      	; 0x3cc4 <LCD_inenuLatch+0x6e0>
    3cc8:	9c 83       	std	Y+4, r25	; 0x04
    3cca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cce:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
    3cd2:	9e 83       	std	Y+6, r25	; 0x06
    3cd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cda:	00 97       	sbiw	r24, 0x00	; 0
    3cdc:	69 f7       	brne	.-38     	; 0x3cb8 <LCD_inenuLatch+0x6d4>
    3cde:	14 c0       	rjmp	.+40     	; 0x3d08 <LCD_inenuLatch+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce2:	78 85       	ldd	r23, Y+8	; 0x08
    3ce4:	89 85       	ldd	r24, Y+9	; 0x09
    3ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce8:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	9e 83       	std	Y+6, r25	; 0x06
    3cf2:	8d 83       	std	Y+5, r24	; 0x05
    3cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf8:	9a 83       	std	Y+2, r25	; 0x02
    3cfa:	89 83       	std	Y+1, r24	; 0x01
    3cfc:	89 81       	ldd	r24, Y+1	; 0x01
    3cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    3d00:	01 97       	sbiw	r24, 0x01	; 1
    3d02:	f1 f7       	brne	.-4      	; 0x3d00 <LCD_inenuLatch+0x71c>
    3d04:	9a 83       	std	Y+2, r25	; 0x02
    3d06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	return Local_enuErrorState;
    3d08:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d0a:	21 96       	adiw	r28, 0x01	; 1
    3d0c:	8f af       	std	Y+63, r24	; 0x3f
    3d0e:	21 97       	sbiw	r28, 0x01	; 1
    3d10:	21 96       	adiw	r28, 0x01	; 1
    3d12:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d14:	21 97       	sbiw	r28, 0x01	; 1
}
    3d16:	c0 5c       	subi	r28, 0xC0	; 192
    3d18:	df 4f       	sbci	r29, 0xFF	; 255
    3d1a:	0f b6       	in	r0, 0x3f	; 63
    3d1c:	f8 94       	cli
    3d1e:	de bf       	out	0x3e, r29	; 62
    3d20:	0f be       	out	0x3f, r0	; 63
    3d22:	cd bf       	out	0x3d, r28	; 61
    3d24:	cf 91       	pop	r28
    3d26:	df 91       	pop	r29
    3d28:	08 95       	ret

00003d2a <LCD_inenuSendCommand>:


static inline ES_t LCD_inenuSendCommand(u8 Copy_u8Command)
{
    3d2a:	df 93       	push	r29
    3d2c:	cf 93       	push	r28
    3d2e:	00 d0       	rcall	.+0      	; 0x3d30 <LCD_inenuSendCommand+0x6>
    3d30:	cd b7       	in	r28, 0x3d	; 61
    3d32:	de b7       	in	r29, 0x3e	; 62
    3d34:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3d36:	19 82       	std	Y+1, r1	; 0x01

	// select instruction register
	if(DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW ) == ES_OK)
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	60 e0       	ldi	r22, 0x00	; 0
    3d3c:	40 e0       	ldi	r20, 0x00	; 0
    3d3e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <DIO_enuSetPinVal>
    3d42:	81 30       	cpi	r24, 0x01	; 1
    3d44:	21 f4       	brne	.+8      	; 0x3d4e <LCD_inenuSendCommand+0x24>
	{
		Local_enuErrorState = LCD_inenuLatch(Copy_u8Command);
    3d46:	8a 81       	ldd	r24, Y+2	; 0x02
    3d48:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LCD_inenuLatch>
    3d4c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3d4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d50:	0f 90       	pop	r0
    3d52:	0f 90       	pop	r0
    3d54:	cf 91       	pop	r28
    3d56:	df 91       	pop	r29
    3d58:	08 95       	ret

00003d5a <main>:
//		DIO_enuSetPortVal(DIO_u8PORTC,Local_u8Reading);
//	}
//	return 0;
//}
int main()
{
    3d5a:	df 93       	push	r29
    3d5c:	cf 93       	push	r28
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
    3d62:	c9 54       	subi	r28, 0x49	; 73
    3d64:	d0 40       	sbci	r29, 0x00	; 0
    3d66:	0f b6       	in	r0, 0x3f	; 63
    3d68:	f8 94       	cli
    3d6a:	de bf       	out	0x3e, r29	; 62
    3d6c:	0f be       	out	0x3f, r0	; 63
    3d6e:	cd bf       	out	0x3d, r28	; 61

	u8 Ball[] = {
	  0x00, 0x0E,0x1F,0x1F,0x1F,0x1F,0x0E,0x00
	};
    3d70:	ae 01       	movw	r20, r28
    3d72:	44 5c       	subi	r20, 0xC4	; 196
    3d74:	5f 4f       	sbci	r21, 0xFF	; 255
    3d76:	27 96       	adiw	r28, 0x07	; 7
    3d78:	5f af       	std	Y+63, r21	; 0x3f
    3d7a:	4e af       	std	Y+62, r20	; 0x3e
    3d7c:	27 97       	sbiw	r28, 0x07	; 7
    3d7e:	89 e5       	ldi	r24, 0x59	; 89
    3d80:	92 e0       	ldi	r25, 0x02	; 2
    3d82:	29 96       	adiw	r28, 0x09	; 9
    3d84:	9f af       	std	Y+63, r25	; 0x3f
    3d86:	8e af       	std	Y+62, r24	; 0x3e
    3d88:	29 97       	sbiw	r28, 0x09	; 9
    3d8a:	98 e0       	ldi	r25, 0x08	; 8
    3d8c:	2a 96       	adiw	r28, 0x0a	; 10
    3d8e:	9f af       	std	Y+63, r25	; 0x3f
    3d90:	2a 97       	sbiw	r28, 0x0a	; 10
    3d92:	29 96       	adiw	r28, 0x09	; 9
    3d94:	ee ad       	ldd	r30, Y+62	; 0x3e
    3d96:	ff ad       	ldd	r31, Y+63	; 0x3f
    3d98:	29 97       	sbiw	r28, 0x09	; 9
    3d9a:	00 80       	ld	r0, Z
    3d9c:	29 96       	adiw	r28, 0x09	; 9
    3d9e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3da0:	5f ad       	ldd	r21, Y+63	; 0x3f
    3da2:	29 97       	sbiw	r28, 0x09	; 9
    3da4:	4f 5f       	subi	r20, 0xFF	; 255
    3da6:	5f 4f       	sbci	r21, 0xFF	; 255
    3da8:	29 96       	adiw	r28, 0x09	; 9
    3daa:	5f af       	std	Y+63, r21	; 0x3f
    3dac:	4e af       	std	Y+62, r20	; 0x3e
    3dae:	29 97       	sbiw	r28, 0x09	; 9
    3db0:	27 96       	adiw	r28, 0x07	; 7
    3db2:	ee ad       	ldd	r30, Y+62	; 0x3e
    3db4:	ff ad       	ldd	r31, Y+63	; 0x3f
    3db6:	27 97       	sbiw	r28, 0x07	; 7
    3db8:	00 82       	st	Z, r0
    3dba:	27 96       	adiw	r28, 0x07	; 7
    3dbc:	4e ad       	ldd	r20, Y+62	; 0x3e
    3dbe:	5f ad       	ldd	r21, Y+63	; 0x3f
    3dc0:	27 97       	sbiw	r28, 0x07	; 7
    3dc2:	4f 5f       	subi	r20, 0xFF	; 255
    3dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc6:	27 96       	adiw	r28, 0x07	; 7
    3dc8:	5f af       	std	Y+63, r21	; 0x3f
    3dca:	4e af       	std	Y+62, r20	; 0x3e
    3dcc:	27 97       	sbiw	r28, 0x07	; 7
    3dce:	2a 96       	adiw	r28, 0x0a	; 10
    3dd0:	5f ad       	ldd	r21, Y+63	; 0x3f
    3dd2:	2a 97       	sbiw	r28, 0x0a	; 10
    3dd4:	51 50       	subi	r21, 0x01	; 1
    3dd6:	2a 96       	adiw	r28, 0x0a	; 10
    3dd8:	5f af       	std	Y+63, r21	; 0x3f
    3dda:	2a 97       	sbiw	r28, 0x0a	; 10
    3ddc:	2a 96       	adiw	r28, 0x0a	; 10
    3dde:	8f ad       	ldd	r24, Y+63	; 0x3f
    3de0:	2a 97       	sbiw	r28, 0x0a	; 10
    3de2:	88 23       	and	r24, r24
    3de4:	b1 f6       	brne	.-84     	; 0x3d92 <main+0x38>

	DIO_enuInit();
    3de6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_enuInit>
	LCD_enuInit();
    3dea:	0e 94 08 12 	call	0x2410	; 0x2410 <LCD_enuInit>


	EXTI_enuInit(EXTI_AstrEXTIConfig);
    3dee:	8a ef       	ldi	r24, 0xFA	; 250
    3df0:	91 e0       	ldi	r25, 0x01	; 1
    3df2:	0e 94 ca 07 	call	0xf94	; 0xf94 <EXTI_enuInit>
	EXIT_enuINT0SetCallBack(&INT0_ISR);
    3df6:	8c e4       	ldi	r24, 0x4C	; 76
    3df8:	92 e2       	ldi	r25, 0x22	; 34
    3dfa:	0e 94 94 0a 	call	0x1528	; 0x1528 <EXIT_enuINT0SetCallBack>
	EXIT_enuINT1SetCallBack(&INT1_ISR);
    3dfe:	8c e5       	ldi	r24, 0x5C	; 92
    3e00:	92 e2       	ldi	r25, 0x22	; 34
    3e02:	0e 94 b3 0a 	call	0x1566	; 0x1566 <EXIT_enuINT1SetCallBack>

	GIE_viodEnable();
    3e06:	0e 94 ae 07 	call	0xf5c	; 0xf5c <GIE_viodEnable>

	LCD_enuCreatChar(Ball,1,0);
    3e0a:	ce 01       	movw	r24, r28
    3e0c:	cc 96       	adiw	r24, 0x3c	; 60
    3e0e:	61 e0       	ldi	r22, 0x01	; 1
    3e10:	70 e0       	ldi	r23, 0x00	; 0
    3e12:	40 e0       	ldi	r20, 0x00	; 0
    3e14:	50 e0       	ldi	r21, 0x00	; 0
    3e16:	0e 94 53 19 	call	0x32a6	; 0x32a6 <LCD_enuCreatChar>
	LCD_enuGoto(1,0);
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	60 e0       	ldi	r22, 0x00	; 0
    3e20:	70 e0       	ldi	r23, 0x00	; 0
    3e22:	0e 94 9b 19 	call	0x3336	; 0x3336 <LCD_enuGoto>
	LCD_enuSendCommand(0x06);
    3e26:	86 e0       	ldi	r24, 0x06	; 6
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <LCD_enuSendCommand>


	while(1)
	{

		Global_u8AnotherRound = 0, Global_u8ShouwScore = 0 ,Global_u8Choose=0 ;
    3e2e:	10 92 6f 02 	sts	0x026F, r1
    3e32:	10 92 70 02 	sts	0x0270, r1
    3e36:	10 92 71 02 	sts	0x0271, r1
		if(Global_u8Turn){
    3e3a:	80 91 56 02 	lds	r24, 0x0256
    3e3e:	88 23       	and	r24, r24
    3e40:	09 f4       	brne	.+2      	; 0x3e44 <main+0xea>
    3e42:	83 c1       	rjmp	.+774    	; 0x414a <main+0x3f0>
			LCD_enuSendCommand(0x06);
    3e44:	86 e0       	ldi	r24, 0x06	; 6
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <LCD_enuSendCommand>

			for(u8 Local_u8Iter=0; Local_u8Iter<16; Local_u8Iter+=3){
    3e4c:	1b ae       	std	Y+59, r1	; 0x3b
    3e4e:	98 c0       	rjmp	.+304    	; 0x3f80 <main+0x226>
				Global_u8win1=1;
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	80 93 57 02 	sts	0x0257, r24

				if((Local_u8Iter&1)==0){
    3e56:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e58:	88 2f       	mov	r24, r24
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	81 70       	andi	r24, 0x01	; 1
    3e5e:	90 70       	andi	r25, 0x00	; 0
    3e60:	00 97       	sbiw	r24, 0x00	; 0
    3e62:	69 f4       	brne	.+26     	; 0x3e7e <main+0x124>
					LCD_enuGoto(2,0+Local_u8Iter);
    3e64:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e66:	28 2f       	mov	r18, r24
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	82 e0       	ldi	r24, 0x02	; 2
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	b9 01       	movw	r22, r18
    3e70:	0e 94 9b 19 	call	0x3336	; 0x3336 <LCD_enuGoto>
					LCD_enuSendChar(0);
    3e74:	80 e0       	ldi	r24, 0x00	; 0
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	0e 94 db 18 	call	0x31b6	; 0x31b6 <LCD_enuSendChar>
    3e7c:	0c c0       	rjmp	.+24     	; 0x3e96 <main+0x13c>
				}
				else{
					LCD_enuGoto(1,0+Local_u8Iter);
    3e7e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e80:	28 2f       	mov	r18, r24
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	b9 01       	movw	r22, r18
    3e8a:	0e 94 9b 19 	call	0x3336	; 0x3336 <LCD_enuGoto>
					LCD_enuSendChar(0);
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	0e 94 db 18 	call	0x31b6	; 0x31b6 <LCD_enuSendChar>
    3e96:	80 e0       	ldi	r24, 0x00	; 0
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	a8 e4       	ldi	r26, 0x48	; 72
    3e9c:	b3 e4       	ldi	r27, 0x43	; 67
    3e9e:	8d ab       	std	Y+53, r24	; 0x35
    3ea0:	9e ab       	std	Y+54, r25	; 0x36
    3ea2:	af ab       	std	Y+55, r26	; 0x37
    3ea4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ea6:	6d a9       	ldd	r22, Y+53	; 0x35
    3ea8:	7e a9       	ldd	r23, Y+54	; 0x36
    3eaa:	8f a9       	ldd	r24, Y+55	; 0x37
    3eac:	98 ad       	ldd	r25, Y+56	; 0x38
    3eae:	20 e0       	ldi	r18, 0x00	; 0
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	4a e7       	ldi	r20, 0x7A	; 122
    3eb4:	53 e4       	ldi	r21, 0x43	; 67
    3eb6:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3eba:	dc 01       	movw	r26, r24
    3ebc:	cb 01       	movw	r24, r22
    3ebe:	89 ab       	std	Y+49, r24	; 0x31
    3ec0:	9a ab       	std	Y+50, r25	; 0x32
    3ec2:	ab ab       	std	Y+51, r26	; 0x33
    3ec4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ec6:	69 a9       	ldd	r22, Y+49	; 0x31
    3ec8:	7a a9       	ldd	r23, Y+50	; 0x32
    3eca:	8b a9       	ldd	r24, Y+51	; 0x33
    3ecc:	9c a9       	ldd	r25, Y+52	; 0x34
    3ece:	20 e0       	ldi	r18, 0x00	; 0
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	40 e8       	ldi	r20, 0x80	; 128
    3ed4:	5f e3       	ldi	r21, 0x3F	; 63
    3ed6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    3eda:	88 23       	and	r24, r24
    3edc:	2c f4       	brge	.+10     	; 0x3ee8 <main+0x18e>
		__ticks = 1;
    3ede:	81 e0       	ldi	r24, 0x01	; 1
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	98 ab       	std	Y+48, r25	; 0x30
    3ee4:	8f a7       	std	Y+47, r24	; 0x2f
    3ee6:	3f c0       	rjmp	.+126    	; 0x3f66 <main+0x20c>
	else if (__tmp > 65535)
    3ee8:	69 a9       	ldd	r22, Y+49	; 0x31
    3eea:	7a a9       	ldd	r23, Y+50	; 0x32
    3eec:	8b a9       	ldd	r24, Y+51	; 0x33
    3eee:	9c a9       	ldd	r25, Y+52	; 0x34
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	3f ef       	ldi	r19, 0xFF	; 255
    3ef4:	4f e7       	ldi	r20, 0x7F	; 127
    3ef6:	57 e4       	ldi	r21, 0x47	; 71
    3ef8:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    3efc:	18 16       	cp	r1, r24
    3efe:	4c f5       	brge	.+82     	; 0x3f52 <main+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f00:	6d a9       	ldd	r22, Y+53	; 0x35
    3f02:	7e a9       	ldd	r23, Y+54	; 0x36
    3f04:	8f a9       	ldd	r24, Y+55	; 0x37
    3f06:	98 ad       	ldd	r25, Y+56	; 0x38
    3f08:	20 e0       	ldi	r18, 0x00	; 0
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	40 e2       	ldi	r20, 0x20	; 32
    3f0e:	51 e4       	ldi	r21, 0x41	; 65
    3f10:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3f14:	dc 01       	movw	r26, r24
    3f16:	cb 01       	movw	r24, r22
    3f18:	bc 01       	movw	r22, r24
    3f1a:	cd 01       	movw	r24, r26
    3f1c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3f20:	dc 01       	movw	r26, r24
    3f22:	cb 01       	movw	r24, r22
    3f24:	98 ab       	std	Y+48, r25	; 0x30
    3f26:	8f a7       	std	Y+47, r24	; 0x2f
    3f28:	0f c0       	rjmp	.+30     	; 0x3f48 <main+0x1ee>
    3f2a:	89 e1       	ldi	r24, 0x19	; 25
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	9e a7       	std	Y+46, r25	; 0x2e
    3f30:	8d a7       	std	Y+45, r24	; 0x2d
    3f32:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f34:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f36:	01 97       	sbiw	r24, 0x01	; 1
    3f38:	f1 f7       	brne	.-4      	; 0x3f36 <main+0x1dc>
    3f3a:	9e a7       	std	Y+46, r25	; 0x2e
    3f3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f40:	98 a9       	ldd	r25, Y+48	; 0x30
    3f42:	01 97       	sbiw	r24, 0x01	; 1
    3f44:	98 ab       	std	Y+48, r25	; 0x30
    3f46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f48:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f4a:	98 a9       	ldd	r25, Y+48	; 0x30
    3f4c:	00 97       	sbiw	r24, 0x00	; 0
    3f4e:	69 f7       	brne	.-38     	; 0x3f2a <main+0x1d0>
    3f50:	14 c0       	rjmp	.+40     	; 0x3f7a <main+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f52:	69 a9       	ldd	r22, Y+49	; 0x31
    3f54:	7a a9       	ldd	r23, Y+50	; 0x32
    3f56:	8b a9       	ldd	r24, Y+51	; 0x33
    3f58:	9c a9       	ldd	r25, Y+52	; 0x34
    3f5a:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	98 ab       	std	Y+48, r25	; 0x30
    3f64:	8f a7       	std	Y+47, r24	; 0x2f
    3f66:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f68:	98 a9       	ldd	r25, Y+48	; 0x30
    3f6a:	9c a7       	std	Y+44, r25	; 0x2c
    3f6c:	8b a7       	std	Y+43, r24	; 0x2b
    3f6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f70:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f72:	01 97       	sbiw	r24, 0x01	; 1
    3f74:	f1 f7       	brne	.-4      	; 0x3f72 <main+0x218>
    3f76:	9c a7       	std	Y+44, r25	; 0x2c
    3f78:	8b a7       	std	Y+43, r24	; 0x2b

		Global_u8AnotherRound = 0, Global_u8ShouwScore = 0 ,Global_u8Choose=0 ;
		if(Global_u8Turn){
			LCD_enuSendCommand(0x06);

			for(u8 Local_u8Iter=0; Local_u8Iter<16; Local_u8Iter+=3){
    3f7a:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f7c:	8d 5f       	subi	r24, 0xFD	; 253
    3f7e:	8b af       	std	Y+59, r24	; 0x3b
    3f80:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f82:	80 31       	cpi	r24, 0x10	; 16
    3f84:	08 f4       	brcc	.+2      	; 0x3f88 <main+0x22e>
    3f86:	64 cf       	rjmp	.-312    	; 0x3e50 <main+0xf6>
					LCD_enuGoto(1,0+Local_u8Iter);
					LCD_enuSendChar(0);
				}
				_delay_ms(200);
			}
			if(Global_u8win1){
    3f88:	80 91 57 02 	lds	r24, 0x0257
    3f8c:	88 23       	and	r24, r24
    3f8e:	09 f4       	brne	.+2      	; 0x3f92 <main+0x238>
    3f90:	d8 c0       	rjmp	.+432    	; 0x4142 <main+0x3e8>
				LCD_enuClearDisplay();
    3f92:	0e 94 0b 19 	call	0x3216	; 0x3216 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Player 1 won !..");
    3f96:	80 e6       	ldi	r24, 0x60	; 96
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
				Global_u8Score1++;
    3f9e:	80 91 6d 02 	lds	r24, 0x026D
    3fa2:	8f 5f       	subi	r24, 0xFF	; 255
    3fa4:	80 93 6d 02 	sts	0x026D, r24
    3fa8:	80 e0       	ldi	r24, 0x00	; 0
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	aa ef       	ldi	r26, 0xFA	; 250
    3fae:	b3 e4       	ldi	r27, 0x43	; 67
    3fb0:	8f a3       	std	Y+39, r24	; 0x27
    3fb2:	98 a7       	std	Y+40, r25	; 0x28
    3fb4:	a9 a7       	std	Y+41, r26	; 0x29
    3fb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fb8:	6f a1       	ldd	r22, Y+39	; 0x27
    3fba:	78 a5       	ldd	r23, Y+40	; 0x28
    3fbc:	89 a5       	ldd	r24, Y+41	; 0x29
    3fbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fc0:	20 e0       	ldi	r18, 0x00	; 0
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	4a e7       	ldi	r20, 0x7A	; 122
    3fc6:	53 e4       	ldi	r21, 0x43	; 67
    3fc8:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3fcc:	dc 01       	movw	r26, r24
    3fce:	cb 01       	movw	r24, r22
    3fd0:	8b a3       	std	Y+35, r24	; 0x23
    3fd2:	9c a3       	std	Y+36, r25	; 0x24
    3fd4:	ad a3       	std	Y+37, r26	; 0x25
    3fd6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3fd8:	6b a1       	ldd	r22, Y+35	; 0x23
    3fda:	7c a1       	ldd	r23, Y+36	; 0x24
    3fdc:	8d a1       	ldd	r24, Y+37	; 0x25
    3fde:	9e a1       	ldd	r25, Y+38	; 0x26
    3fe0:	20 e0       	ldi	r18, 0x00	; 0
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
    3fe4:	40 e8       	ldi	r20, 0x80	; 128
    3fe6:	5f e3       	ldi	r21, 0x3F	; 63
    3fe8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    3fec:	88 23       	and	r24, r24
    3fee:	2c f4       	brge	.+10     	; 0x3ffa <main+0x2a0>
		__ticks = 1;
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	9a a3       	std	Y+34, r25	; 0x22
    3ff6:	89 a3       	std	Y+33, r24	; 0x21
    3ff8:	3f c0       	rjmp	.+126    	; 0x4078 <main+0x31e>
	else if (__tmp > 65535)
    3ffa:	6b a1       	ldd	r22, Y+35	; 0x23
    3ffc:	7c a1       	ldd	r23, Y+36	; 0x24
    3ffe:	8d a1       	ldd	r24, Y+37	; 0x25
    4000:	9e a1       	ldd	r25, Y+38	; 0x26
    4002:	20 e0       	ldi	r18, 0x00	; 0
    4004:	3f ef       	ldi	r19, 0xFF	; 255
    4006:	4f e7       	ldi	r20, 0x7F	; 127
    4008:	57 e4       	ldi	r21, 0x47	; 71
    400a:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    400e:	18 16       	cp	r1, r24
    4010:	4c f5       	brge	.+82     	; 0x4064 <main+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4012:	6f a1       	ldd	r22, Y+39	; 0x27
    4014:	78 a5       	ldd	r23, Y+40	; 0x28
    4016:	89 a5       	ldd	r24, Y+41	; 0x29
    4018:	9a a5       	ldd	r25, Y+42	; 0x2a
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	40 e2       	ldi	r20, 0x20	; 32
    4020:	51 e4       	ldi	r21, 0x41	; 65
    4022:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	bc 01       	movw	r22, r24
    402c:	cd 01       	movw	r24, r26
    402e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4032:	dc 01       	movw	r26, r24
    4034:	cb 01       	movw	r24, r22
    4036:	9a a3       	std	Y+34, r25	; 0x22
    4038:	89 a3       	std	Y+33, r24	; 0x21
    403a:	0f c0       	rjmp	.+30     	; 0x405a <main+0x300>
    403c:	89 e1       	ldi	r24, 0x19	; 25
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	98 a3       	std	Y+32, r25	; 0x20
    4042:	8f 8f       	std	Y+31, r24	; 0x1f
    4044:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4046:	98 a1       	ldd	r25, Y+32	; 0x20
    4048:	01 97       	sbiw	r24, 0x01	; 1
    404a:	f1 f7       	brne	.-4      	; 0x4048 <main+0x2ee>
    404c:	98 a3       	std	Y+32, r25	; 0x20
    404e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4050:	89 a1       	ldd	r24, Y+33	; 0x21
    4052:	9a a1       	ldd	r25, Y+34	; 0x22
    4054:	01 97       	sbiw	r24, 0x01	; 1
    4056:	9a a3       	std	Y+34, r25	; 0x22
    4058:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    405a:	89 a1       	ldd	r24, Y+33	; 0x21
    405c:	9a a1       	ldd	r25, Y+34	; 0x22
    405e:	00 97       	sbiw	r24, 0x00	; 0
    4060:	69 f7       	brne	.-38     	; 0x403c <main+0x2e2>
    4062:	14 c0       	rjmp	.+40     	; 0x408c <main+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4064:	6b a1       	ldd	r22, Y+35	; 0x23
    4066:	7c a1       	ldd	r23, Y+36	; 0x24
    4068:	8d a1       	ldd	r24, Y+37	; 0x25
    406a:	9e a1       	ldd	r25, Y+38	; 0x26
    406c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4070:	dc 01       	movw	r26, r24
    4072:	cb 01       	movw	r24, r22
    4074:	9a a3       	std	Y+34, r25	; 0x22
    4076:	89 a3       	std	Y+33, r24	; 0x21
    4078:	89 a1       	ldd	r24, Y+33	; 0x21
    407a:	9a a1       	ldd	r25, Y+34	; 0x22
    407c:	9e 8f       	std	Y+30, r25	; 0x1e
    407e:	8d 8f       	std	Y+29, r24	; 0x1d
    4080:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4082:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	f1 f7       	brne	.-4      	; 0x4084 <main+0x32a>
    4088:	9e 8f       	std	Y+30, r25	; 0x1e
    408a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				LCD_enuClearDisplay();
    408c:	0e 94 0b 19 	call	0x3216	; 0x3216 <LCD_enuClearDisplay>
				LCD_enuDisplayString("show score   or ");
    4090:	81 e7       	ldi	r24, 0x71	; 113
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
				LCD_enuGoto(2,3);
    4098:	82 e0       	ldi	r24, 0x02	; 2
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	63 e0       	ldi	r22, 0x03	; 3
    409e:	70 e0       	ldi	r23, 0x00	; 0
    40a0:	0e 94 9b 19 	call	0x3336	; 0x3336 <LCD_enuGoto>
				LCD_enuDisplayString("another round");
    40a4:	82 e8       	ldi	r24, 0x82	; 130
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
				Global_u8Choose=1;
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	80 93 71 02 	sts	0x0271, r24
				while(Global_u8AnotherRound == 0 && Global_u8ShouwScore == 0 );
    40b2:	80 91 6f 02 	lds	r24, 0x026F
    40b6:	88 23       	and	r24, r24
    40b8:	21 f4       	brne	.+8      	; 0x40c2 <main+0x368>
    40ba:	80 91 70 02 	lds	r24, 0x0270
    40be:	88 23       	and	r24, r24
    40c0:	c1 f3       	breq	.-16     	; 0x40b2 <main+0x358>
				if(Global_u8ShouwScore)
    40c2:	80 91 70 02 	lds	r24, 0x0270
    40c6:	88 23       	and	r24, r24
    40c8:	b9 f1       	breq	.+110    	; 0x4138 <main+0x3de>
				{
					LCD_enuClearDisplay();
    40ca:	0e 94 0b 19 	call	0x3216	; 0x3216 <LCD_enuClearDisplay>
					LCD_enuDisplayString("     ");
    40ce:	80 e9       	ldi	r24, 0x90	; 144
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
					LCD_enuWriteNumber(Global_u8Score1);
    40d6:	80 91 6d 02 	lds	r24, 0x026D
    40da:	88 2f       	mov	r24, r24
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_enuWriteNumber>
					LCD_enuDisplayString("  -  ");
    40e2:	86 e9       	ldi	r24, 0x96	; 150
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
					LCD_enuWriteNumber(Global_u8Score2);
    40ea:	80 91 6e 02 	lds	r24, 0x026E
    40ee:	88 2f       	mov	r24, r24
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_enuWriteNumber>
					LCD_enuGoto(2,0);
    40f6:	82 e0       	ldi	r24, 0x02	; 2
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	60 e0       	ldi	r22, 0x00	; 0
    40fc:	70 e0       	ldi	r23, 0x00	; 0
    40fe:	0e 94 9b 19 	call	0x3336	; 0x3336 <LCD_enuGoto>

					if(Global_u8Score1>Global_u8Score2)
    4102:	90 91 6d 02 	lds	r25, 0x026D
    4106:	80 91 6e 02 	lds	r24, 0x026E
    410a:	89 17       	cp	r24, r25
    410c:	28 f4       	brcc	.+10     	; 0x4118 <main+0x3be>
					{
						LCD_enuDisplayString("Congrats player1! ");
    410e:	8c e9       	ldi	r24, 0x9C	; 156
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
    4116:	0f c0       	rjmp	.+30     	; 0x4136 <main+0x3dc>
					}
					else if(Global_u8Score1<Global_u8Score2) {
    4118:	90 91 6d 02 	lds	r25, 0x026D
    411c:	80 91 6e 02 	lds	r24, 0x026E
    4120:	98 17       	cp	r25, r24
    4122:	28 f4       	brcc	.+10     	; 0x412e <main+0x3d4>
						LCD_enuDisplayString("Congrats player1! ");
    4124:	8c e9       	ldi	r24, 0x9C	; 156
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
    412c:	04 c0       	rjmp	.+8      	; 0x4136 <main+0x3dc>
					}
					else {
						LCD_enuDisplayString("  It's a tie ! ");
    412e:	8f ea       	ldi	r24, 0xAF	; 175
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
    4136:	ff cf       	rjmp	.-2      	; 0x4136 <main+0x3dc>
					}
					while(1);

				}
				Global_u8AnotherRound = 0, Global_u8ShouwScore = 0 ;
    4138:	10 92 6f 02 	sts	0x026F, r1
    413c:	10 92 70 02 	sts	0x0270, r1
    4140:	98 c1       	rjmp	.+816    	; 0x4472 <main+0x718>
			}
			else Global_u8win1 = 1;
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	80 93 57 02 	sts	0x0257, r24
    4148:	94 c1       	rjmp	.+808    	; 0x4472 <main+0x718>
		}
		else
		{
			LCD_enuSendCommand(0x04);
    414a:	84 e0       	ldi	r24, 0x04	; 4
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <LCD_enuSendCommand>

			for(int Local_u8Iter=0; Local_u8Iter<16; Local_u8Iter+=3)
    4152:	1a ae       	std	Y+58, r1	; 0x3a
    4154:	19 ae       	std	Y+57, r1	; 0x39
    4156:	a3 c0       	rjmp	.+326    	; 0x429e <main+0x544>
			{
				Global_u8win2=1;
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	80 93 58 02 	sts	0x0258, r24


				if((Local_u8Iter&1)==0){
    415e:	89 ad       	ldd	r24, Y+57	; 0x39
    4160:	9a ad       	ldd	r25, Y+58	; 0x3a
    4162:	81 70       	andi	r24, 0x01	; 1
    4164:	90 70       	andi	r25, 0x00	; 0
    4166:	00 97       	sbiw	r24, 0x00	; 0
    4168:	91 f4       	brne	.+36     	; 0x418e <main+0x434>
					LCD_enuGoto(2,15-Local_u8Iter);
    416a:	8f e0       	ldi	r24, 0x0F	; 15
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	29 ad       	ldd	r18, Y+57	; 0x39
    4170:	3a ad       	ldd	r19, Y+58	; 0x3a
    4172:	fc 01       	movw	r30, r24
    4174:	e2 1b       	sub	r30, r18
    4176:	f3 0b       	sbc	r31, r19
    4178:	9f 01       	movw	r18, r30
    417a:	82 e0       	ldi	r24, 0x02	; 2
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	b9 01       	movw	r22, r18
    4180:	0e 94 9b 19 	call	0x3336	; 0x3336 <LCD_enuGoto>
					LCD_enuSendChar(0);
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	0e 94 db 18 	call	0x31b6	; 0x31b6 <LCD_enuSendChar>
    418c:	11 c0       	rjmp	.+34     	; 0x41b0 <main+0x456>

				}
				else{
					LCD_enuGoto(1,15-Local_u8Iter);
    418e:	8f e0       	ldi	r24, 0x0F	; 15
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	29 ad       	ldd	r18, Y+57	; 0x39
    4194:	3a ad       	ldd	r19, Y+58	; 0x3a
    4196:	ac 01       	movw	r20, r24
    4198:	42 1b       	sub	r20, r18
    419a:	53 0b       	sbc	r21, r19
    419c:	9a 01       	movw	r18, r20
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	b9 01       	movw	r22, r18
    41a4:	0e 94 9b 19 	call	0x3336	; 0x3336 <LCD_enuGoto>
					LCD_enuSendChar(0);
    41a8:	80 e0       	ldi	r24, 0x00	; 0
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	0e 94 db 18 	call	0x31b6	; 0x31b6 <LCD_enuSendChar>
    41b0:	80 e0       	ldi	r24, 0x00	; 0
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	a8 e4       	ldi	r26, 0x48	; 72
    41b6:	b3 e4       	ldi	r27, 0x43	; 67
    41b8:	89 8f       	std	Y+25, r24	; 0x19
    41ba:	9a 8f       	std	Y+26, r25	; 0x1a
    41bc:	ab 8f       	std	Y+27, r26	; 0x1b
    41be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41c0:	69 8d       	ldd	r22, Y+25	; 0x19
    41c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	4a e7       	ldi	r20, 0x7A	; 122
    41ce:	53 e4       	ldi	r21, 0x43	; 67
    41d0:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	8d 8b       	std	Y+21, r24	; 0x15
    41da:	9e 8b       	std	Y+22, r25	; 0x16
    41dc:	af 8b       	std	Y+23, r26	; 0x17
    41de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41e0:	6d 89       	ldd	r22, Y+21	; 0x15
    41e2:	7e 89       	ldd	r23, Y+22	; 0x16
    41e4:	8f 89       	ldd	r24, Y+23	; 0x17
    41e6:	98 8d       	ldd	r25, Y+24	; 0x18
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	40 e8       	ldi	r20, 0x80	; 128
    41ee:	5f e3       	ldi	r21, 0x3F	; 63
    41f0:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    41f4:	88 23       	and	r24, r24
    41f6:	2c f4       	brge	.+10     	; 0x4202 <main+0x4a8>
		__ticks = 1;
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	9c 8b       	std	Y+20, r25	; 0x14
    41fe:	8b 8b       	std	Y+19, r24	; 0x13
    4200:	3f c0       	rjmp	.+126    	; 0x4280 <main+0x526>
	else if (__tmp > 65535)
    4202:	6d 89       	ldd	r22, Y+21	; 0x15
    4204:	7e 89       	ldd	r23, Y+22	; 0x16
    4206:	8f 89       	ldd	r24, Y+23	; 0x17
    4208:	98 8d       	ldd	r25, Y+24	; 0x18
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	3f ef       	ldi	r19, 0xFF	; 255
    420e:	4f e7       	ldi	r20, 0x7F	; 127
    4210:	57 e4       	ldi	r21, 0x47	; 71
    4212:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    4216:	18 16       	cp	r1, r24
    4218:	4c f5       	brge	.+82     	; 0x426c <main+0x512>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    421a:	69 8d       	ldd	r22, Y+25	; 0x19
    421c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    421e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4220:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	30 e0       	ldi	r19, 0x00	; 0
    4226:	40 e2       	ldi	r20, 0x20	; 32
    4228:	51 e4       	ldi	r21, 0x41	; 65
    422a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    422e:	dc 01       	movw	r26, r24
    4230:	cb 01       	movw	r24, r22
    4232:	bc 01       	movw	r22, r24
    4234:	cd 01       	movw	r24, r26
    4236:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    423a:	dc 01       	movw	r26, r24
    423c:	cb 01       	movw	r24, r22
    423e:	9c 8b       	std	Y+20, r25	; 0x14
    4240:	8b 8b       	std	Y+19, r24	; 0x13
    4242:	0f c0       	rjmp	.+30     	; 0x4262 <main+0x508>
    4244:	89 e1       	ldi	r24, 0x19	; 25
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	9a 8b       	std	Y+18, r25	; 0x12
    424a:	89 8b       	std	Y+17, r24	; 0x11
    424c:	89 89       	ldd	r24, Y+17	; 0x11
    424e:	9a 89       	ldd	r25, Y+18	; 0x12
    4250:	01 97       	sbiw	r24, 0x01	; 1
    4252:	f1 f7       	brne	.-4      	; 0x4250 <main+0x4f6>
    4254:	9a 8b       	std	Y+18, r25	; 0x12
    4256:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4258:	8b 89       	ldd	r24, Y+19	; 0x13
    425a:	9c 89       	ldd	r25, Y+20	; 0x14
    425c:	01 97       	sbiw	r24, 0x01	; 1
    425e:	9c 8b       	std	Y+20, r25	; 0x14
    4260:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4262:	8b 89       	ldd	r24, Y+19	; 0x13
    4264:	9c 89       	ldd	r25, Y+20	; 0x14
    4266:	00 97       	sbiw	r24, 0x00	; 0
    4268:	69 f7       	brne	.-38     	; 0x4244 <main+0x4ea>
    426a:	14 c0       	rjmp	.+40     	; 0x4294 <main+0x53a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    426c:	6d 89       	ldd	r22, Y+21	; 0x15
    426e:	7e 89       	ldd	r23, Y+22	; 0x16
    4270:	8f 89       	ldd	r24, Y+23	; 0x17
    4272:	98 8d       	ldd	r25, Y+24	; 0x18
    4274:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4278:	dc 01       	movw	r26, r24
    427a:	cb 01       	movw	r24, r22
    427c:	9c 8b       	std	Y+20, r25	; 0x14
    427e:	8b 8b       	std	Y+19, r24	; 0x13
    4280:	8b 89       	ldd	r24, Y+19	; 0x13
    4282:	9c 89       	ldd	r25, Y+20	; 0x14
    4284:	98 8b       	std	Y+16, r25	; 0x10
    4286:	8f 87       	std	Y+15, r24	; 0x0f
    4288:	8f 85       	ldd	r24, Y+15	; 0x0f
    428a:	98 89       	ldd	r25, Y+16	; 0x10
    428c:	01 97       	sbiw	r24, 0x01	; 1
    428e:	f1 f7       	brne	.-4      	; 0x428c <main+0x532>
    4290:	98 8b       	std	Y+16, r25	; 0x10
    4292:	8f 87       	std	Y+15, r24	; 0x0f
		}
		else
		{
			LCD_enuSendCommand(0x04);

			for(int Local_u8Iter=0; Local_u8Iter<16; Local_u8Iter+=3)
    4294:	89 ad       	ldd	r24, Y+57	; 0x39
    4296:	9a ad       	ldd	r25, Y+58	; 0x3a
    4298:	03 96       	adiw	r24, 0x03	; 3
    429a:	9a af       	std	Y+58, r25	; 0x3a
    429c:	89 af       	std	Y+57, r24	; 0x39
    429e:	89 ad       	ldd	r24, Y+57	; 0x39
    42a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    42a2:	80 31       	cpi	r24, 0x10	; 16
    42a4:	91 05       	cpc	r25, r1
    42a6:	0c f4       	brge	.+2      	; 0x42aa <main+0x550>
    42a8:	57 cf       	rjmp	.-338    	; 0x4158 <main+0x3fe>
				}
				_delay_ms(200);

			}

			if(Global_u8win2){
    42aa:	80 91 58 02 	lds	r24, 0x0258
    42ae:	88 23       	and	r24, r24
    42b0:	09 f4       	brne	.+2      	; 0x42b4 <main+0x55a>
    42b2:	dc c0       	rjmp	.+440    	; 0x446c <main+0x712>
				LCD_enuClearDisplay();
    42b4:	0e 94 0b 19 	call	0x3216	; 0x3216 <LCD_enuClearDisplay>
				LCD_enuSendCommand(0x06);
    42b8:	86 e0       	ldi	r24, 0x06	; 6
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <LCD_enuSendCommand>
				LCD_enuDisplayString("Player 2 won !..");
    42c0:	8f eb       	ldi	r24, 0xBF	; 191
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
				Global_u8Score2++;
    42c8:	80 91 6e 02 	lds	r24, 0x026E
    42cc:	8f 5f       	subi	r24, 0xFF	; 255
    42ce:	80 93 6e 02 	sts	0x026E, r24
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	aa ef       	ldi	r26, 0xFA	; 250
    42d8:	b3 e4       	ldi	r27, 0x43	; 67
    42da:	8b 87       	std	Y+11, r24	; 0x0b
    42dc:	9c 87       	std	Y+12, r25	; 0x0c
    42de:	ad 87       	std	Y+13, r26	; 0x0d
    42e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    42e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    42e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    42e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	4a e7       	ldi	r20, 0x7A	; 122
    42f0:	53 e4       	ldi	r21, 0x43	; 67
    42f2:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    42f6:	dc 01       	movw	r26, r24
    42f8:	cb 01       	movw	r24, r22
    42fa:	8f 83       	std	Y+7, r24	; 0x07
    42fc:	98 87       	std	Y+8, r25	; 0x08
    42fe:	a9 87       	std	Y+9, r26	; 0x09
    4300:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4302:	6f 81       	ldd	r22, Y+7	; 0x07
    4304:	78 85       	ldd	r23, Y+8	; 0x08
    4306:	89 85       	ldd	r24, Y+9	; 0x09
    4308:	9a 85       	ldd	r25, Y+10	; 0x0a
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	40 e8       	ldi	r20, 0x80	; 128
    4310:	5f e3       	ldi	r21, 0x3F	; 63
    4312:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__ltsf2>
    4316:	88 23       	and	r24, r24
    4318:	2c f4       	brge	.+10     	; 0x4324 <main+0x5ca>
		__ticks = 1;
    431a:	81 e0       	ldi	r24, 0x01	; 1
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	9e 83       	std	Y+6, r25	; 0x06
    4320:	8d 83       	std	Y+5, r24	; 0x05
    4322:	3f c0       	rjmp	.+126    	; 0x43a2 <main+0x648>
	else if (__tmp > 65535)
    4324:	6f 81       	ldd	r22, Y+7	; 0x07
    4326:	78 85       	ldd	r23, Y+8	; 0x08
    4328:	89 85       	ldd	r24, Y+9	; 0x09
    432a:	9a 85       	ldd	r25, Y+10	; 0x0a
    432c:	20 e0       	ldi	r18, 0x00	; 0
    432e:	3f ef       	ldi	r19, 0xFF	; 255
    4330:	4f e7       	ldi	r20, 0x7F	; 127
    4332:	57 e4       	ldi	r21, 0x47	; 71
    4334:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gtsf2>
    4338:	18 16       	cp	r1, r24
    433a:	4c f5       	brge	.+82     	; 0x438e <main+0x634>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    433c:	6b 85       	ldd	r22, Y+11	; 0x0b
    433e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4340:	8d 85       	ldd	r24, Y+13	; 0x0d
    4342:	9e 85       	ldd	r25, Y+14	; 0x0e
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	40 e2       	ldi	r20, 0x20	; 32
    434a:	51 e4       	ldi	r21, 0x41	; 65
    434c:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    4350:	dc 01       	movw	r26, r24
    4352:	cb 01       	movw	r24, r22
    4354:	bc 01       	movw	r22, r24
    4356:	cd 01       	movw	r24, r26
    4358:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	9e 83       	std	Y+6, r25	; 0x06
    4362:	8d 83       	std	Y+5, r24	; 0x05
    4364:	0f c0       	rjmp	.+30     	; 0x4384 <main+0x62a>
    4366:	89 e1       	ldi	r24, 0x19	; 25
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	9c 83       	std	Y+4, r25	; 0x04
    436c:	8b 83       	std	Y+3, r24	; 0x03
    436e:	8b 81       	ldd	r24, Y+3	; 0x03
    4370:	9c 81       	ldd	r25, Y+4	; 0x04
    4372:	01 97       	sbiw	r24, 0x01	; 1
    4374:	f1 f7       	brne	.-4      	; 0x4372 <main+0x618>
    4376:	9c 83       	std	Y+4, r25	; 0x04
    4378:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    437a:	8d 81       	ldd	r24, Y+5	; 0x05
    437c:	9e 81       	ldd	r25, Y+6	; 0x06
    437e:	01 97       	sbiw	r24, 0x01	; 1
    4380:	9e 83       	std	Y+6, r25	; 0x06
    4382:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4384:	8d 81       	ldd	r24, Y+5	; 0x05
    4386:	9e 81       	ldd	r25, Y+6	; 0x06
    4388:	00 97       	sbiw	r24, 0x00	; 0
    438a:	69 f7       	brne	.-38     	; 0x4366 <main+0x60c>
    438c:	14 c0       	rjmp	.+40     	; 0x43b6 <main+0x65c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    438e:	6f 81       	ldd	r22, Y+7	; 0x07
    4390:	78 85       	ldd	r23, Y+8	; 0x08
    4392:	89 85       	ldd	r24, Y+9	; 0x09
    4394:	9a 85       	ldd	r25, Y+10	; 0x0a
    4396:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    439a:	dc 01       	movw	r26, r24
    439c:	cb 01       	movw	r24, r22
    439e:	9e 83       	std	Y+6, r25	; 0x06
    43a0:	8d 83       	std	Y+5, r24	; 0x05
    43a2:	8d 81       	ldd	r24, Y+5	; 0x05
    43a4:	9e 81       	ldd	r25, Y+6	; 0x06
    43a6:	9a 83       	std	Y+2, r25	; 0x02
    43a8:	89 83       	std	Y+1, r24	; 0x01
    43aa:	89 81       	ldd	r24, Y+1	; 0x01
    43ac:	9a 81       	ldd	r25, Y+2	; 0x02
    43ae:	01 97       	sbiw	r24, 0x01	; 1
    43b0:	f1 f7       	brne	.-4      	; 0x43ae <main+0x654>
    43b2:	9a 83       	std	Y+2, r25	; 0x02
    43b4:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				LCD_enuClearDisplay();
    43b6:	0e 94 0b 19 	call	0x3216	; 0x3216 <LCD_enuClearDisplay>
				LCD_enuDisplayString("show score   or ");
    43ba:	81 e7       	ldi	r24, 0x71	; 113
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
				LCD_enuGoto(2,3);
    43c2:	82 e0       	ldi	r24, 0x02	; 2
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	63 e0       	ldi	r22, 0x03	; 3
    43c8:	70 e0       	ldi	r23, 0x00	; 0
    43ca:	0e 94 9b 19 	call	0x3336	; 0x3336 <LCD_enuGoto>
				LCD_enuDisplayString("another round");
    43ce:	82 e8       	ldi	r24, 0x82	; 130
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
				Global_u8Choose=1;
    43d6:	81 e0       	ldi	r24, 0x01	; 1
    43d8:	80 93 71 02 	sts	0x0271, r24
				while(Global_u8AnotherRound == 0 && Global_u8ShouwScore == 0 );
    43dc:	80 91 6f 02 	lds	r24, 0x026F
    43e0:	88 23       	and	r24, r24
    43e2:	21 f4       	brne	.+8      	; 0x43ec <main+0x692>
    43e4:	80 91 70 02 	lds	r24, 0x0270
    43e8:	88 23       	and	r24, r24
    43ea:	c1 f3       	breq	.-16     	; 0x43dc <main+0x682>
				if(Global_u8ShouwScore)
    43ec:	80 91 70 02 	lds	r24, 0x0270
    43f0:	88 23       	and	r24, r24
    43f2:	b9 f1       	breq	.+110    	; 0x4462 <main+0x708>
				{
					LCD_enuClearDisplay();
    43f4:	0e 94 0b 19 	call	0x3216	; 0x3216 <LCD_enuClearDisplay>
					LCD_enuDisplayString("     ");
    43f8:	80 e9       	ldi	r24, 0x90	; 144
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
					LCD_enuWriteNumber(Global_u8Score1);
    4400:	80 91 6d 02 	lds	r24, 0x026D
    4404:	88 2f       	mov	r24, r24
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_enuWriteNumber>
					LCD_enuDisplayString("  -  ");
    440c:	86 e9       	ldi	r24, 0x96	; 150
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
					LCD_enuWriteNumber(Global_u8Score2);
    4414:	80 91 6e 02 	lds	r24, 0x026E
    4418:	88 2f       	mov	r24, r24
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	0e 94 b9 19 	call	0x3372	; 0x3372 <LCD_enuWriteNumber>
					LCD_enuGoto(2,0);
    4420:	82 e0       	ldi	r24, 0x02	; 2
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	60 e0       	ldi	r22, 0x00	; 0
    4426:	70 e0       	ldi	r23, 0x00	; 0
    4428:	0e 94 9b 19 	call	0x3336	; 0x3336 <LCD_enuGoto>
					if(Global_u8Score1>Global_u8Score2)
    442c:	90 91 6d 02 	lds	r25, 0x026D
    4430:	80 91 6e 02 	lds	r24, 0x026E
    4434:	89 17       	cp	r24, r25
    4436:	28 f4       	brcc	.+10     	; 0x4442 <main+0x6e8>
					{
						LCD_enuDisplayString("Congrats player2! ");
    4438:	80 ed       	ldi	r24, 0xD0	; 208
    443a:	90 e0       	ldi	r25, 0x00	; 0
    443c:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
    4440:	0f c0       	rjmp	.+30     	; 0x4460 <main+0x706>
					}
					else if(Global_u8Score1<Global_u8Score2) {
    4442:	90 91 6d 02 	lds	r25, 0x026D
    4446:	80 91 6e 02 	lds	r24, 0x026E
    444a:	98 17       	cp	r25, r24
    444c:	28 f4       	brcc	.+10     	; 0x4458 <main+0x6fe>
						LCD_enuDisplayString("Congrats player2! ");
    444e:	80 ed       	ldi	r24, 0xD0	; 208
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
    4456:	04 c0       	rjmp	.+8      	; 0x4460 <main+0x706>
					}
					else {
						LCD_enuDisplayString("  It's a tie !");
    4458:	83 ee       	ldi	r24, 0xE3	; 227
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	0e 94 1a 19 	call	0x3234	; 0x3234 <LCD_enuDisplayString>
    4460:	ff cf       	rjmp	.-2      	; 0x4460 <main+0x706>
					}

					while(1);

				}
				Global_u8AnotherRound = 0, Global_u8ShouwScore = 0 ;
    4462:	10 92 6f 02 	sts	0x026F, r1
    4466:	10 92 70 02 	sts	0x0270, r1
    446a:	03 c0       	rjmp	.+6      	; 0x4472 <main+0x718>

			}
			else Global_u8win2 =1;
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	80 93 58 02 	sts	0x0258, r24
		}

		Global_u8Turn = !Global_u8Turn;
    4472:	80 91 56 02 	lds	r24, 0x0256
    4476:	25 96       	adiw	r28, 0x05	; 5
    4478:	1f ae       	std	Y+63, r1	; 0x3f
    447a:	25 97       	sbiw	r28, 0x05	; 5
    447c:	88 23       	and	r24, r24
    447e:	21 f4       	brne	.+8      	; 0x4488 <main+0x72e>
    4480:	51 e0       	ldi	r21, 0x01	; 1
    4482:	25 96       	adiw	r28, 0x05	; 5
    4484:	5f af       	std	Y+63, r21	; 0x3f
    4486:	25 97       	sbiw	r28, 0x05	; 5
    4488:	25 96       	adiw	r28, 0x05	; 5
    448a:	8f ad       	ldd	r24, Y+63	; 0x3f
    448c:	25 97       	sbiw	r28, 0x05	; 5
    448e:	80 93 56 02 	sts	0x0256, r24
		LCD_enuClearDisplay();
    4492:	0e 94 0b 19 	call	0x3216	; 0x3216 <LCD_enuClearDisplay>
    4496:	cb cc       	rjmp	.-1642   	; 0x3e2e <main+0xd4>

00004498 <INT0_ISR>:
	}
	return 0;
}

void INT0_ISR(void)
{
    4498:	df 93       	push	r29
    449a:	cf 93       	push	r28
    449c:	cd b7       	in	r28, 0x3d	; 61
    449e:	de b7       	in	r29, 0x3e	; 62
	if(Global_u8Choose)
    44a0:	80 91 71 02 	lds	r24, 0x0271
    44a4:	88 23       	and	r24, r24
    44a6:	19 f0       	breq	.+6      	; 0x44ae <INT0_ISR+0x16>
	{
		Global_u8AnotherRound =1;
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	80 93 6f 02 	sts	0x026F, r24
	}
	Global_u8win1=0;
    44ae:	10 92 57 02 	sts	0x0257, r1
}
    44b2:	cf 91       	pop	r28
    44b4:	df 91       	pop	r29
    44b6:	08 95       	ret

000044b8 <INT1_ISR>:

void INT1_ISR(void)
{
    44b8:	df 93       	push	r29
    44ba:	cf 93       	push	r28
    44bc:	cd b7       	in	r28, 0x3d	; 61
    44be:	de b7       	in	r29, 0x3e	; 62
	if(Global_u8Choose)
    44c0:	80 91 71 02 	lds	r24, 0x0271
    44c4:	88 23       	and	r24, r24
    44c6:	19 f0       	breq	.+6      	; 0x44ce <INT1_ISR+0x16>
	{
		Global_u8ShouwScore =1;
    44c8:	81 e0       	ldi	r24, 0x01	; 1
    44ca:	80 93 70 02 	sts	0x0270, r24
	}
	Global_u8win2=0;
    44ce:	10 92 58 02 	sts	0x0258, r1
}
    44d2:	cf 91       	pop	r28
    44d4:	df 91       	pop	r29
    44d6:	08 95       	ret

000044d8 <__udivmodhi4>:
    44d8:	aa 1b       	sub	r26, r26
    44da:	bb 1b       	sub	r27, r27
    44dc:	51 e1       	ldi	r21, 0x11	; 17
    44de:	07 c0       	rjmp	.+14     	; 0x44ee <__udivmodhi4_ep>

000044e0 <__udivmodhi4_loop>:
    44e0:	aa 1f       	adc	r26, r26
    44e2:	bb 1f       	adc	r27, r27
    44e4:	a6 17       	cp	r26, r22
    44e6:	b7 07       	cpc	r27, r23
    44e8:	10 f0       	brcs	.+4      	; 0x44ee <__udivmodhi4_ep>
    44ea:	a6 1b       	sub	r26, r22
    44ec:	b7 0b       	sbc	r27, r23

000044ee <__udivmodhi4_ep>:
    44ee:	88 1f       	adc	r24, r24
    44f0:	99 1f       	adc	r25, r25
    44f2:	5a 95       	dec	r21
    44f4:	a9 f7       	brne	.-22     	; 0x44e0 <__udivmodhi4_loop>
    44f6:	80 95       	com	r24
    44f8:	90 95       	com	r25
    44fa:	bc 01       	movw	r22, r24
    44fc:	cd 01       	movw	r24, r26
    44fe:	08 95       	ret

00004500 <__divmodsi4>:
    4500:	97 fb       	bst	r25, 7
    4502:	09 2e       	mov	r0, r25
    4504:	05 26       	eor	r0, r21
    4506:	0e d0       	rcall	.+28     	; 0x4524 <__divmodsi4_neg1>
    4508:	57 fd       	sbrc	r21, 7
    450a:	04 d0       	rcall	.+8      	; 0x4514 <__divmodsi4_neg2>
    450c:	14 d0       	rcall	.+40     	; 0x4536 <__udivmodsi4>
    450e:	0a d0       	rcall	.+20     	; 0x4524 <__divmodsi4_neg1>
    4510:	00 1c       	adc	r0, r0
    4512:	38 f4       	brcc	.+14     	; 0x4522 <__divmodsi4_exit>

00004514 <__divmodsi4_neg2>:
    4514:	50 95       	com	r21
    4516:	40 95       	com	r20
    4518:	30 95       	com	r19
    451a:	21 95       	neg	r18
    451c:	3f 4f       	sbci	r19, 0xFF	; 255
    451e:	4f 4f       	sbci	r20, 0xFF	; 255
    4520:	5f 4f       	sbci	r21, 0xFF	; 255

00004522 <__divmodsi4_exit>:
    4522:	08 95       	ret

00004524 <__divmodsi4_neg1>:
    4524:	f6 f7       	brtc	.-4      	; 0x4522 <__divmodsi4_exit>
    4526:	90 95       	com	r25
    4528:	80 95       	com	r24
    452a:	70 95       	com	r23
    452c:	61 95       	neg	r22
    452e:	7f 4f       	sbci	r23, 0xFF	; 255
    4530:	8f 4f       	sbci	r24, 0xFF	; 255
    4532:	9f 4f       	sbci	r25, 0xFF	; 255
    4534:	08 95       	ret

00004536 <__udivmodsi4>:
    4536:	a1 e2       	ldi	r26, 0x21	; 33
    4538:	1a 2e       	mov	r1, r26
    453a:	aa 1b       	sub	r26, r26
    453c:	bb 1b       	sub	r27, r27
    453e:	fd 01       	movw	r30, r26
    4540:	0d c0       	rjmp	.+26     	; 0x455c <__udivmodsi4_ep>

00004542 <__udivmodsi4_loop>:
    4542:	aa 1f       	adc	r26, r26
    4544:	bb 1f       	adc	r27, r27
    4546:	ee 1f       	adc	r30, r30
    4548:	ff 1f       	adc	r31, r31
    454a:	a2 17       	cp	r26, r18
    454c:	b3 07       	cpc	r27, r19
    454e:	e4 07       	cpc	r30, r20
    4550:	f5 07       	cpc	r31, r21
    4552:	20 f0       	brcs	.+8      	; 0x455c <__udivmodsi4_ep>
    4554:	a2 1b       	sub	r26, r18
    4556:	b3 0b       	sbc	r27, r19
    4558:	e4 0b       	sbc	r30, r20
    455a:	f5 0b       	sbc	r31, r21

0000455c <__udivmodsi4_ep>:
    455c:	66 1f       	adc	r22, r22
    455e:	77 1f       	adc	r23, r23
    4560:	88 1f       	adc	r24, r24
    4562:	99 1f       	adc	r25, r25
    4564:	1a 94       	dec	r1
    4566:	69 f7       	brne	.-38     	; 0x4542 <__udivmodsi4_loop>
    4568:	60 95       	com	r22
    456a:	70 95       	com	r23
    456c:	80 95       	com	r24
    456e:	90 95       	com	r25
    4570:	9b 01       	movw	r18, r22
    4572:	ac 01       	movw	r20, r24
    4574:	bd 01       	movw	r22, r26
    4576:	cf 01       	movw	r24, r30
    4578:	08 95       	ret

0000457a <__prologue_saves__>:
    457a:	2f 92       	push	r2
    457c:	3f 92       	push	r3
    457e:	4f 92       	push	r4
    4580:	5f 92       	push	r5
    4582:	6f 92       	push	r6
    4584:	7f 92       	push	r7
    4586:	8f 92       	push	r8
    4588:	9f 92       	push	r9
    458a:	af 92       	push	r10
    458c:	bf 92       	push	r11
    458e:	cf 92       	push	r12
    4590:	df 92       	push	r13
    4592:	ef 92       	push	r14
    4594:	ff 92       	push	r15
    4596:	0f 93       	push	r16
    4598:	1f 93       	push	r17
    459a:	cf 93       	push	r28
    459c:	df 93       	push	r29
    459e:	cd b7       	in	r28, 0x3d	; 61
    45a0:	de b7       	in	r29, 0x3e	; 62
    45a2:	ca 1b       	sub	r28, r26
    45a4:	db 0b       	sbc	r29, r27
    45a6:	0f b6       	in	r0, 0x3f	; 63
    45a8:	f8 94       	cli
    45aa:	de bf       	out	0x3e, r29	; 62
    45ac:	0f be       	out	0x3f, r0	; 63
    45ae:	cd bf       	out	0x3d, r28	; 61
    45b0:	09 94       	ijmp

000045b2 <__epilogue_restores__>:
    45b2:	2a 88       	ldd	r2, Y+18	; 0x12
    45b4:	39 88       	ldd	r3, Y+17	; 0x11
    45b6:	48 88       	ldd	r4, Y+16	; 0x10
    45b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    45ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    45bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    45be:	8c 84       	ldd	r8, Y+12	; 0x0c
    45c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    45c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    45c4:	b9 84       	ldd	r11, Y+9	; 0x09
    45c6:	c8 84       	ldd	r12, Y+8	; 0x08
    45c8:	df 80       	ldd	r13, Y+7	; 0x07
    45ca:	ee 80       	ldd	r14, Y+6	; 0x06
    45cc:	fd 80       	ldd	r15, Y+5	; 0x05
    45ce:	0c 81       	ldd	r16, Y+4	; 0x04
    45d0:	1b 81       	ldd	r17, Y+3	; 0x03
    45d2:	aa 81       	ldd	r26, Y+2	; 0x02
    45d4:	b9 81       	ldd	r27, Y+1	; 0x01
    45d6:	ce 0f       	add	r28, r30
    45d8:	d1 1d       	adc	r29, r1
    45da:	0f b6       	in	r0, 0x3f	; 63
    45dc:	f8 94       	cli
    45de:	de bf       	out	0x3e, r29	; 62
    45e0:	0f be       	out	0x3f, r0	; 63
    45e2:	cd bf       	out	0x3d, r28	; 61
    45e4:	ed 01       	movw	r28, r26
    45e6:	08 95       	ret

000045e8 <_exit>:
    45e8:	f8 94       	cli

000045ea <__stop_program>:
    45ea:	ff cf       	rjmp	.-2      	; 0x45ea <__stop_program>
